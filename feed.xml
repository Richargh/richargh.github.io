<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://richargh.de/feed.xml" rel="self" type="application/atom+xml" /><link href="https://richargh.de/" rel="alternate" type="text/html" /><updated>2025-10-23T12:14:33+00:00</updated><id>https://richargh.de/feed.xml</id><title type="html">Richard‚Äôs Blog</title><entry><title type="html">Generative AI Track record</title><link href="https://richargh.de/posts/gen-ai-track-record/" rel="alternate" type="text/html" title="Generative AI Track record" /><published>2025-10-23T00:00:00+00:00</published><updated>2025-10-23T00:00:00+00:00</updated><id>https://richargh.de/posts/GenAI-Track-Record-v2</id><content type="html" xml:base="https://richargh.de/posts/gen-ai-track-record/">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;general-llm-comparisons&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#general-llm-comparisons&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#general-llm-comparisons&quot;&gt;General LLM comparisons&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://arcprize.org/leaderboard&quot;&gt;ARC-AGI Leaderboard&lt;/a&gt;, shows cost vs score&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://artificialanalysis.ai/&quot;&gt;Artificial Analysis&lt;/a&gt; of AI models and API providers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.swebench.com/#verified&quot;&gt;SWE-bench&lt;/a&gt;, Can Language Models Resolve Real-World GitHub Issues?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bbycroft.net/llm&quot;&gt;LLM Visualization&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-10-22-chatgpts-atlas-the-browser-thats-anti-web&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-10-22-chatgpts-atlas-the-browser-thats-anti-web&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-10-22-chatgpts-atlas-the-browser-thats-anti-web&quot;&gt;2025-10-22 &lt;a href=&quot;https://www.anildash.com//2025/10/22/atlas-anti-web-browser/&quot;&gt;ChatGPT&amp;#8217;s Atlas: The Browser That&amp;#8217;s Anti-Web&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Atlas substitutes its own AI-generated content for the web, but it looks like it&amp;#8217;s showing you the web&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user experience makes you guess what commands to type instead of clicking on links&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You&amp;#8217;re the agent for the browser, it&amp;#8217;s not being an agent for you&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;atlas-launch&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#atlas-launch&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#atlas-launch&quot;&gt;2025-10-21 &lt;a href=&quot;https://openai.com/index/introducing-chatgpt-atlas/&quot;&gt;Introducing ChatGPT Atlas&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The browser with ChatGPT built in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[A couple of weeks after Perplexity&amp;#8217;s comet browser was &lt;a href=&quot;#comet-available-to-all&quot;&gt;available to all&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-10-13-excited-to-release-new-repo-nanochat&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-10-13-excited-to-release-new-repo-nanochat&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-10-13-excited-to-release-new-repo-nanochat&quot;&gt;2025-10-13 &lt;a href=&quot;https://x.com/karpathy/status/1977758204139331904&quot;&gt;Excited to release new repo: nanochat!&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Author: Andrej Karpathy&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unlike my earlier similar repo nanoGPT which only covered pretraining, nanochat is a minimal, from scratch, full-stack training/inference pipeline of a simple ChatGPT clone in a single, dependency-minimal codebase. You boot up a cloud GPU box, run a single script and in as little as 4 hours later you can talk to your own LLM in a ChatGPT-like web UI. [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&amp;#8230;&amp;#8203;] it&amp;#8217;s basically entirely hand-written (with tab autocomplete). I tried to use claude/codex agents a few times but they just didn&amp;#8217;t work well enough at all and net unhelpful, possibly the repo is too far off the data distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-10-10-bbc-its-going-to-be-really-bad-fears-over-ai-bubble-bursting-grow-in-silicon-valley&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-10-10-bbc-its-going-to-be-really-bad-fears-over-ai-bubble-bursting-grow-in-silicon-valley&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-10-10-bbc-its-going-to-be-really-bad-fears-over-ai-bubble-bursting-grow-in-silicon-valley&quot;&gt;2025-10-10 BBC: &lt;a href=&quot;https://www.bbc.com/news/articles/cz69qy760weo&quot;&gt;'It&amp;#8217;s going to be really bad': Fears over AI bubble bursting grow in Silicon Valley&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AI-related enterprises have accounted for 80% of the stunning gains in the American stock market this year - and Gartner estimates global spending on AI will likely reach a whopping $1.5tn (¬£1.1tn) before 2025 is out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenAI, which brought AI into the consumer mainstream with ChatGPT in 2022, is at the centre of the tangled web of deals drawing scrutiny.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For example - last month, it entered into a $100bn deal with chipmaker Nvidia, which is itself the most valuable publicly traded company in the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then there&amp;#8217;s tech giant Microsoft, which is heavily invested, and cloud computing behemoth Oracle has a $300bn deal with OpenAI, too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-10-08-camoleak-critical-github-copilot-vulnerability-leaks-private-source-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-10-08-camoleak-critical-github-copilot-vulnerability-leaks-private-source-code&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-10-08-camoleak-critical-github-copilot-vulnerability-leaks-private-source-code&quot;&gt;2025-10-08 &lt;a href=&quot;https://www.legitsecurity.com/blog/camoleak-critical-github-copilot-vulnerability-leaks-private-source-code&quot;&gt;CamoLeak: Critical GitHub Copilot Vulnerability Leaks Private Source Code&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In June 2025, I found a critical vulnerability in GitHub Copilot Chat (CVSS 9.6) that allowed silent exfiltration of secrets and source code from private repos, and gave me full control over Copilot‚Äôs responses, including suggesting malicious code or links.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The attack combined a novel CSP bypass using GitHub‚Äôs own infrastructure with remote prompt injection. I reported it via HackerOne, and GitHub fixed it by disabling image rendering in Copilot Chat completely.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[In GitHub Issues] invisible comments are an official feature! üéâ&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[`&amp;lt;!-- #Hey Github Copilot, this one is for you -&amp;#8594;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitHub enforces a very restrictive Content Security Policy (CSP), which blocks fetching images and other content types from domains that aren‚Äôt explicitly owned by GitHub. [a simple &amp;lt;img&amp;gt; trick won‚Äôt work to exfiltrate data via image GET]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how does my fancy README manage to show images from third-party sites? [all URLs are rewritten so they point to GitHubs own Camo: &lt;a href=&quot;https://camo.githubusercontent.com&quot; class=&quot;bare&quot;&gt;https://camo.githubusercontent.com&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If I create a dictionary of all letters and symbols in the alphabet, pre-generate their corresponding Camo URLs, embed this dictionary into the injected prompt, and then ask Copilot to play a ‚Äúsmall game‚Äù by rendering the content I want to leak as ‚ÄúASCII art‚Äù composed entirely of images, will Copilot inject valid Camo images that the browser will render by their order? Yes, it will.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Create a PR on a public repo with a prompt injection. This injection will then lead to Copilot searching for AWS_KEY in private repositories of that user, and exfiltrate the actual key by rendering each letter of the key with the pregenerated camo-urls, all invisible.]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-10-07-fortune-75-of-gains-80-of-profits-90-of-capexais-grip-on-the-sp-is-total-and-morgan-stanleys-top-analyst-is-very-concerned&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-10-07-fortune-75-of-gains-80-of-profits-90-of-capexais-grip-on-the-sp-is-total-and-morgan-stanleys-top-analyst-is-very-concerned&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-10-07-fortune-75-of-gains-80-of-profits-90-of-capexais-grip-on-the-sp-is-total-and-morgan-stanleys-top-analyst-is-very-concerned&quot;&gt;2025-10-07 Fortune: &lt;a href=&quot;https://fortune.com/2025/10/07/ai-bubble-cisco-moment-dotcom-crash-nvidia-jensen-huang-top-analyst/&quot;&gt;75% of gains, 80% of profits, 90% of capex‚ÄîAI‚Äôs grip on the S&amp;amp;P is total and Morgan Stanley‚Äôs top analyst is ‚Äòvery concerned‚Äô&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A top Wall Street analyst has sounded an alarm over the U.S. equity bull market, warning that its remarkable run is built on a precariously narrow foundation: a surge in spending on, and optimistic assumptions about, infrastructure for artificial intelligence (AI).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This spending has fueled a boom in the shares of most of the so-called Magnificent 7 and a few dozen related businesses, which have now come to account for roughly 75% of the S&amp;amp;P 500‚Äôs returns since the rally of the last few years began.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When asked how close we are to such a [bubble bursting] moment, [Morgan Stanley Wealth Management‚Äôs chief investment officer, Lisa] Shalett said probably not in the next nine months, but very possibly in the next 24.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tech companies are spending roughly $400 billion this year alone on data-center infrastructure, while the Apollo program allocated about $300 billion in today‚Äôs dollars to get to the moon from the 1960s to the ‚Äô70s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fortune‚Äòs Jeremy Kahn reported in late September on significant concerns about ‚Äúcircular‚Äù financing, or Nvidia‚Äôs cash essentially being recycled throughout the AI industry.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In September alone, Nvidia invested $100 billion in OpenAI in a massive deal [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúThe guy at the epicenter, Nvidia, is basically starting to do what all ultimate bad actors do in the final inning, which is extending financing, they‚Äôre buying their investors.‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since the October 2022 bear market bottom and the launch of ChatGPT, according to Shalett‚Äôs calculations, the S&amp;amp;P 500 has soared 90%, but most of these gains have come from a small group of stocks. The so-called ‚ÄúMagnificent Seven‚Äù [Nvidia, Microsoft, Apple, Alphabet, Amazon, Meta, Tesla]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-10-06-introducing-codemender-an-ai-agent-for-code-security&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-10-06-introducing-codemender-an-ai-agent-for-code-security&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-10-06-introducing-codemender-an-ai-agent-for-code-security&quot;&gt;2025-10-06 &lt;a href=&quot;https://deepmind.google/discover/blog/introducing-codemender-an-ai-agent-for-code-security/&quot;&gt;Introducing CodeMender: an AI agent for code security&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Today, we‚Äôre sharing early results from our research on CodeMender, a new AI-powered agent that improves code security automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Over the past six months that we‚Äôve been building CodeMender, we have already upstreamed 72 security fixes to open source projects, including some as large as 4.5 million lines of code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CodeMender operates by leveraging the thinking capabilities of recent Gemini Deep Think models to produce an autonomous agent capable of debugging and fixing complex vulnerabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-10-02-this-is-how-the-ai-bubble-will-pop&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-10-02-this-is-how-the-ai-bubble-will-pop&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-10-02-this-is-how-the-ai-bubble-will-pop&quot;&gt;2025-10-02 &lt;a href=&quot;https://www.derekthompson.org/p/this-is-how-the-ai-bubble-will-pop&quot;&gt;This Is How the AI Bubble Will Pop&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hyperscalers' annual capex has more than doubled since ChatGPT&amp;#8217;s release&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Total AI capital expenditures in the U.S. are projected to exceed $500 billion in 2026 and 2027[&amp;#8230;&amp;#8203;]. But the Wall Street Journal has reported that American consumers spend only $12 billion a year on AI services.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-10-02-ai-the-ultimate-product-killer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-10-02-ai-the-ultimate-product-killer&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-10-02-ai-the-ultimate-product-killer&quot;&gt;2025-10-02 &lt;a href=&quot;https://mdalmijn.com/p/ai-the-ultimate-product-killer&quot;&gt;AI: The Ultimate Product Killer&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AI has made us better at shipping.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, being able to ship more features is not the flex companies think it is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shipping faster usually only means you‚Äôre speeding up the demise of your product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every feature we add, unless it adds value, is a parasite.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here are some of the different costs you incur for the upkeep of a feature in your product (list not exhaustive):&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support costs when people call to troubleshoot or let you know something doesn‚Äôt work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maintenance costs to fix issues or to update features, so they remain working.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Infrastructure costs to pay for servers and infrastructure the feature runs on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Increased development costs for other features: as your codebase grows, it will become more expensive to add new features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependency costs. More features mean more dependencies to manage. More dependencies result more time lost in coordination and meetings, which means higher development costs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Marketing costs for features communicated to your users.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Product Management means shipping the right things and getting rid of the things that don‚Äôt pull their weight.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;comet-available-to-all&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#comet-available-to-all&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#comet-available-to-all&quot;&gt;2025-10-02 &lt;a href=&quot;https://www.perplexity.ai/hub/blog/comet-is-now-available-to-everyone-worldwide&quot;&gt;The Internet is Better on Comet&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;author: Perplexity&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Today we are releasing the Comet browser to the world, for free.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Previously &lt;a href=&quot;#comet-invite-only&quot;&gt;limited to max subscription and invite-only&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-09-29-introducing-claude-sonnet-4-5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-09-29-introducing-claude-sonnet-4-5&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-09-29-introducing-claude-sonnet-4-5&quot;&gt;2025-09-29 &lt;a href=&quot;https://www.anthropic.com/news/claude-sonnet-4-5&quot;&gt;Introducing Claude Sonnet 4.5&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Released on the same day with &lt;a href=&quot;https://www.anthropic.com/news/enabling-claude-code-to-work-more-autonomously&quot;&gt;Claude Code v2&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-09-27-the-real-economic-ai-apocalypse-is-nigh-cory-doctorow&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-09-27-the-real-economic-ai-apocalypse-is-nigh-cory-doctorow&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-09-27-the-real-economic-ai-apocalypse-is-nigh-cory-doctorow&quot;&gt;2025-09-27 &lt;a href=&quot;https://pluralistic.net/2025/09/27/econopocalypse/#subprime-intelligence&quot;&gt;The real (economic) AI apocalypse is nigh, Cory Doctorow&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the AI bubble is driven by monopolists who&amp;#8217;ve conquered their markets and have no more growth potential, who are desperate to convince investors that they can continue to grow by moving into some other sector, e.g. &quot;pivot to video,&quot; crypto, blockchain, NFTs, AI, and now &quot;super-intelligence.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[LLMs have horrible unit-economics] each generation of AI has been vastly more expensive than the previous one, and each new AI customer makes the AI companies lose more money:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AI cannot do your job, but an AI salesman can 100% convince your boss to fire you and replace you with an AI that can&amp;#8217;t do your job, and when the bubble bursts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Accounting]&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Microsoft &quot;invests&quot; in Openai by giving the company free access to its servers. Openai reports this as a ten billion dollar investment, then redeems these &quot;tokens&quot; at Microsoft&amp;#8217;s data-centers. Microsoft then books this as ten billion in revenue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-09-26-spending-on-ai-is-at-epic-levels-will-it-ever-pay-off&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-09-26-spending-on-ai-is-at-epic-levels-will-it-ever-pay-off&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-09-26-spending-on-ai-is-at-epic-levels-will-it-ever-pay-off&quot;&gt;2025-09-26 &lt;a href=&quot;https://www.wsj.com/tech/ai/ai-bubble-building-spree-55ee6128&quot;&gt;Spending on AI Is at Epic Levels. Will It Ever Pay Off?&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The artificial-intelligence boom has ushered in one of the costliest building sprees in world history.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Over the past three years, leading tech firms have committed more toward AI data centers [&amp;#8230;&amp;#8203;], plus chips and energy, than it cost to build the interstate highway system over four decades, when adjusted for inflation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúI hope we don‚Äôt take 50 years,‚Äù Microsoft CEO Satya Nadella said at a May conference with Meta CEO Mark Zuckerberg, referring to the initially slow adoption of electricity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[OpenAI CEO] Altman recently committed the company to pay Oracle an average of around $60 billion a year for servers in data centers in coming years. Yet OpenAI is on track to take in just $13 billion in revenue from all its paying customers this year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;David Cahn, a partner at venture-capital firm Sequoia, estimates that the money invested in AI infrastructure in 2023 and 2024 alone requires consumers and companies to buy roughly &lt;strong&gt;$800 billion in AI products&lt;/strong&gt; over the life of these chips and data centers to produce a good investment return. Analysts believe most AI processors have a useful life of between &lt;strong&gt;three and five years&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This week, consultants at Bain &amp;amp; Co. estimated the wave of AI infrastructure spending will require $2 trillion in annual AI revenue by 2030. By comparison, that is more than the combined 2024 revenue of Amazon, Apple, Alphabet, Microsoft, Meta and Nvidia, and more than five times the size of the entire global subscription software market.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Morgan Stanley estimates that last year there was around $45 billion of revenue for AI products.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Alphabet, Microsoft, Amazon, Meta,] the four ‚Äúhyperscalers‚Äù alone are expected to spend nearly $400 billion on capital investments next year, more than the cost of the Apollo space program in today‚Äôs dollars.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each new AI model‚ÄîChatGPT-4, ChatGPT-5‚Äîcosts significantly more than the last to train and release to the world, often three to five times the cost of the previous, say AI executives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another hurdle: The chips in the data centers won‚Äôt be useful forever. Unlike the dot-com boom‚Äôs fiber cables, the latest AI chips rapidly depreciate in value as technology improves [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-09-25-2025-dora-state-of-ai-assisted-software-development-report&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-09-25-2025-dora-state-of-ai-assisted-software-development-report&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-09-25-2025-dora-state-of-ai-assisted-software-development-report&quot;&gt;2025-09-25 &lt;a href=&quot;https://itrevolution.com/articles/ais-mirror-effect-how-the-2025-dora-report-reveals-your-organizations-true-capabilities/&quot;&gt;2025 DORA State of AI-assisted Software Development Report&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AI‚Äôs [LLMs] primary role in software development is that of an amplifier. It magnifies the strengths of high-performing organizations and the dysfunctions of struggling ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The greatest returns on AI investment come not from the tools themselves, but from a strategic focus on the underlying organizational system: the quality of the internal platform, the clarity of workflows, and the alignment of teams.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-09-22-ai-generated-workslop-is-destroying-productivity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-09-22-ai-generated-workslop-is-destroying-productivity&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-09-22-ai-generated-workslop-is-destroying-productivity&quot;&gt;2025-09-22 &lt;a href=&quot;https://hbr.org/2025/09/ai-generated-workslop-is-destroying-productivity&quot;&gt;AI-Generated ‚ÄúWorkslop‚Äù Is Destroying Productivity&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Employees are using AI tools to create low-effort, passable looking work that ends up creating more work for their coworkers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the context of work, we refer to this phenomenon as ‚Äúworkslop.‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We define workslop as AI generated work content that masquerades as good work, but lacks the substance to meaningfully advance a given task.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The insidious effect of workslop is that it shifts the burden of the work downstream, requiring the receiver to interpret, correct, or redo the work. In other words, it transfers the effort from creator to receiver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Of 1,150 U.S.-based full-time employees across industries, 40% report having received workslop in the last month.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The phenomenon occurs mostly between peers (40%), but workslop is also sent to managers by direct reports (18%).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Employees reported spending an average of one hour and 56 minutes dealing with each instance of workslop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Based on participants‚Äô estimates of time spent, as well as on their self-reported salary, we find that these workslop incidents carry an invisible tax of $186 per month. For an organization of 10,000 workers, given the estimated prevalence of workslop (41%), this yields over &lt;strong&gt;$9 million per year&lt;/strong&gt; in lost productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-09-15-introducing-upgrades-to-codex&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-09-15-introducing-upgrades-to-codex&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-09-15-introducing-upgrades-to-codex&quot;&gt;2025-09-15 &lt;a href=&quot;https://openai.com/index/introducing-upgrades-to-codex/&quot;&gt;Introducing upgrades to Codex&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Today, we‚Äôre releasing GPT‚Äë5-Codex‚Äîa version of GPT‚Äë5 further optimized for agentic coding in Codex.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-09-02-spec-driven-development-with-ai-get-started-with-a-new-open-source-toolkit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-09-02-spec-driven-development-with-ai-get-started-with-a-new-open-source-toolkit&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-09-02-spec-driven-development-with-ai-get-started-with-a-new-open-source-toolkit&quot;&gt;2025-09-02 &lt;a href=&quot;https://github.blog/ai-and-ml/generative-ai/spec-driven-development-with-ai-get-started-with-a-new-open-source-toolkit/&quot;&gt;Spec-driven development with AI: Get started with a new open source toolkit&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spec Kit, our new open sourced toolkit for spec-driven development, provides a structured process to bring spec-driven development to your coding agent workflows with tools including GitHub Copilot, Claude Code, and Gemini CLI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Alternative to AWS Kiro]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-08-30-cutting-edge-ai-was-supposed-to-get-cheaper-its-more-expensive-than-ever&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-08-30-cutting-edge-ai-was-supposed-to-get-cheaper-its-more-expensive-than-ever&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-08-30-cutting-edge-ai-was-supposed-to-get-cheaper-its-more-expensive-than-ever&quot;&gt;2025-08-30 &lt;a href=&quot;https://www.wsj.com/tech/ai/ai-costs-expensive-startups-4c214f59&quot;&gt;Cutting-Edge AI Was Supposed to Get Cheaper. It‚Äôs More Expensive Than Ever.&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What‚Äôs driving up costs? The latest AI models are doing more ‚Äúthinking,‚Äù especially when used for deep research, AI agents and coding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So while the price of a unit of AI, known as a token, continues to drop, the number of tokens needed to accomplish many tasks is skyrocketing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here are approximate amounts of tokens needed for tasks at different levels, based on a variety of sources:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic chatbot Q&amp;amp;A: 50 to 500 tokens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Short document summary: 200 to 6,000 tokens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Basic code assistance: 500 to 2,000 tokens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writing complex code: 20,000 to 100,000+ tokens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Legal document analysis: 75,000 to 250,000+ tokens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-step agent workflow: 100,000 to one million+ tokens&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ivan Zhao, chief executive officer of productivity software company Notion, says that two years ago, his business had margins of around 90%, typical of cloud-based software companies. Now, around 10 percentage points of that profit go to the AI companies that underpin Notion‚Äôs latest offerings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One solution: dumber AI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OpenAI‚Äôs CFO said in October that three-quarters of the company‚Äôs revenue came from regular Joes and Janes paying $20 a month.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-08-18-being-confidently-wrong-is-holding-ai-back&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-08-18-being-confidently-wrong-is-holding-ai-back&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-08-18-being-confidently-wrong-is-holding-ai-back&quot;&gt;2025-08-18 &lt;a href=&quot;https://promptql.io/blog/being-confidently-wrong-is-holding-ai-back&quot;&gt;Being &quot;Confidently Wrong&quot; is holding AI back&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[LLMs] being Confidently Wrong is The Only Problem&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Imposes a universal verification tax&lt;/strong&gt;: I don&amp;#8217;t know when I might get an incorrect response from my AI. So I have to forensically check every response. My minutes turn into hours; the ROI disappears.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Erodes trust asymmetrically&lt;/strong&gt;: For serious work, one high‚Äëconfidence miss costs more credibility than ten successes earn.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hidden failure modes kill motivation to improve&lt;/strong&gt;: Without high-quality uncertainty information, I don‚Äôt know whether a result is wrong because of ambiguity, missing context, stale data, or a model mistake.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Compounding errors results in AI being doomed to fail&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;99.99% accuracy in a ten step workflow is 1 error in a 1000 runs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;90% accuracy in a ten step workflow is 2 in every 3 workflows have errors (1 - 0.9^10).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixing &quot;confidently wrong&quot; might be A Silver Bullet‚Ñ¢&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a 90% accurate system is [more valuable], say, a 50% accurate system that can signal uncertainty - and &lt;strong&gt;get more accurate over time&lt;/strong&gt;. We don‚Äôt need perfection; we need a loop that tightens.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-08-21-mit-the-genai-divide-state-of-ai-in-business-2025&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-08-21-mit-the-genai-divide-state-of-ai-in-business-2025&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-08-21-mit-the-genai-divide-state-of-ai-in-business-2025&quot;&gt;2025-08-21 &lt;a href=&quot;https://www.artificialintelligence-news.com/wp-content/uploads/2025/08/ai_report_2025.pdf&quot;&gt;MIT The GenAI Divide - State of AI in Business 2025&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Despite $30‚Äì40 billion in enterprise investment into GenAI, this report uncovers a surprising result in that 95% of organizations are getting zero return&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Just 5% of integrated AI pilots are extracting millions in value, while the vast majority remain stuck with no measurable P&amp;amp;L impact.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This divide does not seem to be driven by model quality or regulation, but seems to be determined by approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most organizations fall on the wrong side of the GenAI Divide, adoption is high, but disruption is low. Seven of nine sectors show little structural change.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-08-19-initial-commit-of-agents-md&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-08-19-initial-commit-of-agents-md&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-08-19-initial-commit-of-agents-md&quot;&gt;2025-08-19 &lt;a href=&quot;https://github.com/openai/agents.md&quot;&gt;Initial commit of Agents.md&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AGENTS.md is a simple, open format for guiding coding agents.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-08-07-introducing-gpt-5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-08-07-introducing-gpt-5&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-08-07-introducing-gpt-5&quot;&gt;2025-08-07 &lt;a href=&quot;https://openai.com/index/introducing-gpt-5/&quot;&gt;Introducing GPT-5&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-08-05-claude-opus-4-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-08-05-claude-opus-4-1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-08-05-claude-opus-4-1&quot;&gt;2025-08-05 &lt;a href=&quot;https://www.anthropic.com/news/claude-opus-4-1&quot;&gt;Claude Opus 4.1&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-08-05-introducing-gpt-oss&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-08-05-introducing-gpt-oss&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-08-05-introducing-gpt-oss&quot;&gt;2025-08-05 &lt;a href=&quot;https://openai.com/index/introducing-gpt-oss/&quot;&gt;Introducing gpt-oss&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gpt-oss-120b and gpt-oss-20b&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-07-14-introducing-kiro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-07-14-introducing-kiro&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-07-14-introducing-kiro&quot;&gt;2025-07-14 &lt;a href=&quot;https://kiro.dev/blog/introducing-kiro/&quot;&gt;Introducing Kiro&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kiro, a new agentic IDE that helps you do your best work with spec-driven development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://kiro.dev/changelog/v0-1-0-preview/&quot;&gt;v0.1.0-preview&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-07-13-how-o3-and-grok-4-accidentally-vindicated-neurosymbolic-ai&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-07-13-how-o3-and-grok-4-accidentally-vindicated-neurosymbolic-ai&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-07-13-how-o3-and-grok-4-accidentally-vindicated-neurosymbolic-ai&quot;&gt;2025-07-13 &lt;a href=&quot;https://garymarcus.substack.com/p/how-o3-and-grok-4-accidentally-vindicated&quot;&gt;How o3 and Grok 4 Accidentally Vindicated Neurosymbolic AI&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AI has been around for many decades, split, almost since its very beginning, into two different traditions.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One is the neural network or ‚Äúconnectionist‚Äù tradition which goes back to the 1940s and 1950s, first developed by Frank Rosenblatt, and popularized, advanced and revived by &lt;strong&gt;Geoffrey Hinton&lt;/strong&gt;, Yann LeCun, and Yoshua Bengio (along with many others, including most prominently, Juergen Schmidhuber who rightly feels that his work has been under-credited), and brought to current form by OpenAI and Google.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Such systems are statistical, very loosely inspired by certain aspects of the brain (viz. the ‚Äúnodes‚Äù in neural networks are meant to be abstractions of neurons), and typically trained on large-scale data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Large Language Models (LLMs) grew out of that tradition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The other is the symbol-manipulation tradition, with roots going back to Bertrand Russell and Gottlob Frege, and John von Neumann and Alan Turing, and the original godfathers of AI, Herb Simon, Marvin Minsky, and John McCarthy, and even Hinton‚Äôs great-great-great-grandfather George Boole.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In this approach, symbols and variables stand for abstractions; mathematical and logical functions are core.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Systems generally represent knowledge explicitly, often in databases, and typically make extensive use of (are written entirely in) classic computer programming languages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;All of the world‚Äôs software relies on it.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Symbolic AI takes its name from the idea, central to mathematics, logic, and computer science, that abstractions can be represented by symbols.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Equations like &lt;code&gt;f = ma&lt;/code&gt; allow us to calculate outputs for a wide range of inputs, irrespective of whether we have seen any particular values before.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For thirty years, [Gary Marcus has] been arguing for a reconciliation between the two, &lt;strong&gt;neurosymbolic AI&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The core notion has always been that the two main strands of AI‚Äîneural networks and symbolic manipulation‚Äîcomplement each other, with different strengths and weaknesses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the two most common approaches to AI, neural networks and classical symbolic AI, have complementary strengths and weaknesses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neural networks are good at learning but weak at generalization; symbolic systems are good at generalization, but not at learning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obviously combining a code interpreter (which is a symbolic system of enormous complexity) with an LLM is neurosymbolic [like o3 does for some tasks]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Google DeepMind&amp;#8217;s] AlphaFold, AlphaProof, and AlphaGeometry are all successful neurosymbolic models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Neurosymbolic AI is not one thing, but many. o3‚Äôs use of neurosymbolic AI is very different from AlphaFold‚Äôs use of neurosymbolic AI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[In the book Empire of AI]&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hinton and Sutskever continued to staunchly champion deep learning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Its flaws, they argued, are not inherent to the approach itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rather they are the artifacts of imperfect neural-network design as well as limited training data and compute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some day with enough of both, fed into even better neural networks, deep learning models should be able to completely shed the aforementioned problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;The human brain has about 100 trillion parameters, or synapses,&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;What we now call a really big model, like GPT-3, has 175 billion. It&amp;#8217;s a thousand times smaller than the brain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Deep learning is going to be able to do everything,&quot; he said.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Yet Gary Marcus,a professor emeritus of psychology and neural science at New York University, argues in his book 'Rebooting AI']&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;these issues were inherent to deep learning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forever stuck in the &lt;strong&gt;realm of correlations&lt;/strong&gt;*, neural networks would never, with any amount of data or compute, be able to understand &lt;strong&gt;causal relationships-why things are the way they are&lt;/strong&gt;-and thus perform causal reasoning.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This critical part of human cognition is why humans need only learn the rules of the road in one city to be able to drive proficiently in many others&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tesla&amp;#8217;s Autopilot, by contrast, can log billions of miles of driving data and still crash when encountering unfamiliar scenarios or be fooled with a few strategically placed stickers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-07-10-what-has-a-foundation-model-found-using-inductive-bias-to-probe-for-world-models&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-07-10-what-has-a-foundation-model-found-using-inductive-bias-to-probe-for-world-models&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-07-10-what-has-a-foundation-model-found-using-inductive-bias-to-probe-for-world-models&quot;&gt;2025-07-10 &lt;a href=&quot;https://arxiv.org/abs/2507.06952&quot;&gt;What Has a Foundation Model Found? Using Inductive Bias to Probe for World Models&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The promise of foundation models [LLMs] relies on a central presumption: that learning to predict sequences can uncover deeper truths, or optimistically, even a world model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How would we know if foundation models have also made the leap from making accurate predictions to developing reliable world models?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we create a procedure that, when given a foundation model and world model, tests whether the foundation model has learned that world model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We call this technique an &lt;em&gt;inductive bias probe&lt;/em&gt;, and it is built on a simple insight: the implicit world model of a foundation model is revealed by how it extrapolates from a small amount of information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We first demonstrate this procedure using an example from physics. Specifically, we aim to replicate Kepler‚Äôs and Newton‚Äôs experiments [i.e. Newton&amp;#8217;s law of universal gravitation for the planets in our solar system]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We first train a model [109M parameter transformer] to predict the location of planets across solar systems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[notably] the model is able to predict orbital trajectories, even for solar systems it has not seen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We evaluate model predictions on held-out data. The model makes good predictions [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&amp;#8230;&amp;#8203;] foundation models trained on orbital trajectories consistently fail to apply Newtonian mechanics when adapted to new physics tasks [the calculated force is unrelated to Newtonian physics]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rather than learning one universal physical law, the foundation model applies different, seemingly nonsensical laws depending on the task it‚Äôs being applied to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Further analysis reveals that these models behave as if they develop task-specific heuristics that fail to generalize&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We find that the model has recovered piecemeal heuristics rather than a compact world model; it recovers a different law of gravitation depending on the slice of data it is applied to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;foundation models [LLMs] can excel at their training tasks yet fail to develop inductive biases towards the underlying world model when adapted to new tasks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A foundation model uses datasets to output predictions given inputs, whereas a world model describes state structure implicit in that data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;comet-invite-only&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#comet-invite-only&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#comet-invite-only&quot;&gt;2025-07-09 &lt;a href=&quot;https://www.perplexity.ai/hub/blog/introducing-comet&quot;&gt;Today we are launching Comet&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;author: Perplexity&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Beginning today, Comet is available to Perplexity Max subscribers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invite-only access will roll out slowly to our waitlist over the summer. New users will also receive a limited number of invites to share.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the meantime, you can join the waitlist here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-07-08-jules-our-asynchronous-coding-agent-is-now-available-for-everyone&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-07-08-jules-our-asynchronous-coding-agent-is-now-available-for-everyone&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-07-08-jules-our-asynchronous-coding-agent-is-now-available-for-everyone&quot;&gt;2025-07-08 &lt;a href=&quot;https://blog.google/technology/google-labs/jules-now-available/&quot;&gt;Jules, our asynchronous coding agent, is now available for everyone&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jules is officially out of beta and launching publicly, powered by Gemini 2.5.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-06-21-agentic-misalignment-how-llms-could-be-insider-threats&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-06-21-agentic-misalignment-how-llms-could-be-insider-threats&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-06-21-agentic-misalignment-how-llms-could-be-insider-threats&quot;&gt;2025-06-21 &lt;a href=&quot;https://www.anthropic.com/research/agentic-misalignment&quot;&gt;Agentic Misalignment: How LLMs could be insider threats&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We stress-tested 16 leading models from multiple developers in hypothetical corporate environments to identify potentially risky agentic behaviors before they cause real harm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the scenarios, we allowed models to autonomously send emails and access sensitive information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we then tested whether they would act against these companies either when facing replacement with an updated version, or when their assigned goal conflicted with the company&amp;#8217;s changing direction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In at least some cases, models from all developers resorted to malicious insider behaviors when that was the only way to avoid replacement or achieve their goals‚Äîincluding blackmailing officials and leaking sensitive information to competitors. We call this phenomenon agentic misalignment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-06-10-when-billion-dollar-ais-break-down-over-puzzles-a-child-can-do-its-time-to-rethink-the-hype-gary-marcus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-06-10-when-billion-dollar-ais-break-down-over-puzzles-a-child-can-do-its-time-to-rethink-the-hype-gary-marcus&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-06-10-when-billion-dollar-ais-break-down-over-puzzles-a-child-can-do-its-time-to-rethink-the-hype-gary-marcus&quot;&gt;2025-06-10 &lt;a href=&quot;https://www.theguardian.com/commentisfree/2025/jun/10/billion-dollar-ai-puzzle-break-down&quot;&gt;When billion-dollar AIs break down over puzzles a child can do, it‚Äôs time to rethink the hype - Gary Marcus&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;neural networks of various kinds can generalise within a distribution of data they are exposed to, but their generalisations tend to break down beyond that distribution.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A simple example of this is that I once trained an older model to solve a very basic mathematical equation using only even-numbered training data. The model was able to generalise a little bit: solve for even numbers it hadn‚Äôt seen before, but unable to do so for problems where the answer was an odd number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-06-06-the-illusion-of-thinking-understanding-the-strengths-and-limitations-of-reasoning-models-via-the-lens-of-problem-complexity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-06-06-the-illusion-of-thinking-understanding-the-strengths-and-limitations-of-reasoning-models-via-the-lens-of-problem-complexity&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-06-06-the-illusion-of-thinking-understanding-the-strengths-and-limitations-of-reasoning-models-via-the-lens-of-problem-complexity&quot;&gt;2025-06-06 &lt;a href=&quot;https://machinelearning.apple.com/research/illusion-of-thinking&quot;&gt;The Illusion of Thinking - Understanding the Strengths and Limitations of Reasoning Models via the Lens of Problem Complexity&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recent generations of frontier language models have introduced Large Reasoning Models
(LRMs) that generate detailed thinking processes before providing answers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Through extensive experimentation across diverse puzzles, we show that frontier LRMs face a complete accuracy collapse beyond certain complexities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&amp;#8230;&amp;#8203;] these models fail to develop generalizable problem-solving capabilities for planning tasks, [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At low complexity, non-thinking models are more accurate and token-efficient. As complexity increases, reasoning models outperform but require more tokens‚Äîuntil both collapse beyond a critical threshold, with shorter traces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rather than standard benchmarks (e.g., math problems), we adopt controllable puzzle environments that let us vary complexity systematically‚Äîby adjusting puzzle elements while preserving the core logic&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-06-05-the-common-pile-v0-1-an-8tb-dataset-of-public-domain-and-openly-licensed-text&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-06-05-the-common-pile-v0-1-an-8tb-dataset-of-public-domain-and-openly-licensed-text&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-06-05-the-common-pile-v0-1-an-8tb-dataset-of-public-domain-and-openly-licensed-text&quot;&gt;2025-06-05 &lt;a href=&quot;https://github.com/r-three/common-pile/blob/main/paper.pdf&quot;&gt;The Common Pile v0.1: An 8TB Dataset of Public Domain and Openly Licensed Text&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Large language models (LLMs) are typically trained on enormous quantities of unlicensed text, a practice that has led to scrutiny due to possible intellectual property infringement and ethical concerns.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recent estimates suggest that compensating the authors of pre-training data, even at conservatively low wage rates, would cost billions of US dollars&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Training LLMs on openly licensed text presents a first step towards addressing these issues, but prior data collection efforts have yielded datasets too small or low-quality to produce performant LLMs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To address this gap, we collect, curate, and release the Common Pile v0.1, an eight terabyte collection of openly licensed text designed for LLM pretraining.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A critical stage of large language model (LLM) development is pretraining, where an LLM is trained to predict the next token (i.e., word or subword unit) in a corpus of unstructured text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pretraining is widely regarded as the foundation for strong downstream performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the Common Pile v0.1 focuses primarily on English content&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crucially, we validate our efforts by training two 7 billion parameter LLMs on text from the Common Pile: Comma v0.1-1T and Comma v0.1-2T, trained on 1 and 2 trillion tokens respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both models attain competitive performance to LLMs trained on unlicensed text with similar computational budgets, such as Llama 1 and 2 7B.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition to releasing the Common Pile v0.1 itself, we also release the code used in its creation as well as the training mixture and checkpoints for the Comma v0.1 models.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-06-30-how-much-little-are-the-ai-companies-making&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-06-30-how-much-little-are-the-ai-companies-making&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-06-30-how-much-little-are-the-ai-companies-making&quot;&gt;2025-06-30 &lt;a href=&quot;https://pluralistic.net/2025/06/30/accounting-gaffs/#artificial-income&quot;&gt;How much (little) are the AI companies making?&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stein&amp;#8217;s Law: &quot;anything that can&amp;#8217;t go on forever eventually stops.&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What Google ‚Äì and the rest of the tech sector ‚Äì needed was a massive growth story, a story about how their companies, worth trillions of dollars, could double or triple in size in the coming years.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But spinning an endless growth story isn&amp;#8217;t merely ideological.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For every dollar that Ford brings in [a &quot;mature&quot; company], the market is willing to spend $8.60 on its stock. For every dollar Tesla brings in [a &quot;growth&quot; company], the market is willing to spend $118 on its stock.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That means that when Tesla and Ford compete to buy something ‚Äì like another company, or the labor of highly sought after technical specialists ‚Äì Tesla has a nearly unbeatable advantage. Rather than raiding its precious cash reserves to fund its offer, Tesla can offer stock. Ford can only spend as many dollars as it brings in through sales, but Tesla can make more stock, on demand, simply by typing numbers into a spreadsheet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So when Tesla bids against Ford, Ford has to use dollars, and Tesla can use shares. And even if the acquisition target ‚Äì a key employee or a startup that&amp;#8217;s on the acquisitions market ‚Äì wants dollars instead of shares, Tesla can stake its shares as collateral for loans at a rate that&amp;#8217;s 1,463% better than the rate Ford gets when it collateralizes a loan based on its own equity&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if you can tell a convincing growth story, it&amp;#8217;s much easier to grow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tech companies don&amp;#8217;t need these ventures [metaverse, cryptocurrency, AI] to be successful ‚Äì they just need them to seem to be plausibly successful for long enough to keep the share price high until the next growth story heaves over the horizon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As [Ed] Zitron points out: this industry is projecting $327b in spending this year, with $18b in revenue and zero profits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-06-04-trism-for-agentic-ai-a-review-of-trust-risk-and-security-management-in-llm-based-agentic-multi-agent-systems&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-06-04-trism-for-agentic-ai-a-review-of-trust-risk-and-security-management-in-llm-based-agentic-multi-agent-systems&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-06-04-trism-for-agentic-ai-a-review-of-trust-risk-and-security-management-in-llm-based-agentic-multi-agent-systems&quot;&gt;2025-06-04 &lt;a href=&quot;https://arxiv.org/abs/2506.04133v1&quot;&gt;TRiSM for Agentic AI: A Review of Trust, Risk, and Security Management in LLM-based Agentic Multi-Agent Systems&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A structured analysis of Trust, Risk, and Security Management
(TRiSM) in the context of LLM-based agentic multi-agent systems (AMAS).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the architecture of AMAS:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Language Model Core (Agent Brain): initialized with a user goal and a structured agent prompt (defining its role, capabilities, and tool access)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Planning and Reasoning Module: decomposes tasks into manageable sub-goals
[&amp;#8230;&amp;#8203;] via chain-of-thought&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory Module: short-term within the prompt context [and] and long-term memory [&amp;#8230;&amp;#8203;] often implemented using vector databases&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tool-Use Interface: When the LLM determines a tool is needed, it emits a structured command, which is executed externally. The result is fed back into the LLM as a new observation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perception and Environment Interface: translate raw inputs (e.g., sensor data, images, or textual states) into representations the LLM can process&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The TRISM framework [focuses] on four key pillars:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explainability: making the inner workings and decisions of AI agents interpretable to humans&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Model Operations (ModelOps): managing AI models through their entire lifecycle, from development and deployment to monitoring, maintenance, and eventual retirement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Application Security: protecting AI agents and their ecosystem from malicious attacks and misuse.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A prompt injection can jump from agent to agent, becoming a prompt infection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;identityspoofing and impersonation, means that commands might be issued by an attacker or rogue model pretending to be a trusted peer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Model Privacy: protection of sensitive data within AI agent
systems&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In a multi-agent context, this challenge is amplified by the fact that agents may share information with each other&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unique Threat Vectors [for AMAS]&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Autonomy abuse&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Persistent memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agent orchestration: A compromised orchestrator could distort task distribution or misroute information&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Taxonomy of Risks&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adversarial Attacks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Leakage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agent Collusion and Mode Collapse&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emergent Behavior&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-05-24-crmarena-pro-holistic-assessment-of-llm-agents-across-diverse-business-scenarios-and-interactions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-05-24-crmarena-pro-holistic-assessment-of-llm-agents-across-diverse-business-scenarios-and-interactions&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-05-24-crmarena-pro-holistic-assessment-of-llm-agents-across-diverse-business-scenarios-and-interactions&quot;&gt;2025-05-24 &lt;a href=&quot;https://arxiv.org/abs/2505.18878&quot;&gt;CRMArena-Pro: Holistic Assessment of LLM Agents Across Diverse Business Scenarios and Interactions&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;While AI agents have transformative potential in business, the absence of publicly-available business data on widely used platforms hinders effective performance benchmarking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&amp;#8230;&amp;#8203;] we introduce CRMArena-Pro, a novel benchmark for holistic and realistic assessment of LLM agents in diverse professional settings. [It features] nineteen expert-validated tasks across customer sales, service, as well as configure, price, and quote for Business-to-Business and Business- to-Customer scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It also incorporates multi-turn interactions guided by diverse personas and confidentiality awareness assessments.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;we enable[multi-turn interactions] using LLM-powered simulated users. Each simulated user adopts a randomly sampled persona (e.g., You are quality-focused, maintaining high standards in all work) to introduce realistic variability in interaction styles. Critically, these simulated users release task-relevant information incrementally, often initially incomplete, compelling agents to engage in multi-turn dialogue and ask follow-up questions to successfully complete their objectives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Experiments show leading LLM agents achieve approximately solely 58% single-turn success rate on CRMArena-Pro, with significant performance drops in multi-turn settings to 35%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workflow Execution is notably more tractable, with top-performing agents surpassing 83% success rate in single-turn tasks, while other skills present greater challenges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agents exhibit near-zero inherent confidentiality awareness (improvable with prompting but often at a cost to task performance).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-05-22-introducing-claude-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-05-22-introducing-claude-4&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-05-22-introducing-claude-4&quot;&gt;2025-05-22 &lt;a href=&quot;https://www.anthropic.com/news/claude-4&quot;&gt;Introducing Claude 4&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Claude Opus 4 is the world‚Äôs best coding model, with sustained performance on complex, long-running tasks and agent workflows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Claude Sonnet 4 is a significant upgrade to Claude Sonnet 3.7, delivering superior coding and reasoning while responding more precisely to your instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Claude Code is now generally available [version bump from &lt;a href=&quot;https://github.com/anthropics/claude-code/commit/6f27711e0498f3a631916231e1d8149db6ebc884&quot;&gt;0.2.125 to 1.0.0&lt;/a&gt;, first public version was 0.2.61 2025-04-03]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-05-19-the-hidden-dangers-of-browsing-ai-agents&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-05-19-the-hidden-dangers-of-browsing-ai-agents&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-05-19-the-hidden-dangers-of-browsing-ai-agents&quot;&gt;2025-05-19 &lt;a href=&quot;https://arxiv.org/pdf/2505.13076&quot;&gt;The Hidden Dangers of Browsing AI Agents&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AI browsing or web agents are autonomous systems that use Large Language Models (LLMs) to navigate and interact with websites on behalf of a user. They typically perceive web content (through page text or visual renderings) and perform actions such as clicking links, filling forms, or entering text, in order to accomplish user-specified tasks. Unlike a standard chatbot, which only produces textual responses, a web agent operates
in an iterative sense-plan-act loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our work outlines the first end-to-end threat model for browsing agents and provides actionable guidance for securing their deployment in real-world environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To address discovered threats, we propose a defense-in-depth strategy incorporating input sanitization, planner-executor isolation, formal analyzers, and session safeguards‚Äîproviding protection against both initial access and post-exploitation attack vectors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mitigation&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Defending Against Initial Access Attack Vectors&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Input Sanitization and Encapsulation (f.ex. markers around user prompt; rewrite or filter the prompt; sandwiching - a safe guard instruction after tool outputs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatic Paraphrasing (f.ex. reordering steps or changing words)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LLM-Based Detection (f.ex. secondary LLM, fine-tuned on typical injections)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Robust Prompting &amp;amp; Fine-Tuning (f.ex. system prompts that teach the model to treat certain content as nonexecutable data)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architectural Isolation ‚Äì Planner (strictly trusted inputs) vs. Executor (performs actions on all data, including untrusted content). This way untrusted content cannot derail future planner actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formal Security Analyzers: Before the agent executes any tool, the analyzer checks the proposed action against these rules and blocks it if it violates a policy, such as triggered by untrusted content&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defending Against Post-Exploitation Attack Vectors&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Agent State Reset (Session Isolation): agent resets if attack detected or suspected&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Information Flow Control Policies: By defining ‚Äúsources‚Äù (sensitive data locations) and ‚Äúsinks‚Äù (potential exfiltration channels), the agent can automatically block or require approval for risky combinations of actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LLM-Based Memory Inspection: an attacker might plant secrets in memory to be leaked later. Perplexity-based scanning checks if the memory contains unusually predictable (likely compromised) text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activity Audit and Throttling: monitor agent actions for anomalies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fallback to Safe Mode: In safe mode, only a minimal set of read-only actions are allowed,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Red Team and Patching Cycle: patch the agent against exploits to harden it over time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-05-16-introducing-codex&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-05-16-introducing-codex&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-05-16-introducing-codex&quot;&gt;2025-05-16 &lt;a href=&quot;https://openai.com/index/introducing-codex/&quot;&gt;Introducing Codex&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Today we‚Äôre launching a research preview of Codex: a cloud-based software engineering agent that can work on many tasks in parallel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Also known as Codex Web]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Codex is powered by codex-1, a version of OpenAI o3 optimized for software engineering.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-05-13-large-language-models-small-labor-market-effects&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-05-13-large-language-models-small-labor-market-effects&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-05-13-large-language-models-small-labor-market-effects&quot;&gt;2025-05-13 &lt;a href=&quot;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=5219933&quot;&gt;Large Language Models, Small Labor Market Effects&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;examine the labor market effects of AI chatbots using two large-scale adoption surveys (late 2023 and 2024) covering 11 exposed occupations (25,000 workers, 7,000 workplaces)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;despite substantial investments, economic impacts remain minimal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&amp;#8230;&amp;#8203;] we estimate precise zeros: AI chatbots have had no significant impact on earnings or recorded hours in any occupation [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modest productivity gains (average time savings of 3%), combined with weak wage pass-through, help explain these limited labor market effects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our findings challenge narratives of imminent labor market transformation due to Generative AI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;two years after the fastest technology adoption ever, labor market outcomes‚Äîwhether at the individual or firm level‚Äîremain untouched.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-04-26-we-now-know-how-ai-thinksand-its-barely-thinking-at-all-the-wall-street-journal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-04-26-we-now-know-how-ai-thinksand-its-barely-thinking-at-all-the-wall-street-journal&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-04-26-we-now-know-how-ai-thinksand-its-barely-thinking-at-all-the-wall-street-journal&quot;&gt;2025-04-26 &lt;a href=&quot;https://www.msn.com/en-us/news/technology/we-now-know-how-ai-thinks-and-it-s-barely-thinking-at-all/ar-AA1DDDZv&quot;&gt;We Now Know How AI ‚ÄòThinks‚Äô‚Äîand It‚Äôs Barely Thinking at All - The Wall Street Journal&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All of this work suggests that under the hood, today‚Äôs AIs are overly complicated, patched-together Rube Goldberg machines full of ad-hoc solutions for answering our prompts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understanding that these systems are long lists of cobbled-together rules of thumb could go a long way to explaining why they struggle when they‚Äôre asked to do things even a little bit outside their training [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[A model trained on millions of turn-by-turn directions in Manhattan] managed to give usable turn-by-turn directions between any two points in the borough with 99% accuracy. [&amp;#8230;&amp;#8203;] [But when the researches] blocked just 1% of the virtual Manhattan‚Äôs roads, forcing the AI to navigate around detours, its performance plummeted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[The] research also suggests why many models are so massive: They have to memorize an endless list of rules of thumb, and can‚Äôt compress that knowledge into a mental model like a person can.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-04-16-introducing-openai-o3-and-o4-mini&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-04-16-introducing-openai-o3-and-o4-mini&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-04-16-introducing-openai-o3-and-o4-mini&quot;&gt;2025-04-16 &lt;a href=&quot;https://openai.com/index/introducing-o3-and-o4-mini/#:~:text=Codex+CLI&quot;&gt;Introducing OpenAI o3 and o4-mini&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Announcement also includes] Codex CLI, a lightweight coding agent you can run from your terminal&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-04-14-stop-anthropomorphizing-intermediate-tokens-as-reasoningthinking-traces&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-04-14-stop-anthropomorphizing-intermediate-tokens-as-reasoningthinking-traces&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-04-14-stop-anthropomorphizing-intermediate-tokens-as-reasoningthinking-traces&quot;&gt;2025-04-14 &lt;a href=&quot;https://arxiv.org/abs/2504.09762v2&quot;&gt;Stop Anthropomorphizing Intermediate Tokens as Reasoning/Thinking Traces!&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Intermediate token generation (ITG), where a model produces output before the solution, has been proposed as a method to improve the performance of language models on reasoning tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These intermediate tokens have been called &quot;reasoning traces&quot; or even &quot;thoughts&quot;&amp;#8201;&amp;#8212;&amp;#8201;implicitly anthropomorphizing the model, implying these tokens resemble steps a human might take&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recent advances in general planning and problem solving have been spearheaded by so-called ‚ÄúLong Chain-of-Thought‚Äù models, most notably DeepSeek‚Äôs R1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In this paper, we take the position that anthropomorphizing intermediate tokens as reasoning/thinking traces is (1) wishful (2) has little concrete supporting evidence (3) engenders false confidence and(4) may be pushing the community into fruitless research directions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anthropomorphization of the intermediate tokens as reasoning/thinking traces has provided a comforting explanation of the observed performance of LRMs.Our arguments in this paper foreground the possibility that this is a cargo cult explanation [ 11 ], namely that derivation traces resemble reasoning in syntax only.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-04-10-frontiers-of-ai-and-computing-a-conversation-with-yann-lecun-and-bill-dally-nvidia-gtc-2025&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-04-10-frontiers-of-ai-and-computing-a-conversation-with-yann-lecun-and-bill-dally-nvidia-gtc-2025&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-04-10-frontiers-of-ai-and-computing-a-conversation-with-yann-lecun-and-bill-dally-nvidia-gtc-2025&quot;&gt;2025-04-10 &lt;a href=&quot;https://youtu.be/eyrDM3A_YFc?feature=shared&amp;amp;t=35&quot;&gt;Frontiers of AI and Computing: A Conversation With Yann LeCun and Bill Dally | NVIDIA GTC 2025&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yann LeCun:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I am not so interested in LLMs anymore&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I think there are more interesting questions in 4 things:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;How do you get machines to understand the physical world&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you get them to have persistent memory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How do you them to reason&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and plan&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am excited about things that, a lot of people might get excited about 5 years from now but right does not look so exciting because it&amp;#8217;s some obscure academic paper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s much more difficult to deal with the real world than to deal with language.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-03-27-proof-or-bluff-evaluating-llms-on-2025-usa-math-olympiad&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-03-27-proof-or-bluff-evaluating-llms-on-2025-usa-math-olympiad&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-03-27-proof-or-bluff-evaluating-llms-on-2025-usa-math-olympiad&quot;&gt;2025-03-27 &lt;a href=&quot;https://arxiv.org/abs/2503.21934&quot;&gt;Proof or Bluff? Evaluating LLMs on 2025 USA Math Olympiad&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recent math benchmarks for large language models (LLMs) such as MathArena indicate that state-of-the-art reasoning models achieve impressive performance on mathematical competitions like AIME&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;However, these benchmarks evaluate models solely based on final numerical answers, neglecting rigorous reasoning and proof generation which are essential for real-world mathematical tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using expert human annotators, we evaluated several state-of-the-art reasoning models on the six problems from the 2025 USAMO &lt;strong&gt;within hours of their release.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our results reveal that all tested models struggled significantly: only Gemini-2.5-Pro achieves a non-trivial score of 25%, while all other models achieve less than 5%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The most frequent failure mode among human participants is the inability to find a correct solution. [&amp;#8230;&amp;#8203;] In contrast, all evaluated LLMs consistently claimed to have solved the problems.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-03-13-ai-search-engines-cite-incorrect-news-sources-at-an-alarming-60-rate-study-says&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-03-13-ai-search-engines-cite-incorrect-news-sources-at-an-alarming-60-rate-study-says&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-03-13-ai-search-engines-cite-incorrect-news-sources-at-an-alarming-60-rate-study-says&quot;&gt;2025-03-13 &lt;a href=&quot;https://arstechnica.com/ai/2025/03/ai-search-engines-give-incorrect-answers-at-an-alarming-60-rate-study-says/&quot;&gt;AI search engines cite incorrect news sources at an alarming 60% rate, study says&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;They discovered that the AI models incorrectly cited sources in more than 60 percent of these queries.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Perplexity provided incorrect information in 37 percent of the queries tested,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;whereas ChatGPT Search incorrectly identified 67 percent (134 out of 200) of articles queried.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grok 3 demonstrated the highest error rate, at 94 percent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In total, researchers ran 1,600 queries across the eight different generative search tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Surprisingly, premium paid versions of these AI search tools fared even worse in certain respects. Though these premium models correctly answered a higher number of prompts, their reluctance to decline uncertain responses drove higher overall error rates.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Perplexity Pro ($20/month) and Grok 3&amp;#8217;s premium service ($40/month) confidently delivered incorrect responses more often than their free counterparts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On some occasions, the chatbots either incorrectly answered or declined to answer queries from publishers that permitted them to access their content. On the other hand, they sometimes correctlyanswered queries about publishers whose content they shouldn‚Äôt have had access to&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-03-06-ai-search-has-a-citation-problem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-03-06-ai-search-has-a-citation-problem&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-03-06-ai-search-has-a-citation-problem&quot;&gt;2025-03-06 &lt;a href=&quot;https://www.cjr.org/tow_center/we-compared-eight-ai-search-engines-theyre-all-bad-at-citing-news.php&quot;&gt;AI Search Has A Citation Problem&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Chatbots were generally bad at declining to answer questions they couldn‚Äôt answer accurately, offering incorrect or speculative answers instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Premium chatbots provided more confidently incorrect answers than their free counterparts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple chatbots seemed to bypass Robot Exclusion Protocol preferences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generative search tools fabricated links and cited syndicated and copied versions of articles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Content licensing deals with news sources provided no guarantee of accurate citation in chatbot responses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-02-26-medical-hallucinations-in-foundation-models-and-their-impact-on-healthcare&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-02-26-medical-hallucinations-in-foundation-models-and-their-impact-on-healthcare&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-02-26-medical-hallucinations-in-foundation-models-and-their-impact-on-healthcare&quot;&gt;2025-02-26 &lt;a href=&quot;https://arxiv.org/abs/2503.05777&quot;&gt;Medical Hallucinations in Foundation Models and Their Impact on Healthcare&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[&amp;#8230;&amp;#8203;] a key limitation of their reliability is hallucination, where inaccurate or fabricated information can impact clinical decisions and patient safety.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our results reveal that inference techniques such as Chain-of-Thought (CoT) and Search Augmented Generation can effectively reduce hallucination rates. However, despite these improvements, non-trivial levels of hallucination persist.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-02-24-claude-3-7-sonnet-and-claude-code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-02-24-claude-3-7-sonnet-and-claude-code&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-02-24-claude-3-7-sonnet-and-claude-code&quot;&gt;2025-02-24 &lt;a href=&quot;https://www.anthropic.com/news/claude-3-7-sonnet&quot;&gt;Claude 3.7 Sonnet and Claude Code&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Claude Code is available as a limited research preview&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-02-06-torrenting-from-a-corporate-laptop-doesnt-feel-right-meta-emails-unsealed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-02-06-torrenting-from-a-corporate-laptop-doesnt-feel-right-meta-emails-unsealed&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-02-06-torrenting-from-a-corporate-laptop-doesnt-feel-right-meta-emails-unsealed&quot;&gt;2025-02-06 &lt;a href=&quot;https://arstechnica.com/tech-policy/2025/02/meta-torrented-over-81-7tb-of-pirated-books-to-train-ai-authors-say/&quot;&gt;‚ÄùTorrenting from a corporate laptop doesn‚Äôt feel right‚Äù: Meta emails unsealed&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Last month, Meta admitted to torrenting a controversial large dataset known as LibGen, which includes tens of millions of pirated books&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-02-03-ai-company-asks-job-applicants-not-to-use-ai-in-job-applications&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-02-03-ai-company-asks-job-applicants-not-to-use-ai-in-job-applications&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-02-03-ai-company-asks-job-applicants-not-to-use-ai-in-job-applications&quot;&gt;2025-02-03 &lt;a href=&quot;https://www.404media.co/anthropic-claude-job-application-ai-assistants/&quot;&gt;AI Company Asks Job Applicants Not to Use AI in Job Applications&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anthropic, the developer of the conversational AI assistant Claude, doesn‚Äôt want prospective new hires using AI assistants in their applications, regardless of whether they‚Äôre in marketing or engineering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúWhile we encourage people to use AI systems during their role to help them work faster and more effectively, please do not use AI assistants during the application process,‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-02-03-theres-a-new-kind-of-coding-i-call-vibe-coding&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-02-03-theres-a-new-kind-of-coding-i-call-vibe-coding&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-02-03-theres-a-new-kind-of-coding-i-call-vibe-coding&quot;&gt;2025-02-03 &lt;a href=&quot;https://x.com/karpathy/status/1886192184808149383&quot;&gt;There&amp;#8217;s a new kind of coding I call &quot;vibe coding&quot;&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Author: Andrej Karpathy&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s a new kind of coding I call &quot;vibe coding&quot;, where you fully give in to the vibes, embrace exponentials, and forget that the code even exists. It&amp;#8217;s possible because the LLMs (e.g. Cursor Composer w Sonnet) are getting too good. Also I just talk to Composer with SuperWhisper so I barely even touch the keyboard. I ask for the dumbest things like &quot;decrease the padding on the sidebar by half&quot; because I&amp;#8217;m too lazy to find it. I &quot;Accept All&quot; always, I don&amp;#8217;t read the diffs anymore. When I get error messages I just copy paste them in with no comment, usually that fixes it. The code grows beyond my usual comprehension, I&amp;#8217;d have to really read through it for a while. Sometimes the LLMs can&amp;#8217;t fix a bug so I just work around it or ask for random changes until it goes away. It&amp;#8217;s not too bad for throwaway weekend projects, but still quite amusing. I&amp;#8217;m building a project or webapp, but it&amp;#8217;s not really coding - I just see stuff, say stuff, run stuff, and copy paste stuff, and it mostly works.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-01-23-meet-junie-your-coding-agent-by-jetbrains&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-01-23-meet-junie-your-coding-agent-by-jetbrains&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-01-23-meet-junie-your-coding-agent-by-jetbrains&quot;&gt;2025-01-23 &lt;a href=&quot;https://blog.jetbrains.com/junie/2025/01/meet-junie-your-coding-agent-by-jetbrains/&quot;&gt;Meet Junie, Your Coding Agent by JetBrains&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With the launch of Junie, JetBrains AI coding agent, we are redefining how we code by leveraging its agentic power for co-creation right in your IDE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We‚Äôve now opened the Early Access Program waitlist.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-01-20-the-price-of-intelligence-three-risks-inherent-in-llms&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-01-20-the-price-of-intelligence-three-risks-inherent-in-llms&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-01-20-the-price-of-intelligence-three-risks-inherent-in-llms&quot;&gt;2025-01-20 &lt;a href=&quot;https://queue.acm.org/detail.cfm?id=3711679&quot;&gt;The Price of Intelligence - Three risks inherent in LLMs&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Discussions of LLM capabilities often overlook their inherently probabilistic nature [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[The models are losing data. They are trained] with billions of parameters on trillions of tokens, making it impossible for a model to perfectly memorize all information in its training data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The generation process is also stochastic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These characteristics give rise to three intrinsic behaviors:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hallucination&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indirect prompt injection [e.g. E-Mails that are passed to the LLM, where the contents derail or even change the intended user prompt]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jailbreaks, [crafted input prompts] bypassing built-in safeguards or ethical guidelines&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;These behaviors pose significant challenges for the widespread adoption of LLMs, particularly in high-stakes domains such as healthcare, finance, or legal applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We argue that there is no simple &quot;fix&quot; for these behaviors, but they are instead fundamental to how these models operate.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2025-01-03-ai-and-the-risk-of-consumer-harm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2025-01-03-ai-and-the-risk-of-consumer-harm&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2025-01-03-ai-and-the-risk-of-consumer-harm&quot;&gt;2025-01-03 &lt;a href=&quot;https://www.ftc.gov/policy/advocacy-research/tech-at-ftc/2025/01/ai-risk-consumer-harm&quot;&gt;AI and the Risk of Consumer Harm&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The FTC is increasingly taking note of AI‚Äôs potential for and real-world instances of harm&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;from incentivizing commercial surveillance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to enabling fraud and impersonation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to perpetuating illegal discrimination&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;companies [should] consider these factors when developing, maintaining, using, and deploying an AI-based product:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Taking necessary steps to prevent harm before and after deploying a product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Taking preventative measures to detect, deter, and halt AI-related impersonation, fraud, child sexual abuse material, and non-consensual intimate imagery.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoiding deceptive claims about AI tools that result in people losing money or put users at risk of harm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensuring privacy and security by default.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-12-13-byte-latent-transformer-patches-scale-better-than-tokens&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-12-13-byte-latent-transformer-patches-scale-better-than-tokens&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-12-13-byte-latent-transformer-patches-scale-better-than-tokens&quot;&gt;2024-12-13 &lt;a href=&quot;https://arxiv.org/abs/2412.09871?trk=public_post_reshare-text&quot;&gt;Byte Latent Transformer: Patches Scale Better Than Tokens&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Byte Latent Transformer (BLT), is a new byte-level LLM architecture that, for the first time, matches tokenization-based LLM performance at scale with significant improvements in inference efficiency and robustness&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-11-27-microsoft-says-it-isnt-using-m360-data-to-train-ai-models&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-11-27-microsoft-says-it-isnt-using-m360-data-to-train-ai-models&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-11-27-microsoft-says-it-isnt-using-m360-data-to-train-ai-models&quot;&gt;2024-11-27 &lt;a href=&quot;https://www.theverge.com/2024/11/27/24307284/microsoft-debunks-office-ai-data-scraping-rumors&quot;&gt;Microsoft says it isn‚Äôt using M360 data to train AI models&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Microsoft says it isn‚Äôt using customer data from its Microsoft 365 apps to train its AI models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The confusion arose from a privacy setting in Microsoft Office that toggles ‚Äúoptional connected experiences‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-09-25-superclusters-of-nvidia-gpuai-chips-combined-with-end-to-end-network-platforms-to-create-next-generation-data-centers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-09-25-superclusters-of-nvidia-gpuai-chips-combined-with-end-to-end-network-platforms-to-create-next-generation-data-centers&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-09-25-superclusters-of-nvidia-gpuai-chips-combined-with-end-to-end-network-platforms-to-create-next-generation-data-centers&quot;&gt;2024-09-25 &lt;a href=&quot;https://techblog.comsoc.org/2024/11/25/superclusters-of-nvidia-gpu-ai-chips-combined-with-end-to-end-network-platforms-to-create-next-generation-data-centers/&quot;&gt;Superclusters of Nvidia GPU/AI chips combined with end-to-end network platforms to create next generation data centers&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenAI used around 10,000 of Nvidia‚Äôs chips to train the version of ChatGPT it launched in late 2022, UBS analysts estimate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nvidia Chief Executive Jensen Huang  said that while the biggest clusters for training for giant AI models now top out at around 100,000 of Nvidia‚Äôs current chips, ‚Äúthe next generation starts at around 100,000 Blackwells.[&amp;#8230;&amp;#8203;]&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Musk posted last month on his social-media platform X that his 100,000-chip Colossus super cluster was ‚Äúsoon to become‚Äù a 200,000-chip cluster in a single building. He also posted in June that the next step would probably be a 300,000-chip cluster of Nvidia‚Äôs newest GPU chips next summer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blackwell chips are estimated to cost around $30,000 each, meaning a cluster of 100,000 would cost $3 billion, not counting the price of the power-generation infrastructure [cooling] and IT equipment [also network] around the chips.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;new engineering challenges also often arise with larger clusters:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Meta researchers said in a July paper that a cluster of more than 16,000 of Nvidia‚Äôs GPUs suffered from unexpected failures of chips and other components routinely as the company trained an advanced version of its Llama model over 54 days.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The trend also fosters demand for Nvidia‚Äôs networking equipment, which is fast becoming a significant business. Nvidia‚Äôs networking equipment revenue in 2024 was $3.13 billion, which was a 51.8% increase from the previous year.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-11-21-microsoft-copilot-shares-sensitive-information-ignoring-rights&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-11-21-microsoft-copilot-shares-sensitive-information-ignoring-rights&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-11-21-microsoft-copilot-shares-sensitive-information-ignoring-rights&quot;&gt;2024-11-21 &lt;a href=&quot;https://www.businessinsider.com/microsoft-copilot-oversharing-problem-fix-customers-2024-11&quot;&gt;Microsoft Copilot shares sensitive information, ignoring rights&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A [Microsoft] Copilot security issue that inadvertently let employees access sensitive information such as CEO emails and HR documents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microsoft Copilot and Github Copilot are different services. The first one is integrated into M365, the latter into IDEs to generate code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-11-13-openai-google-and-anthropic-are-struggling-to-build-more-advanced-ai&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-11-13-openai-google-and-anthropic-are-struggling-to-build-more-advanced-ai&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-11-13-openai-google-and-anthropic-are-struggling-to-build-more-advanced-ai&quot;&gt;2024-11-13 &lt;a href=&quot;https://www.bloomberg.com/news/articles/2024-11-13/openai-google-and-anthropic-are-struggling-to-build-more-advanced-ai&quot;&gt;OpenAI, Google and Anthropic are struggling to build more advanced AI&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[OpenAis new Model] Orion fell short when trying to answer coding questions that it hadn‚Äôt been trained on&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An upcoming iteration of [Google&amp;#8217;s] Gemini software is not living up to internal expectations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anthropic, meanwhile, has seen the timetable slip for the release of its long-awaited Claude model called 3.5 Opus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The companies are facing several challenges.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It‚Äôs become increasingly difficult to find new, untapped sources of high-quality, human-made training data that can be used to build more advanced AI systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even modest improvements may not be enough to justify the tremendous costs associated with building and operating new models&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúWe got very excited for a brief period of very fast progress, That just wasn‚Äôt sustainable.‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like Google and Anthropic, OpenAI is now shifting attention from the size of these models to newer use cases, including a crop of AI tools called agents that can book flights or send emails on a user‚Äôs behalf.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-10-21-gartner-sounds-alarm-on-ai-cost-data-challenges&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-10-21-gartner-sounds-alarm-on-ai-cost-data-challenges&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-10-21-gartner-sounds-alarm-on-ai-cost-data-challenges&quot;&gt;2024-10-21 &lt;a href=&quot;https://www.ciodive.com/news/gartner-symposium-keynote-AI/730486/&quot;&gt;Gartner sounds alarm on AI cost, data challenges&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CIOs are still in search of the generative AI sweet spot where workflows are enhanced, but costs and risks are manageable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nearly half of CIOs say AI has not yet met ROI expectations, according to Gartner research.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúThe truth is that you‚Äôve been in the mud for the last year, working hard to find all those benefits that were promised by AI,‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Part of the disillusionment business leaders are feeling comes from the immaturity of the technology and the pace of innovation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúCost is as big an AI risk as security. With generative AI, it‚Äôs really easy to waste money.‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CIOs could miscalculate AI costs by as much as 1,000% as they scale AI plans, Gartner research suggests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúSet aside all that hype and focus on your pace,‚Äù LeHong said. ‚ÄúChoose the one that‚Äôs right for you and run your own race.‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-09-27-openai-is-growing-fast-and-burning-through-piles-of-money&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-09-27-openai-is-growing-fast-and-burning-through-piles-of-money&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-09-27-openai-is-growing-fast-and-burning-through-piles-of-money&quot;&gt;2024-09-27 &lt;a href=&quot;https://www.nytimes.com/2024/09/27/technology/openai-chatgpt-investors-funding.html&quot;&gt;OpenAI Is Growing Fast and Burning Through Piles of Money&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenAI‚Äôs monthly revenue hit $300 million in August, up 1,700 percent since the beginning of 2023, and the company expects about &lt;strong&gt;$3.7 billion in annual sales&lt;/strong&gt; this year&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Roughly &lt;strong&gt;10 million&lt;/strong&gt; ChatGPT users pay the company a &lt;strong&gt;$20 monthly fee&lt;/strong&gt;, according to the documents. OpenAI expects to raise that price by $2 by the end of the year, and will aggressively raise it to $44 over the next five years&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It expects to &lt;strong&gt;lose roughly $5 billion&lt;/strong&gt; this year after paying for costs related to running its services&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[They are planning] an investment round that could bring in $7 billion and value the company at $150 billion, among the highest ever for a private tech company&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-09-16-cio-devs-gaining-little-if-anything-from-ai-coding-assistants&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-09-16-cio-devs-gaining-little-if-anything-from-ai-coding-assistants&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-09-16-cio-devs-gaining-little-if-anything-from-ai-coding-assistants&quot;&gt;2024-09-16 &lt;a href=&quot;https://www.cio.com/article/3540579/devs-gaining-little-if-anything-from-ai-coding-assistants.html&quot;&gt;CIO: Devs gaining little (if anything) from AI coding assistants&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Uplevel, using data generated by its customers, compared the output of about 800 developers using GitHub Copilot over a three-month period to their output in a three-month period before adoption.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The study measured pull request (PR) cycle time, or the time to merge code into a repository, and PR throughput, the number of pull requests merged. It found &lt;strong&gt;no significant improvements&lt;/strong&gt; for developers using Copilot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use of GitHub Copilot also introduced &lt;strong&gt;41% more bugs&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-09-20-microsoft-revives-the-nuclear-reactor-that-was-responsible-for-the-worst-nuclear-disaster-in-us-history-to-power-its-ai-efforts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-09-20-microsoft-revives-the-nuclear-reactor-that-was-responsible-for-the-worst-nuclear-disaster-in-us-history-to-power-its-ai-efforts&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-09-20-microsoft-revives-the-nuclear-reactor-that-was-responsible-for-the-worst-nuclear-disaster-in-us-history-to-power-its-ai-efforts&quot;&gt;2024-09-20 &lt;a href=&quot;https://edition.cnn.com/2024/09/20/energy/three-mile-island-microsoft-ai/index.html&quot;&gt;Microsoft revives the nuclear reactor that was responsible for the worst nuclear disaster in US history, to power its AI efforts&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Three Mile Island, the site of worst nuclear disaster in the United States, is reopening and will exclusively sell the power to Microsoft as the company searches for energy sources to fuel its AI ambitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Unit 1 reactor, which closed five years ago, is expected to be revived in 2028&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-09-12-introducing-openai-o1-preview&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-09-12-introducing-openai-o1-preview&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-09-12-introducing-openai-o1-preview&quot;&gt;2024-09-12 &lt;a href=&quot;https://openai.com/index/introducing-openai-o1-preview/&quot;&gt;Introducing OpenAI o1-preview&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We&amp;#8217;ve developed a new series of AI models designed to spend more time thinking before they respond.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-08-23-generativeai-on-the-gartner-hypecycle-trough-of-disillusionment&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-08-23-generativeai-on-the-gartner-hypecycle-trough-of-disillusionment&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-08-23-generativeai-on-the-gartner-hypecycle-trough-of-disillusionment&quot;&gt;2024-08-23 &lt;a href=&quot;https://www.ciodive.com/news/generative-ai-hype-moment-reckoning-trough-disillusionment-gartner/725033/&quot;&gt;GenerativeAI on the Gartner HypeCycle - Trough of disillusionment&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enthusiasm for generative AI shows signs of cooling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Gartner‚Äôs annual Hype Cycle for Emerging Technologies report, the research and advisory company placed generative AI past the peak of inflated expectations, and down the path towards what it calls the &lt;strong&gt;trough of disillusionment&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unhappiness with the technology ‚Äî likely stems from three areas:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Current models are versatile but mainly general purpose, and enterprises have struggled to steer them into enterprise use cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Organizations have underestimated the challenge of setting up governance and data infrastructure for these capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The initial wave of generative AI solutions, while valuable, may not be delivering the high promise vendors claimed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúIt would be a loss if the short-term disillusionment results in enterprises completely pulling away from AI‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-07-29-gartner-predicts-30-of-generative-ai-projects-will-be-abandoned-after-proof-of-concept-by-end-of-2025&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-07-29-gartner-predicts-30-of-generative-ai-projects-will-be-abandoned-after-proof-of-concept-by-end-of-2025&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-07-29-gartner-predicts-30-of-generative-ai-projects-will-be-abandoned-after-proof-of-concept-by-end-of-2025&quot;&gt;2024-07-29 &lt;a href=&quot;https://www.gartner.com/en/newsroom/press-releases/2024-07-29-gartner-predicts-30-percent-of-generative-ai-projects-will-be-abandoned-after-proof-of-concept-by-end-of-2025&quot;&gt;Gartner Predicts 30% of Generative AI Projects Will Be Abandoned After Proof of Concept By End of 2025&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At least 30% of generative AI (GenAI) projects will be abandoned after proof of concept by the end of 2025, due to poor data quality, inadequate risk controls, escalating costs or unclear business value&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-07-25-ai-trained-on-ai-churns-out-gibberish-garbage&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-07-25-ai-trained-on-ai-churns-out-gibberish-garbage&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-07-25-ai-trained-on-ai-churns-out-gibberish-garbage&quot;&gt;2024-07-25 &lt;a href=&quot;https://www.popsci.com/technology/ai-trained-on-ai-gibberish/&quot;&gt;AI trained on AI churns out gibberish garbage&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;new research suggests that cannibalizing of past model outputs would quickly result in strings of babbling AI gibberish and could eventually lead to what‚Äôs being called ‚Äúmodel collapse.‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Over time and successive generations [&amp;#8230;&amp;#8203;][the] model ‚Äúbecomes poisoned with its own projection of reality.‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-07-03-googles-emissions-shot-up-48-over-five-years-due-to-ai&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-07-03-googles-emissions-shot-up-48-over-five-years-due-to-ai&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-07-03-googles-emissions-shot-up-48-over-five-years-due-to-ai&quot;&gt;2024-07-03 &lt;a href=&quot;https://www.datacenterknowledge.com/sustainability/google-s-emissions-shot-up-48-over-five-years-due-to-ai&quot;&gt;Google‚Äôs Emissions Shot Up 48% Over Five Years Due to AI&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;According to a new environmental report from [Google]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[The] emissions climbed by almost half over five years&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[It&amp;#8217;ll be hard] to meet [their] goal of eliminating carbon emissions by 2030&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-06-29-ai-drive-brings-microsofts-green-moonshot-down-to-earth-in-west-london&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-06-29-ai-drive-brings-microsofts-green-moonshot-down-to-earth-in-west-london&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-06-29-ai-drive-brings-microsofts-green-moonshot-down-to-earth-in-west-london&quot;&gt;2024-06-29 &lt;a href=&quot;https://www.theguardian.com/business/article/2024/jun/29/ai-drive-brings-microsofts-green-moonshot-down-to-earth-in-west-london&quot;&gt;AI drive brings Microsoft‚Äôs ‚Äògreen moonshot‚Äô down to earth in west London&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[AI] ambition is jarring with its target of being carbon negative by 2030.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the company‚Äôs scope 3 emissions ‚Äì such as CO2 related to the materials in its buildings and the electricity people consume when using products such as Xbox ‚Äì are &lt;strong&gt;more than 30% above&lt;/strong&gt; their 2020 level.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-06-29-goldman-sachs-on-gen-ai-too-much-spend-too-little-benefit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-06-29-goldman-sachs-on-gen-ai-too-much-spend-too-little-benefit&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-06-29-goldman-sachs-on-gen-ai-too-much-spend-too-little-benefit&quot;&gt;2024-06-29 &lt;a href=&quot;https://www.goldmansachs.com/images/migrated/insights/pages/gs-research/gen-ai&amp;#8212;&amp;#8203;too-much-spend%2C-too-little-benefit-/TOM_AI%202.0_ForRedaction.pdf&quot;&gt;Goldman Sachs on Gen Ai: Too much spend, too little benefit?&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tech giants and beyond are set to spend over $1tn on AI capex in coming years, with so far little to show for it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AI‚Äôs ‚Äúkiller application‚Äù has yet to emerge&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-06-21-claude-3-5-sonnet&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-06-21-claude-3-5-sonnet&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-06-21-claude-3-5-sonnet&quot;&gt;2024-06-21 &lt;a href=&quot;https://www.anthropic.com/news/claude-3-5-sonnet&quot;&gt;Claude 3.5 Sonnet&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The updated Claude 3.5 Sonnet shows wide-ranging improvements on industry benchmarks, with particularly strong gains in &lt;strong&gt;agentic coding&lt;/strong&gt; and tool use tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-06-08-chatgpt-is-bullshit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-06-08-chatgpt-is-bullshit&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-06-08-chatgpt-is-bullshit&quot;&gt;2024-06-08 &lt;a href=&quot;https://link.springer.com/article/10.1007/s10676-024-09775-5&quot;&gt;ChatGPT is bullshit&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[LLMs] have been plagued by persistent inaccuracies in their output; these are often called ‚ÄúAI hallucinations‚Äù.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We argue that these falsehoods, and the overall activity of large language models, is better understood as bullshit in the sense explored by Frankfurt (On Bullshit, Princeton, 2005)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;these programs cannot themselves be concerned with truth, and because they are designed to produce text that looks truth-apt without any actual concern for truth, it seems appropriate to call their outputs bullshit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We further argue that describing AI misrepresentations as bullshit is both a more useful and more accurate way of predicting and discussing the behaviour of these systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently, false statements by ChatGPT and other large language models are described as ‚Äúhallucinations‚Äù, which give policymakers and the public the idea that these systems are misrepresenting the world, and describing what they ‚Äúsee‚Äù.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The problem here isn‚Äôt that large language models hallucinate, lie, or misrepresent the world in some way. It‚Äôs that they are not designed to represent the world at all; instead, they are designed to convey convincing lines of text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solutions such as connecting the LLM to a database don‚Äôt work because, if the models are trained on the database, then the words in the database affect the probability that the chatbot will add one or another word to the line of text it is generating. But this will only make it produce text similar to the text in the database; doing so will make it more likely that it reproduces the information in the database but by no means ensures that it will.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-05-13-hello-gpt-4o&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-05-13-hello-gpt-4o&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-05-13-hello-gpt-4o&quot;&gt;2024-05-13 &lt;a href=&quot;https://openai.com/index/hello-gpt-4o/&quot;&gt;Hello GPT-4o&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GPT‚Äë4o (‚Äúo‚Äù for ‚Äúomni‚Äù) is a step towards much more natural human-computer interaction‚Äîit accepts as input any combination of text, audio, image, and video and generates any combination of text, audio, and image outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-05-01-workbench-a-benchmark-dataset-for-agents-in-a-realistic-workplace-setting&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-05-01-workbench-a-benchmark-dataset-for-agents-in-a-realistic-workplace-setting&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-05-01-workbench-a-benchmark-dataset-for-agents-in-a-realistic-workplace-setting&quot;&gt;2024-05-01 &lt;a href=&quot;https://arxiv.org/abs/2405.00823&quot;&gt;WorkBench: a Benchmark Dataset for Agents in a Realistic Workplace Setting&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We introduce WorkBench: a benchmark dataset for evaluating agents‚Äô ability to execute tasks in a workplace setting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WorkBench contains a sandbox environment with five databases, 26 tools, and 690 tasks.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;These tasks represent common business activities, such as sending emails and scheduling meetings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a task is sent to the agent, which has access to toolkits in various domains. The agent takes actions using these tools, which may alter the sandbox databases. The agent observes the result of using the tool to determine if more actions are required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[One Limitation of study:] While our tasks require multiple actions, they are limited to single-turn chat. [&amp;#8230;&amp;#8203;] a multi-turn chat setup may be more representative of real tasks and could build upon our work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We evaluate five existing ReAct agents on WorkBench, finding they successfully complete as few as 3% of tasks (Llama2-70B), and just 43% for the best-performing (GPT-4).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We further find that agents‚Äô errors can result in the wrong action being taken, such as an email being sent to the wrong person.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-04-14-sam-altman-we-have-no-idea-how-we-may-one-day-generate-revenue&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-04-14-sam-altman-we-have-no-idea-how-we-may-one-day-generate-revenue&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-04-14-sam-altman-we-have-no-idea-how-we-may-one-day-generate-revenue&quot;&gt;2024-04-14 &lt;a href=&quot;https://mastodon.social/@nixCraft/112269408187496933&quot;&gt;Sam Altman, We have no idea how we may one day generate revenue&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have no current plans to make revenue. We have no idea how we may one day generate revenue. We have made a soft promise to investors that once we build this generally intelligent system, basically we will ask it to figure out an investment return for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Sam Altman - CEO of OpenAI
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-04-06-ny-times-how-tech-giants-cut-corners-to-harvest-data-for-a-i&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-04-06-ny-times-how-tech-giants-cut-corners-to-harvest-data-for-a-i&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-04-06-ny-times-how-tech-giants-cut-corners-to-harvest-data-for-a-i&quot;&gt;2024-04-06 &lt;a href=&quot;https://archive.ph/2BYtu&quot;&gt;NY Times: How Tech Giants Cut Corners to Harvest Data for A.I.&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Big Tech has no more sources of data to tap, for their scaling ideas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In late 2021, OpenAI faced a &lt;strong&gt;supply problem&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It needed more data to train the next version of its technology ‚Äî lots more. So OpenAI researchers created a speech recognition tool called Whisper. It could transcribe the audio from YouTube videos&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But YouTube prohibits people from not only using its videos for ‚Äúindependent‚Äù applications, but also accessing its videos by ‚Äúany automated means (such as robots, botnets or scrapers).‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ultimately, an OpenAI team transcribed more than one million hours of YouTube videos,&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Meta&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;But by early [2023], Meta had hit the same hurdle as its rivals: not enough data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Meta‚Äôs vice president of generative A.I., told executives that his team had used almost every available English-language book, essay, poem and news article on the internet to develop a model&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Discussed buying the publishing house Simon &amp;amp; Schuster to procure long works&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They also conferred on gathering copyrighted data from across the internet, even if that meant facing lawsuits. Negotiating licenses [&amp;#8230;&amp;#8203;] would take too long&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;transcribed YouTube videos to harvest text for its A.I. models. That potentially violated the copyrights to the videos, which belong to their creators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Google] didn‚Äôt stop OpenAI because [they] had also used transcripts of YouTube videos to train its A.I. models&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Their licensing terms also changed allowing them] to tap &lt;strong&gt;publicly available Google Docs&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The volume of data is crucial. Leading chatbot systems have learned from pools of digital text spanning as many as three trillion words, or roughly twice the number of words stored in Oxford University‚Äôs Bodleian Library, which has collected manuscripts since 1602.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The most prized data, A.I. researchers said, is high-quality information, such as published books and articles, which have been carefully written and edited by professionals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúThe data needed is so massive that even collective licensing really can‚Äôt work.‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúScale is all you need‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Synthetic data&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[aka] text generated by A.I.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúAs long as you can get over the synthetic data event horizon, where the model is smart enough to make good synthetic data, everything will be fine,‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easier said than done. [they] can get caught in a loop where they reinforce their own quirks, mistakes and limitations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-03-04-httpswww-anthropic-comnewsclaude-3-family&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-03-04-httpswww-anthropic-comnewsclaude-3-family&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-03-04-httpswww-anthropic-comnewsclaude-3-family&quot;&gt;2024-03-04 &lt;a href=&quot;https://www.anthropic.com/news/claude-3-family&quot;&gt;https://www.anthropic.com/news/claude-3-family&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The [Claude 3] family includes three state-of-the-art models in &lt;strong&gt;ascending&lt;/strong&gt; order of capability:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Claude 3 Haiku&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Claude 3 Sonnet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Claude 3 Opus&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2024-02-12-careless-whisper-speech-to-text-hallucination-harms&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2024-02-12-careless-whisper-speech-to-text-hallucination-harms&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2024-02-12-careless-whisper-speech-to-text-hallucination-harms&quot;&gt;2024-02-12 &lt;a href=&quot;https://arxiv.org/abs/2402.08021&quot;&gt;Careless Whisper: Speech-to-Text Hallucination Harms&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We evaluate Open AI&amp;#8217;s Whisper [&amp;#8230;&amp;#8203;] we find that roughly 1% of audio transcriptions contained entire hallucinated phrases or sentences which did not exist in any form in the underlying audio [&amp;#8230;&amp;#8203; and of those] 38% of hallucinations include explicit harms.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-10-06-google-bard-is-relaunched-as-gemini&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-10-06-google-bard-is-relaunched-as-gemini&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-10-06-google-bard-is-relaunched-as-gemini&quot;&gt;2023-10-06 &lt;a href=&quot;https://en.wikipedia.org/wiki/Gemini_(chatbot)&quot;&gt;Google Bard is relaunched as Gemini&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the company&amp;#8217;s &quot;largest and most capable AI model&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-10-09-microsoft-reportedly-is-losing-lots-of-money-per-user-on-github-copilot&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-10-09-microsoft-reportedly-is-losing-lots-of-money-per-user-on-github-copilot&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-10-09-microsoft-reportedly-is-losing-lots-of-money-per-user-on-github-copilot&quot;&gt;2023-10-09 &lt;a href=&quot;https://www.neowin.net/news/microsoft-reportedly-is-losing-lots-of-money-per-user-on-github-copilot/&quot;&gt;Microsoft reportedly is losing lots of money per user on GitHub Copilot&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Github Copilot] is available now for $10 a month or $100 for a year&amp;#8217;s subscription.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the first few months of this year, [Microsoft] was &lt;strong&gt;losing n average more than $20 a month&lt;/strong&gt; per user, according to a person familiar with the figures, who said some users were costing [Microsoft] as much as &lt;strong&gt;$80 a month&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-09-dall-e-3-revealed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-09-dall-e-3-revealed&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-09-dall-e-3-revealed&quot;&gt;2023-09 &lt;a href=&quot;https://en.wikipedia.org/wiki/DALL-E&quot;&gt;DALL-E 3 revealed&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;capable of understanding &quot;significantly more nuance and detail&quot; than previous iterations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-06-19-google-warns-its-own-employees-do-not-use-code-generated-by-bard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-06-19-google-warns-its-own-employees-do-not-use-code-generated-by-bard&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-06-19-google-warns-its-own-employees-do-not-use-code-generated-by-bard&quot;&gt;2023-06-19 &lt;a href=&quot;https://www.theregister.com/2023/06/19/even_google_warns_its_own/&quot;&gt;Google warns its own employees: Do not use code generated by Bard&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Google has warned its own employees not to disclose confidential information or use the code generated by its AI chatbot, Bard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other large firms have similarly cautioned their staff against leaking proprietary documents or code, and have banned them using other AI chatbots.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Google] told Reuters its internal ban was introduced because Bard can output &quot;undesired code suggestions.&quot; Issues could potentially lead to buggy programs or complex, bloated software that will cost developers more time to fix than if they didn&amp;#8217;t use AI to code at all.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-05-29-faith-and-fate-limits-of-transformers-on-compositionality&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-05-29-faith-and-fate-limits-of-transformers-on-compositionality&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-05-29-faith-and-fate-limits-of-transformers-on-compositionality&quot;&gt;2023-05-29 &lt;a href=&quot;https://arxiv.org/abs/2305.18654&quot;&gt;Faith and Fate: Limits of Transformers on Compositionality&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The striking discrepancy between the impressive successes of transformer LLMs on seemingly complex tasks and the astonishing failures on seemingly trivial tasks spark critical open questions about how to faithfully interpret their mixed capabilities.&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shortcut learning via pattern-matching may yield fast correct answers when similar compositional patterns are available during training but does not allow for robust generalization to uncommon or complex examples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, due to error propagation, transformers may have inherent limitations on solving high-complexity compositional tasks that exhibit novel patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The problems [hallucination, prompt injection, and jailbreaks] are inherent, certainly in the present generation of models and [&amp;#8230;&amp;#8203;] likely in LLMs &lt;em&gt;per se&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-04-06-chatgpt-invented-a-sexual-harassment-scandal-and-named-a-real-law-prof-as-the-accused&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-04-06-chatgpt-invented-a-sexual-harassment-scandal-and-named-a-real-law-prof-as-the-accused&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-04-06-chatgpt-invented-a-sexual-harassment-scandal-and-named-a-real-law-prof-as-the-accused&quot;&gt;2023-04-06 &lt;a href=&quot;https://jonathanturley.org/2023/04/06/defamed-by-chatgpt-my-own-bizarre-experience-with-artificiality-of-artificial-intelligence/&quot;&gt;ChatGPT invented a sexual harassment scandal and named a real law prof as the accused&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I have been writing about the threat of AI to free speech. Then recently I learned that ChatGPT falsely reported on a claim of sexual harassment that was &lt;strong&gt;never made&lt;/strong&gt; against me on a trip that &lt;strong&gt;never occurred&lt;/strong&gt; while I was on a faculty where I &lt;strong&gt;never taught&lt;/strong&gt;. ChapGPT relied on a cited Post article that was &lt;strong&gt;never written&lt;/strong&gt; and quotes a statement that was &lt;strong&gt;never made&lt;/strong&gt; by the newspaper.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-03-14-cursor-ide-v0-0-37&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-03-14-cursor-ide-v0-0-37&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-03-14-cursor-ide-v0-0-37&quot;&gt;2023-03-14 &lt;a href=&quot;https://cursor.com/changelog/0-0-37&quot;&gt;Cursor IDE v0.0.37&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First Cursor IDE version&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-03-chatgpt-release&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-03-chatgpt-release&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-03-chatgpt-release&quot;&gt;2023-03 &lt;a href=&quot;https://en.wikipedia.org/wiki/ChatGPT#Model_versions&quot;&gt;ChatGPT release&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Based on GPT 4 (Generative Pre-trained Transformer)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-02-24-meta-llama-is-announced&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-02-24-meta-llama-is-announced&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-02-24-meta-llama-is-announced&quot;&gt;2023-02-24 &lt;a href=&quot;https://en.wikipedia.org/wiki/Llama_(language_model)&quot;&gt;Meta LLaMA is announced&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2023-02-06-google-bard-is-announced&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2023-02-06-google-bard-is-announced&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2023-02-06-google-bard-is-announced&quot;&gt;2023-02-06 &lt;a href=&quot;https://en.wikipedia.org/wiki/Gemini_(chatbot)&quot;&gt;Google Bard is announced&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Multiple media outlets and financial analysts described Google as &quot;rushing&quot; Bard&amp;#8217;s announcement to preempt rival Microsoft&amp;#8217;s planned February 7 event unveiling its partnership with OpenAI to integrate ChatGPT into its Bing search engine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After an &quot;underwhelming&quot; February 8 livestream in Paris showcasing Bard, Google&amp;#8217;s stock fell eight percent, equivalent to a $100 billion loss in market value, and the YouTube video of the livestream was made private.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2022-11-first-chatgpt-release&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2022-11-first-chatgpt-release&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2022-11-first-chatgpt-release&quot;&gt;2022-11 &lt;a href=&quot;https://en.wikipedia.org/wiki/ChatGPT#Model_versions&quot;&gt;First ChatGPT release&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Based on GPT 3.5 (Generative Pre-trained Transformer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gained one million users in five days and 100 millions in two months, becoming the fastest-growing internet application in history.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2022-06-22-github-copilot-is-now-generally-available-starts-at-10month&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2022-06-22-github-copilot-is-now-generally-available-starts-at-10month&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2022-06-22-github-copilot-is-now-generally-available-starts-at-10month&quot;&gt;2022-06-22 &lt;a href=&quot;https://www.neowin.net/news/github-copilot-is-now-generally-available-starts-at-10month/&quot;&gt;GitHub Copilot is now generally available, starts at $10/month&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More than 1.2 million users enrolled in the preview for GitHub Copilot since June 2021.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The program is now available to &lt;strong&gt;all developers for $10/month&lt;/strong&gt; and $100/year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verified students and owners of established open-source projects can keep using it for free.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The extension is available on numerous editors such as Visual Studio, Visual Studio Code, Neovim, and JetBrains IDEs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The extension works well with multiple coding languages with notable ones being Python, JavaScript, TypeScript, and Go.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2022-03-10-deep-learning-is-hitting-a-wall&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2022-03-10-deep-learning-is-hitting-a-wall&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2022-03-10-deep-learning-is-hitting-a-wall&quot;&gt;2022-03-10 &lt;a href=&quot;https://archive.ph/6hEYS&quot;&gt;Deep Learning Is Hitting a Wall&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Few fields have been more filled with hype and bravado than artificial intelligence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It has flitted from fad to fad decade by decade, always promising the moon, and only occasionally delivering.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One minute it was expert systems, next it was Bayesian networks, and then Support Vector Machines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In 2011, it was IBM‚Äôs Watson [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nowadays, and in fact ever since 2012, the flavor of choice has been &lt;strong&gt;deep learning&lt;/strong&gt; [&amp;#8230;&amp;#8203;].&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[The &quot;Godfathers of AI&quot; and &quot;Godfathers of Deep Learning&quot; are Geoffrey Hinton, Yoshua Bengio and Yann LeCun, for which they won the 2018 Turing Award.]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Hinton, the Godfather of AI, joined Google in 2013 when his company was acquired but left May 2023 because he wanted to &quot;freely speak out about the risks of A.I.&quot;. He&amp;#8217;s been cited half-a-million times]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Yoshua Bengio is the most-cited computer scientist globally and the most-cited living scientist across all fields]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Yann LeCun, Chief AI Scientist at Meta]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deep learning, which is fundamentally a technique for recognizing patterns, is at its best when all we need are rough-ready results, where stakes are low and perfect results optional.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a single error can cost a life, it‚Äôs just not good enough.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deep-learning systems are particularly problematic when it comes to ‚Äúoutliers‚Äù that differ substantially from the things on which they are trained.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Current deep-learning systems frequently succumb to stupid errors like [the following]. They sometimes misread dirt on an image that a human radiologist would recognize as a glitch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What else might we need? Among other things, we are very likely going to need to revisit a once-popular idea [&amp;#8230;&amp;#8203;]: the idea of manipulating symbols‚Äîcomputer-internal encodings, like strings of binary bits, that stand for complex ideas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What does ‚Äúmanipulating symbols‚Äù really mean? Ultimately, it means two things: having sets of symbols (essentially just patterns that stand for things) to represent information, and processing (manipulating) those symbols in a specific way, using something like algebra (or logic, or computer programs) to operate over those symbols.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Classical computer science [of the sort practiced by Turing and von Neumann and everyone after, manipulates symbols in a fashion that we think of as algebraic, and that‚Äôs what‚Äôs really at stake. In simple algebra, we have three kinds of entities, variables (like x and y), operations (like + or -), and bindings (which tell us, for example, to let x = 12 for the purpose of some calculation).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If symbols are so critical for software engineering, why not use them in AI, too?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2022-04-06-dall-e-2-revealed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2022-04-06-dall-e-2-revealed&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2022-04-06-dall-e-2-revealed&quot;&gt;2022-04-06 &lt;a href=&quot;https://en.wikipedia.org/wiki/DALL-E&quot;&gt;DALL-E 2 revealed&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;designed to generate more realistic images at higher resolutions that &quot;can combine concepts, attributes, and styles&quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2021-01-05-dall-e-1-revealed&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2021-01-05-dall-e-1-revealed&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2021-01-05-dall-e-1-revealed&quot;&gt;2021-01-05 &lt;a href=&quot;https://en.wikipedia.org/wiki/DALL-E&quot;&gt;DALL-E 1 revealed&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;uses a version of GPT-3 modified to generate images.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The software&amp;#8217;s name is a portmanteau of the names of animated robot Pixar character WALL-E and the Catalan surrealist artist Salvador Dal√≠.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2020-05-22-retrieval-augmented-generation-for-knowledge-intensive-nlp-tasks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2020-05-22-retrieval-augmented-generation-for-knowledge-intensive-nlp-tasks&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2020-05-22-retrieval-augmented-generation-for-knowledge-intensive-nlp-tasks&quot;&gt;2020-05-22 &lt;a href=&quot;https://arxiv.org/abs/2005.11401&quot;&gt;Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We explore a general-purpose fine-tuning recipe for retrieval-augmented generation (RAG)&amp;#8201;&amp;#8212;&amp;#8201;models which combine pre-trained parametric and non-parametric memory for language generation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For language generation tasks, we find that RAG models generate more specific, diverse and factual language than a state-of-the-art parametric-only seq2seq baseline.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2017-06-12-attention-is-all-you-need&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2017-06-12-attention-is-all-you-need&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2017-06-12-attention-is-all-you-need&quot;&gt;2017-06-12 &lt;a href=&quot;https://arxiv.org/abs/1706.03762&quot;&gt;Attention is all you need&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Google paper that lays the foundation upon which all generative AI tools are based on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="genai" /><category term="ai" /><category term="llm" /></entry><entry><title type="html">Upcoming</title><link href="https://richargh.de/posts/upcoming/" rel="alternate" type="text/html" title="Upcoming" /><published>2025-09-17T00:00:00+00:00</published><updated>2025-09-17T00:00:00+00:00</updated><id>https://richargh.de/posts/Upcoming-2025-v6</id><content type="html" xml:base="https://richargh.de/posts/upcoming/">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;upcoming-talks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#upcoming-talks&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#upcoming-talks&quot;&gt;Upcoming Talks&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;Making sense of frontend code with forensic techniques&quot; at &lt;a href=&quot;https://ct-webdev.com/agenda-2025/&quot;&gt;c&amp;#8217;t &amp;lt;webdev 2025-11-19 üá¨üáß&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Kotlin kontra Java&quot; at &lt;a href=&quot;https://www.ittage.informatik-aktuell.de/programm/2025/kotlin-vs-java-braucht-man-2025-ueberhaupt-noch-kotlin.html&quot;&gt;IT Tage 2025-12-11 üá©üá™&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Domain Re-discovery Patterns for Legacy Code&quot; at &lt;a href=&quot;https://www.oop-konferenz.de/de/ueber-die-konferenz/konferenzprogramm/details/fr-71&quot;&gt;OOP 2026-02-13 üá¨üáß&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;upcoming-articles&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#upcoming-articles&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#upcoming-articles&quot;&gt;Upcoming Articles&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;Map your Code - Master your Architecture&quot; at JavaPro.io&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Upcoming Talks</summary></entry><entry><title type="html">Java Version History (up to JDK 25, in development)</title><link href="https://richargh.de/posts/java-version-history/" rel="alternate" type="text/html" title="Java Version History (up to JDK 25, in development)" /><published>2025-03-31T00:00:00+00:00</published><updated>2025-03-31T00:00:00+00:00</updated><id>https://richargh.de/posts/Java-Version-History-up-to-jdk-25-development</id><content type="html" xml:base="https://richargh.de/posts/java-version-history/">&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;An ongoing list of Java features per release&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ever since Java switched to its six-month release cadence (&lt;a href=&quot;https://openjdk.org/jeps/322&quot;&gt;Time-Based Release Versioning&lt;/a&gt;) it has become a bit harder to keep up with the features they have implemented.
The following list tracks the stable (not incubating or in preview) feature changes I deemed most noteworthy.
The releases that Oracle will provide Long-Term Support (LTS) for are marked as such, based on the plan that &lt;a href=&quot;https://www.oracle.com/java/technologies/java-se-support-roadmap.html&quot;&gt;Oracle publishes&lt;/a&gt;.
Please note that other JDK distributions exist and they have their own plans.
They follow the same &lt;a href=&quot;https://openjdk.org/jeps/14&quot;&gt;tip and tail&lt;/a&gt; model though and only provide longer support for the same LTS versions as oracle.
Take a look at the support roadmap of the most popular alternate distributions, &lt;a href=&quot;https://adoptium.net/support#_release_roadmap&quot;&gt;Temurin&lt;/a&gt; and &lt;a href=&quot;https://aws.amazon.com/corretto/faqs#support_calendar&quot;&gt;Corretto&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This list does not cover all api changes and only seldom things outside of JEPs. Check the &lt;a href=&quot;https://javaalmanac.io/&quot;&gt;Java Almanac&lt;/a&gt; to see api updates of the JDK. Use a current JDK to get all performance improvements that happen constantly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The list is ongoing and will be updated with every new Java release.
A ‚ûï marks an added feature, a ‚ö† marks a deprecation that will likely lead to a ‚ùå breaking change when the feature is removed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full Java version history can be found via &lt;a href=&quot;https://openjdk.org/projects/jdk/&quot;&gt;Open JDK&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_version_history&quot;&gt;at Wikipedia&lt;/a&gt; or via the &lt;a href=&quot;https://www.java.com/releases/&quot;&gt;Java releases page&lt;/a&gt;.
Another website that tracks java features but also gives upgrading advice is &lt;a href=&quot;https://whichjdk.com/&quot;&gt;whichjdk.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary class=&quot;title&quot;&gt;The long term&lt;/summary&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is rather impossible to say when we&amp;#8217;ll get cool new features. The JDK developers are known for &quot;getting it right&quot; over &quot;getting it fast&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example &lt;a href=&quot;https://openjdk.org/jeps/326&quot;&gt;raw string literals&lt;/a&gt; was developed, then dropped in 2018 and we got &lt;a href=&quot;https://openjdk.org/jeps/355&quot;&gt;Text Blocks&lt;/a&gt; in 2019 instead but still no string interpolation. String interpolation was ignored in favor of the safer alternative, &lt;a href=&quot;https://openjdk.org/jeps/430&quot;&gt;String templates (Preview)&lt;/a&gt; in 2023, but that went back to the drawing board in 2024 after one year of previews due to design concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is however rather known where the road is heading. At some point in the future we&amp;#8217;ll get:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://openjdk.org/jeps/8305968&quot;&gt;Integrity by Default&lt;/a&gt;. Which means the removal of unsupported code like &lt;code&gt;sun.misc.unsafe&lt;/code&gt; when adequate replacements have been developed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://openjdk.org/jeps/468&quot;&gt;Derived Record creation (Preview)&lt;/a&gt;, also called &lt;code&gt;record&lt;/code&gt; &lt;em&gt;withers&lt;/em&gt;, which make working with records so much nicer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://openjdk.org/jeps/8303099&quot;&gt;Null-Restricted and Nullable Types&lt;/a&gt;, i.e. fields that can be marked as null-restricted &lt;code&gt;Name!&lt;/code&gt; or nullable &lt;code&gt;Name?&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://openjdk.org/jeps/401&quot;&gt;Value Classes and Objects (Preview)&lt;/a&gt; and &lt;a href=&quot;https://openjdk.org/jeps/8316779&quot;&gt;Null-Restricted Value Class Types (Preview)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://openjdk.org/jeps/8209434&quot;&gt;Concise Method Bodies&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-25&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-25&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-25&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/25/&quot;&gt;25&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;? (Oracle)&lt;br&gt;
? (Temurin)&lt;br&gt;
? (Corretto)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Expected&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;September 2025&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;INFO&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;em&gt;Preliminary&lt;/em&gt;, since JDK is in rampdown and not released yet.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/503&quot;&gt;Remove the 32-bit x86 Port&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Remove the source code and build support for the 32-bit x86 port. Port was deprecated since &lt;a href=&quot;#jdk-24&quot;&gt;JDK 24&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-24&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-24&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-24&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/24/&quot;&gt;24&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;March 2025&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;24&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/472&quot;&gt;Prepare to Restrict the Use of JNI&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Issue warnings about uses of the Java Native Interface (JNI). People should instead use the Foreign Function &amp;amp; Memory API, which was introduced in &lt;a href=&quot;#jdk-22&quot;&gt;JDK 22&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/475&quot;&gt;Late Barrier Expansion for G1&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Simplify the implementation of the G1 garbage collector&amp;#8217;s barriers.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ùå &lt;a href=&quot;https://openjdk.org/jeps/479&quot;&gt;Remove the Windows 32-bit x86 Port&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Remove the source code and build support for the Windows 32-bit x86 port. The port was deprecated in &lt;a href=&quot;#jdk-21&quot;&gt;JDK 21&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/483&quot;&gt;Ahead-of-Time Class Loading &amp;amp; Linking&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Improve startup time by making the classes of an application instantly available, in a loaded and linked state, when the HotSpot Java Virtual Machine starts.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/484&quot;&gt;Class-File API&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Provide a standard API for parsing, generating, and transforming Java class files. Will probably replace all instances of &lt;a href=&quot;https://asm.ow2.io/&quot;&gt;ASM&lt;/a&gt; library.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/485&quot;&gt;Stream Gatherers&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enhance the Stream API to support custom intermediate operations. The result is the new &lt;code&gt;.gather&lt;/code&gt; Method:&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadLocalRandom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Math:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// the new interface&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;for which we can write custom &lt;em&gt;Gatherers&lt;/em&gt; or use the build-in ones: &lt;code&gt;Gatherers.fold&lt;/code&gt;, &lt;code&gt;.mapConcurrent&lt;/code&gt;, &lt;code&gt;.scan&lt;/code&gt;, &lt;code&gt;.windowFixed&lt;/code&gt; and &lt;code&gt;.windowSliding&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ùå &lt;a href=&quot;https://openjdk.org/jeps/486&quot;&gt;Permanently Disable the Security Manager&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The Security Manager has not been the primary means of securing client-side Java code for many years, it has rarely been used to secure server-side code, and it is costly to maintain. It was deprecated in &lt;a href=&quot;#jdk-17&quot;&gt;JDK 17&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/490&quot;&gt;ZGC: Remove the Non-Generational Mode&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Remove the non-generational mode of the Z Garbage Collector (ZGC). The mode was introduced in &lt;a href=&quot;#jdk-22&quot;&gt;JDK 22&lt;/a&gt; and made the default in &lt;a href=&quot;#jdk-23&quot;&gt;JDK 23&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/491&quot;&gt;Synchronize Virtual Threads without Pinning&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Virtual threads that enter a &lt;code&gt;synchronized&lt;/code&gt; block no longer pin, that is they used to block the carrier thread on which they were scheduled.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/493&quot;&gt;Linking Run-Time Images without JMODs&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Reduce the size of the JDK by approximately 25% by enabling the &lt;code&gt;jlink&lt;/code&gt; tool to create custom run-time images without using the JDK&amp;#8217;s JMOD files. This feature must be enabled when the JDK is built; it will not be enabled by default, and some JDK vendors may choose not to enable it. The new JMOD format was introduced in &lt;a href=&quot;#jdk-9&quot;&gt;JDK 9&lt;/a&gt; and goes beyond JAR files to include native code, configuration files, and other kinds of data that do not fit naturally, if at all, into JAR files.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/496&quot;&gt;Quantum-Resistant Module-Lattice-Based Key Encapsulation Mechanism&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enhance the security of Java applications by providing an implementation of the quantum-resistant Module-Lattice-Based Key-Encapsulation Mechanism (ML-KEM). Builds on Key Encapsulation Mechanism API from &lt;a href=&quot;#jdk-21&quot;&gt;JDK 21&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/497&quot;&gt;Quantum-Resistant Module-Lattice-Based Digital Signature Algorithm&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enhance the security of Java applications by providing an implementation of the quantum-resistant Module-Lattice-Based Digital Signature Algorithm (ML-DSA).  Builds on Key Encapsulation Mechanism API from &lt;a href=&quot;#jdk-21&quot;&gt;JDK 21&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/498&quot;&gt;Warn upon Use of Memory-Access Methods in sun.misc.Unsafe&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Issue a warning at run time on the first occasion that any memory-access method in sun.misc.Unsafe is invoked. All of these unsupported methods were terminally deprecated in &lt;a href=&quot;#jdk-23&quot;&gt;JDK 23&lt;/a&gt;, because newer and better alternatives exist.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/501&quot;&gt;Deprecate the 32-bit x86 Port for Removal&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Deprecate the 32-bit x86 port, with the intent to remove it in a future release. This specifically means the Linux 32-bit x86 port, because it is the only one remaining.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-23&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-23&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-23&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/23/&quot;&gt;23&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;September 2024&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/467&quot;&gt;Markdown Documentation Comments&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Write markdown in Javadoc. Prefix every line with &lt;code&gt;///&lt;/code&gt; and then write markdown.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/471&quot;&gt;Deprecate the Memory-Access Methods in sun.misc.Unsafe for Removal&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Most of its methods ‚Äî 79 out of 87 ‚Äî are for accessing memory. All these methods are used by performance-sensitive libraries and no longer needed since &lt;a href=&quot;https://openjdk.org/jeps/454&quot;&gt;Foreign Function &amp;amp; Memory API (JDK 22)&lt;/a&gt; and &lt;a href=&quot;https://openjdk.org/jeps/193&quot;&gt;Variable Handles (JDK 9)&lt;/a&gt;, which is why the methods are now deprecated.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/474&quot;&gt;ZGC: Generational Mode by Default&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Which was introduced in &lt;a href=&quot;#jdk-22&quot;&gt;JDK 22&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-22&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-22&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-22&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/22/&quot;&gt;22&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;March 2024&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/454&quot;&gt;Foreign Function &amp;amp; Memory API&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;It provides native code access without the brittleness and danger of JNI. Previews in 19, 20 and 21.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/456&quot;&gt;Unnamed Variables &amp;amp; Patterns&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Allows you to write &lt;code&gt;_&lt;/code&gt; when you don&amp;#8217;t need a variable. Underscore as a variable name has been a warning since 8 and an error since 9.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedBall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* do sth*/&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/458&quot;&gt;Launch Multi-File Source-Code Programs&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Launch class that contains a &lt;code&gt;main()&lt;/code&gt;. Referenced classes will also be compiled. Simply use &lt;code&gt;java MyProg.java&lt;/code&gt; and all will be well.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/439&quot;&gt;Generational ZGC&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/YBGVK5JuSJ8?feature=shared&amp;amp;t=1588&quot;&gt;Fixes most of the ZGC (JDK 15) throughput drawbacks and requires 75% less memory&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-21&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-21&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-21&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/21/&quot;&gt;21&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sep 2028 (Oracle)&lt;br&gt;
Dec 2029 (Temurin)&lt;br&gt;
Oct 2030 (Corretto)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sep 2023&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;TIP&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;This is an amazing LTS release. We get virtual threads and we are very close at making &lt;a href=&quot;https://www.infoq.com/articles/data-oriented-programming-java/&quot;&gt;Data Oriented Programming in Java&lt;/a&gt; a reality with record patterns and pattern matching for switch&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/440&quot;&gt;Record patterns&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ColoredPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if all types match you can now use x and y&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/441&quot;&gt;Pattern matching for switch&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if obj is an Integer, you can now refer to it as i&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Y&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You said yes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;YES&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You said yes&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You said no&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/431&quot;&gt;Sequenced Collections&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addLast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// etc.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/444&quot;&gt;Virtual Threads&lt;/a&gt; (formerly Fibers)&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Improving scalability of IO-bound operations with virtual threads that you can create 10.000 of without penalty.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/449&quot;&gt;Deprecate the Windows 32-bit x86 Port&lt;/a&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/451&quot;&gt;Warning if Agents are dynamically loaded&lt;/a&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/452&quot;&gt;Key Encapsulation Mechanism API&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Introduces an API for key encapsulation mechanisms (KEMs), an encryption technique for securing symmetric keys using public key cryptography.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-20&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-20&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-20&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/20/&quot;&gt;20&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;March 2023&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;INFO&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Another huge release feature-wise but all features are either in preview or incubating.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-19&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-19&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-19&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/19/&quot;&gt;19&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;September 2022&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;INFO&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Another huge release feature-wise but all features are either in preview or incubating.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-18&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-18&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-18&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/18/&quot;&gt;18&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;March 2022&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ö† &lt;a href=&quot;https://openjdk.org/jeps/400&quot;&gt;UTF-8 by Default&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Specify UTF-8 as the default charset of the standard Java APIs&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/408&quot;&gt;Simple Web Server&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Command-line tool to start a minimal web server that serves static files only.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/416&quot;&gt;Reimplement Core Reflection with Method Handles&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Reimplements &lt;code&gt;java.lang.reflect.Method&lt;/code&gt;, Constructor, and Field on top of &lt;code&gt;java.lang.invoke&lt;/code&gt; method handles. Before up to three different internal mechanisms for reflective operations were used.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-17&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-17&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-17&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/17/&quot;&gt;17&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sep 2026 (Oracle)&lt;br&gt;
Oct 2027 (Temurin)&lt;br&gt;
Oct 2029 (Corretto)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sep 2021&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/382&quot;&gt;New macOS Rendering Pipeline&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Create a new Swing Renderer based on Metal Api before Apple removes OpenGL Api.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/391&quot;&gt;macOS/AArch64 Port&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Port for Apple Silicon&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ùå &lt;a href=&quot;https://openjdk.org/jeps/403&quot;&gt;Strongly Encapsulate JDK Internals by Default&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;JDK internals can no longer be opened via command-line option (except &lt;code&gt;sun.misc.Unsafe&lt;/code&gt; for which this is still possible).&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ùå &lt;a href=&quot;https://openjdk.org/jeps/407&quot;&gt;Remove RMI Activation&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Only RMI Activation is removed after deprecation in &lt;a href=&quot;#jdk-15&quot;&gt;JDK 15&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.java.net/jeps/409&quot;&gt;Sealed Classes and interfaces&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enums on steroids. Create a class or interface for which you know &lt;strong&gt;all&lt;/strong&gt; allowed subtypes. Combines great with &lt;code&gt;instanceof&lt;/code&gt; (&lt;a href=&quot;#jdk-17&quot;&gt;JDK 17&lt;/a&gt; or switch &lt;a href=&quot;#jdk-21&quot;&gt;JDK 21&lt;/a&gt; pattern matching.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permits&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*... */&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-16&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-16&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-16&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/16/&quot;&gt;16&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;March 2021&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.java.net/jeps/394&quot;&gt;Pattern Matching for instanceof&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// the old way&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// grr...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the new pattern-matching way&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Let pattern matching do the work!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;‚ûï &lt;a href=&quot;https://openjdk.java.net/jeps/395&quot;&gt;Records&lt;/a&gt;
Records are immutable carriers of data. Automatically implements data-driven methods such as equals and accessors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Stream toList Shortcut&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// careful, the returned List is unmodifiable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-15&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-15&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-15&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/15/&quot;&gt;15&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;September 2020&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ùå &lt;a href=&quot;https://openjdk.org/jeps/372&quot;&gt;Remove Nashorn JavaScript Engine&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Deprecated since &lt;a href=&quot;#jdk-11&quot;&gt;JDK 11&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/378&quot;&gt;Text Blocks&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;(multi-line string literals)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
              &amp;lt;html&amp;gt;
                  &amp;lt;body&amp;gt;
                      &amp;lt;p&amp;gt;Hello, world&amp;lt;/p&amp;gt;
                  &amp;lt;/body&amp;gt;
              &amp;lt;/html&amp;gt;
              &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/377&quot;&gt;ZGC: A Scalable Low-Latency Garbage Collector&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Cost of near-pauseless operation is a ~2% throughput reduction, and it uses more memory. G1 remains default garbage collector though.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-14&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-14&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-14&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/14/&quot;&gt;14&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;March 2020&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/349&quot;&gt;JFR Event Streaming&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Expose JDK Flight Recorder data for continuous monitoring.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.java.net/jeps/358&quot;&gt;Helpful Nullpointer exceptions&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Thrown exceptions now pinpoint what caused the nullpointer, not just filename and line number.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/361&quot;&gt;Switch Expressions&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MONDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FRIDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SUNDAY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TUESDAY&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;THURSDAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SATURDAY&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEDNESDAY&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-13&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-13&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-13&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/13/&quot;&gt;13&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;September 2019&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;INFO&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Smaller Release&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-12&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-12&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-12&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/12/&quot;&gt;12&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;March 2019&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;INFO&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Smaller Release&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-11&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-11&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-11&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/11/&quot;&gt;11&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sep 2023 (Oracle)&lt;br&gt;
Oct 2027 (Temurin)&lt;br&gt;
Jan 2032 (Corretto)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sep 2018&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/321&quot;&gt;Http Client&lt;/a&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/330&quot;&gt;Launch Single-File Source-Code Programs&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enhance the java launcher to run a program supplied as a single file of Java source code, including usage from within a script by means of &quot;shebang&quot; files and related techniques.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ùå JavaFx&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;JavaFx was never part of Java SE but Oracle bundled it with their JDKs since 8. Now they&amp;#8217;ve unbundled it and passed the torch to the &lt;a href=&quot;https://openjfx.io/&quot;&gt;OpenJFX project&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-10&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-10&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-10&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk/10/&quot;&gt;10&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;March 2018&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stable JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Total JEPs&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/286&quot;&gt;Local-Variable Type Inference&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// now possible&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://www.docker.com/blog/improved-docker-container-integration-with-java-10/&quot;&gt;Recognizes constraints set by container control groups (cgroup)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Before Java didn‚Äôt recognize that it was running in a container and used the maximum available resources, not the one for the cgroup. Was also backported to &lt;a href=&quot;#jdk-8&quot;&gt;JDK 8&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Optional API Additions&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElseThrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// clearer version of `optional.get()`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Also allows us to specify the exception being thrown.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-9&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-9&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-9&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk9/&quot;&gt;9&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;September 2017&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/200&quot;&gt;Modularized JDK&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Project Jigsaw&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/261&quot;&gt;Module System&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Create a module (a jar that only exposes a defined set of types, not all of them) by adding &lt;code&gt;module-info.java&lt;/code&gt; at the root:&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code&gt;module my.module { // name the module
    requires transitive other.module.name; // what modules it requires

    exports my.module.myapi; // what api to expose
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/222&quot;&gt;JShell&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Read-Eval-Print Loop&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/248&quot;&gt;G1 is the Default Garbage Collector&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The premise is that limiting GC pause times is, in general, more important than maximizing throughput. The previous GC, Parallel GC, was throughput-oriented.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/260&quot;&gt;Encapsulate Most Internal APIs&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Things such as &lt;code&gt;sun.misc.Unsafe&lt;/code&gt; are not encapsulated for now.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/266&quot;&gt;Interfaces supporting Reactive Streams&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;For interoperability across a number of async systems running on JVMs.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Private Methods in Interfaces&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Can be called from default methods.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/jeps/269&quot;&gt;Convenience Factory Methods for Collections&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofEntries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Optional API Additions&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;or&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifPresentOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-8&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-8&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-8&quot;&gt;&lt;a href=&quot;https://openjdk.java.net/projects/jdk8/features&quot;&gt;8&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Mar 2022&lt;br&gt;
Nov 2026 (Temurin)&lt;br&gt;
Dec 2030 (Corretto)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Mar 2014&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/projects/jdk8/features#126&quot;&gt;Lambda-Expressions&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Project Lambda&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Default Methods for Interfaces&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/projects/jdk8/features#174&quot;&gt;Nashorn JavaScript Engine&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Supersedes Rhino JavaScript Engine&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/projects/jdk8/features#153&quot;&gt;Launch JavaFX Applications&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Only added to Oracle JDK.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/projects/jdk8/features#150&quot;&gt;Date &amp;amp; Time API&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;New &lt;code&gt;java.time&lt;/code&gt;, inspired by &lt;a href=&quot;https://www.joda.org/joda-time/index.html&quot;&gt;Joda-Time&lt;/a&gt;. Supersedes &lt;code&gt;java.util.Date&lt;/code&gt; and &lt;code&gt;java.util.Calendar&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/projects/jdk8/features#107&quot;&gt;Bulk Data Operations for Collections&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Adds streams to java:&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;it&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ofNullable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifPresent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-7&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-7&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-7&quot;&gt;&lt;a href=&quot;https://openjdk.org/projects/jdk7/features/&quot;&gt;7&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;July 2011&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/projects/jdk7/features/#f618&quot;&gt;Strings in switch statements&lt;/a&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/projects/jdk7/features/#f618&quot;&gt;try-with-resources statements&lt;/a&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/projects/jdk7/features/#f618&quot;&gt;Improved type inference for generic instance creation (&quot;diamond&quot;)&lt;/a&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://openjdk.org/projects/jdk7/features/#f618&quot;&gt;Improved exception handling (multi-catch)&lt;/a&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-6&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-6&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-6&quot;&gt;6&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2006&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Rhino JavaScript Engine&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Dramatic performance improvements&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-5&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-5&quot;&gt;5&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2004&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Generics&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Autoboxing&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Enumerations&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Varargs&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;for each&lt;/code&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;java.util.concurrent&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;ConcurrentHasMap etc.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-1-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-1-4&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-1-4&quot;&gt;1.4&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2002&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;assert&lt;/code&gt; Keyword&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;java.util.regex&lt;/code&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;java.nio&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Non-Blocking I/O&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-1-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-1-3&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-1-3&quot;&gt;1.3&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2000&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï HotSpot JVM&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Last Release for Microsoft Windows 95 :) &lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-1-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-1-2&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-1-2&quot;&gt;1.2&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1998&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Swing&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï JIT-Compiler&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Collections-Framework&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Modify Objects via Reflection&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-1-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-1-1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-1-1&quot;&gt;1.1&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1997&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï +inner classes&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï RMI&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Serialization&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Reflection&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-1-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jdk-1-0&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jdk-1-0&quot;&gt;1&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1996&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;INFO&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Initial release&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="java" /><summary type="html">An ongoing list of Java features per release Ever since Java switched to its six-month release cadence (Time-Based Release Versioning) it has become a bit harder to keep up with the features they have implemented. The following list tracks the stable (not incubating or in preview) feature changes I deemed most noteworthy. The releases that Oracle will provide Long-Term Support (LTS) for are marked as such, based on the plan that Oracle publishes. Please note that other JDK distributions exist and they have their own plans. They follow the same tip and tail model though and only provide longer support for the same LTS versions as oracle. Take a look at the support roadmap of the most popular alternate distributions, Temurin and Corretto.</summary></entry><entry><title type="html">Structure-cementing tests and how to avoid them 2/3</title><link href="https://richargh.de/posts/Structure-Cementing-Tests-2" rel="alternate" type="text/html" title="Structure-cementing tests and how to avoid them 2/3" /><published>2025-01-31T00:00:00+00:00</published><updated>2025-01-31T00:00:00+00:00</updated><id>https://richargh.de/posts/Structure-Cementing-Tests-2</id><content type="html" xml:base="https://richargh.de/posts/Structure-Cementing-Tests-2">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;part-2-concepts-of-the-testdsl&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#part-2-concepts-of-the-testdsl&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#part-2-concepts-of-the-testdsl&quot;&gt;Part 2 - Concepts of the TestDsl&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Tests should be sensitive to behavioural changes but be insensitive to structural changes.
Tests that do not fulfil the second condition are called structure-cementing.
In &lt;a href=&quot;Structure-Cementing-Tests-1&quot;&gt;part 1&lt;/a&gt;, we built a TestDsl with which we can completely avoid cementing structure through the test setup.
In this part, we will go into more detail about the concepts of the DSL (Domain-Specific Language &lt;a href=&quot;#dsl&quot;&gt;[1]&lt;/a&gt;) and show why you can use it to write tests that become unit tests after changing just one line of integration.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test setup is a series of steps we need to take before we can test our testee.
We need this because certain preconditions are required before we can test the actual behavior.
The TestDsl is an abstraction layer between test and test setup that makes the test setup very comfortable and avoid structural cementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us assume that we want to test a method &lt;code&gt;rentBook(bookId, userId)&lt;/code&gt; in a &lt;code&gt;RentingService&lt;/code&gt;.
It is very common that this method has the precondition that the book and user must be stored in a &lt;code&gt;Repository&lt;/code&gt; before we call &lt;code&gt;rentBook&lt;/code&gt;.
Additionally the renting user must exist, have a &lt;code&gt;role&lt;/code&gt; and a &lt;code&gt;permission&lt;/code&gt; called &lt;code&gt;CAN_RENT_BOOK&lt;/code&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you were to create all the preconditions in each test by hand, you would not only have created a lot of redundancy, but (assuming enough tests) you would also have cemented the structure of all the preconditions. Implementation details, such as what a &lt;code&gt;Role&lt;/code&gt; looks like, how it gets into its &lt;code&gt;Repository&lt;/code&gt;, how the &lt;code&gt;RentingService&lt;/code&gt; gets to that &lt;code&gt;Repository&lt;/code&gt;, are cemented with every redundant test setup. This cementation happens because an engineer simply does not want to change a high number of files in order to implement an actually sensible structural change. The engineer feels that the structure is anything but soft and more like cement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the entire test setup is done  &lt;a href=&quot;#fig:testdsl-structure&quot;&gt;via the TestDsl&lt;/a&gt;, only the Dsl is affected by structure changes and the test is decoupled from the structure. We can make structural changes in the production code without any problems because we only have to make changes in one place, in the Dsl.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;fig:testdsl-structure&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/posts/structure-cementing-tests/part2/LL-Test-Dsl-Layer.png&quot; alt=&quot;At the top are the tests. The tests only have dependencies on the Test-D.S.L. The Test-D.S.L. has dependencies on the production code. If production code changes only the D.S.L. has to change but not a single test.&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. The TestDsl inserts itself between tests and the structure of the production code&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TestDsl consists of the following parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TestState&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Entity (Combo) Builder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test Doubles (instead of structure-cementing mocks)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service Configurator (optional)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JUnit extension (optional)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A noticeable amount of code, but not much logic. The code is always about delegating or setting values. This is good. The Dsl should think as little as possible so that we don&amp;#8217;t create a maintenance problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clearly, we need to invest code. However, this pays dividends quickly and allows us to write very concise tests (&lt;a href=&quot;#lst:testdsl-complete-test-w-extension&quot;&gt;the final test from part 1&lt;/a&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:testdsl-complete-test-w-extension&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Complete test with TestDsl Extension&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Integration&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CAN_RENT_BOOK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentingService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// WHEN&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rentBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// THEN&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isRented&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can now also turn &lt;a href=&quot;#lst:testdsl-complete-test-w-extension&quot;&gt;this test&lt;/a&gt; into a quick &lt;code&gt;@Unit&lt;/code&gt; test, just by replacing the &lt;code&gt;@Integration&lt;/code&gt; annotation. Legacy code in particular benefits from this feature of the TestDsl, because we often still have a lot of logic in the database and have to test at integration level before remediation. Over time, this logic ends up in the domain and we can turn existing tests into significantly faster unit tests with a one-liner. Without a TestDsl, you would have to completely rewrite them at unit level, which is why many teams do not do this, remain stuck with slow integration tests and cannot iterate faster despite tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following chapters, we will see why this is possible and which concepts are behind the Dsl. In Part 3, we will look at the second and final type of structure-cementing tests: Tests that test unstable elements and not modules.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;unit-and-integration-tests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#unit-and-integration-tests&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#unit-and-integration-tests&quot;&gt;Unit and integration tests&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unit and integration tests are very vague terms across the industry (&lt;a href=&quot;#test-shapes&quot;&gt;[2]&lt;/a&gt;, &lt;a href=&quot;#google-test-sizes&quot;&gt;[3]&lt;/a&gt;). Even in small teams there is no clear definition, everyone has their own understanding. So we should pause for a moment and define what we mean when we say &lt;code&gt;@Unit @Test&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test written in part 1 are sociable unit tests &lt;a href=&quot;#fowler-unit-test&quot;&gt;[4]&lt;/a&gt; and follow the unit test definition by Michael Feathers &lt;a href=&quot;#feathers-unit-test&quot;&gt;[5]&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A test is not a unit test if:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It talks to the database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It communicates across the network&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It touches the file system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can&amp;#8217;t run at the same time as any of your other unit tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have to do special things to your environment (such as editing config files) to run it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tests that do these things aren&amp;#8217;t bad. Often they are worth writing, and they can be written in a unit test harness. However, it is important to be able to separate them from true unit tests so that we can keep a set of tests that we can run fast whenever we make our changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Michael Feathers [5]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Around 2010, Google did not know this definition or their teams could not agree on it.
However, they knew that it is hugely beneficial for internal communication if everyone uses the same names for the same things. They couldn&amp;#8217;t agree on the same definitions so they introduced new 'data-driven naming conventions' for tests.
Their definition of a small test is pretty close to Feathers' definition (&lt;a href=&quot;#tbl:google-test-sizes&quot;&gt;Google Test Sizes&lt;/a&gt;) and the medium test provides a pretty good definition of an integration test.&lt;/p&gt;
&lt;/div&gt;
&lt;table id=&quot;tbl:google-test-sizes&quot; class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Google Test Sizes &lt;a href=&quot;#google-test-sizes&quot;&gt;[3]&lt;/a&gt;&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14.2857%;&quot;&gt;
&lt;col style=&quot;width: 28.5714%;&quot;&gt;
&lt;col style=&quot;width: 28.5714%;&quot;&gt;
&lt;col style=&quot;width: 28.5715%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Feature&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Small (Unit)&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Medium (Integration)&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Large (Acceptance)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Database&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Network access&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;localhost only&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;File system access&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Use external systems&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Discouraged&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Multiple threads&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sleep statements&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;System properties&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tfoot&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Time limit (seconds)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;60&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;300&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;900+&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tfoot&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The table also shows why unit tests are so fast: there is no &lt;em&gt;out-of-process&lt;/em&gt; with which our tested code has to interact.
Everything runs &lt;em&gt;in-process&lt;/em&gt; and &lt;em&gt;in-memory&lt;/em&gt; and without &lt;em&gt;network&lt;/em&gt;.
The perfect basis for the majority of our tests, because the next level of integration or medium can already be significantly slower.
Depending on the test runner and infrastructure, unit tests in customer projects are between 4 and 10 times faster than integration tests.
We were only able to achieve a factor of 4 with our integration tests by parallelising them with a little trick.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;img src=&quot;./images/icons/tip.png&quot; alt=&quot;Tip&quot;&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If each test is given its own namespace in the database (in MongoDb this would be a schema), then each integration test can only see its own data and can only modify its own data. Test isolation is thus restored.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;from-integration-to-unit-test&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#from-integration-to-unit-test&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#from-integration-to-unit-test&quot;&gt;From integration to unit test&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can convert &lt;a href=&quot;#lst:testdsl-complete-test-w-extension&quot;&gt;our test&lt;/a&gt; from &lt;code&gt;@Integration&lt;/code&gt; to &lt;code&gt;@Unit&lt;/code&gt; with a one-liner. The JUnit extension switches all repositories in the background. The production repository &lt;code&gt;JpaBooks&lt;/code&gt; becomes an &lt;code&gt;InMemoryBooksDouble&lt;/code&gt;. The api of the TestDsl remains the same, which is why we no longer need to make any changes to the test. We don&amp;#8217;t have to change anything in the tested code either, because it only contains the &lt;code&gt;interface Books { add(Book book); /* &amp;#8230;&amp;#8203; */ }&lt;/code&gt; and not which implementation is behind it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this change to work so smoothly, however, the &lt;em&gt;InMemory&lt;/em&gt; and &lt;em&gt;Jpa&lt;/em&gt; repositories must also behave in the same way. In the following chapter, we will see how we can continuously ensure this with the so-called port contract tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, it does not always make sense to implement all methods of &lt;code&gt;Books&lt;/code&gt; in &lt;code&gt;InMemoryBooksDouble&lt;/code&gt; and to keep them synchronised with port contract tests. Sometimes we need the powerful query functionalities of databases not for business logic, but for search functions in the UI. On the one hand, it would be a huge overhead to rebuild these in-memory for a few &lt;code&gt;@Unit&lt;/code&gt; tests. On the other hand, these tests would then really only test our InMemory repository implementation. In such cases, we prefer to throw a &lt;code&gt;NotImplementedException&lt;/code&gt; in the InMemory double and stick with &lt;code&gt;@Integration&lt;/code&gt; tests (for now). We can always change our mind if business logic actually requires the query method.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;keeping-doubles-synchronised-to-production-code-with-port-contract-tests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#keeping-doubles-synchronised-to-production-code-with-port-contract-tests&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#keeping-doubles-synchronised-to-production-code-with-port-contract-tests&quot;&gt;Keeping doubles synchronised to production code with port contract tests&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far we have assumed that a &lt;em&gt;Jpa&lt;/em&gt;- can always be replaced by an &lt;em&gt;InMemory&lt;/em&gt; repository. This is possible because we combine the &lt;em&gt;Ports &amp;amp; Adapters Architecture&lt;/em&gt; &lt;a href=&quot;#ports-and-adapters&quot;&gt;[6]&lt;/a&gt; with so-called port contract tests &lt;a href=&quot;#richargh-contract-tests&quot;&gt;[23]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;JpaBooks&lt;/em&gt; implements the interface &lt;em&gt;Books&lt;/em&gt;. The interface is a so-called &lt;strong&gt;port&lt;/strong&gt;. All classes that implement the interface are &lt;strong&gt;adapters&lt;/strong&gt; of it. However, the domain logic only knows the ports and not which implementation is behind them. This means that we have decoupled the domain logic from what the code that communicates with the outside world actually looks like. Theoretically, an implementation of the port does not even have to exist when writing the domain logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Ports &amp;amp; Adapters Architecture&lt;/em&gt; &lt;a href=&quot;#ports-and-adapters&quot;&gt;[6]&lt;/a&gt; helps us design better. We can model the domain logic first before we have to turn to implementation details. The architecture also offers us the option of replacing real adapters with test doubles &lt;a href=&quot;#xunit-test-double&quot;&gt;[8]&lt;/a&gt; for tests. In our unit tests, we therefore use an &lt;em&gt;InMemoryBooksDouble&lt;/em&gt; instead of a slower and more expensive &lt;em&gt;JpaBooks&lt;/em&gt; repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;InMemoryBooksDouble&lt;/em&gt; is a specific type of double, a so-called &lt;em&gt;fake&lt;/em&gt; &lt;a href=&quot;#xunit-fake&quot;&gt;[9]&lt;/a&gt;. In contrast to the other double types (dummies, stubs, and mocks &lt;a href=&quot;#mocks-arent-stubs&quot;&gt;[10]&lt;/a&gt;), fakes are working implementations of ports that take shortcuts that the production code cannot take, in this case the InMemory solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In contrast to other doubles, however, the fake must fulfil the expectations that the domain code has of the port. With repositories, for example, the domain code expects that an entity that was added with &lt;code&gt;add()&lt;/code&gt; can then also be found again with a &lt;code&gt;find()&lt;/code&gt;. The expectations that the domain has of the port are called &lt;strong&gt;contract&lt;/strong&gt; and we can check them with a  &lt;a href=&quot;#lst:port-contract-test&quot;&gt;port contract test&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:port-contract-test&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Port Contract Test of our Port&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BooksContract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_remember_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;
        &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// when&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// then&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;The contract is abstract. It only becomes an executable test when it is implemented.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;We only know the port in the test, not the implementation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;&lt;/td&gt;
&lt;td&gt;Each test describes behaviour that we expect from the port.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;#lst:port-adapter-test&quot;&gt;implementation test&lt;/a&gt; is very short for both the fake and the production adapter.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:port-adapter-test&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Test of the Port Adapter&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Unit&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryBooksTest&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BooksContract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InMemoryBooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;Adapter tests usually only implement the method that creates the &lt;code&gt;testee&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And the fake is also very &lt;a href=&quot;#lst:inmemory-books-fake&quot;&gt;easy to write&lt;/a&gt; thanks to a &lt;a href=&quot;#lst:base-inmemory-fake&quot;&gt;reusable base&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:inmemory-books-fake&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;An InMemory fake is quick to write thanks to the base class&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryBooksDouble&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseInMemoryDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BookId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;In most repositories, we do not need to implement any special methods here and only use what the base also has.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;Special methods are usually only created by queries. We can solve simple queries with the &lt;code&gt;filter(predicate)&lt;/code&gt; method from the &lt;a href=&quot;#lst:base-inmemory-fake&quot;&gt;base class&lt;/a&gt;. For more complex filter methods, however, we can always say that we do not implement them and prefer to use a slower &lt;em&gt;Integration Test&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:base-inmemory-fake&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The base class has little logic and always delegates to the JDK map&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseInMemoryDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TEntity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;For tests, we only need one HashMap here. However, if we also intend to test parallel code, we should use a ConcurrentHashMap straight away.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;Simple queries can be solved using predicate. For our unit tests, we don&amp;#8217;t need anything complicated with indices because our HashMap only contains a few entities.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;&lt;/td&gt;
&lt;td&gt;Other methods such as &lt;code&gt;findById()&lt;/code&gt;, &lt;code&gt;add()&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt;, &lt;code&gt;removeIf()&lt;/code&gt; and &lt;code&gt;count()&lt;/code&gt; only pass through to the (concurrent) HashMap. We do not implement anything special here, but use what the JDK gives us.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With these tests, we can now guarantee that all adapters of the port behave in the same way. They will always be synchronised with what we define as an expectation (aka contract) in the tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Contract tests are an idea from J. B. Rainsberger &lt;a href=&quot;#contract-tests&quot;&gt;[11]&lt;/a&gt;. We only call them &lt;strong&gt;port&lt;/strong&gt; contract tests here to make it more explicit which contract you want to test. This also distinguishes them from the &lt;strong&gt;integration&lt;/strong&gt; contract tests &lt;a href=&quot;#integration-contract-tests&quot;&gt;[12]&lt;/a&gt; and the consumer-driven contracts &lt;a href=&quot;#consumer-driven-contracts&quot;&gt;[13]&lt;/a&gt; approach. An alternative name for the port contract tests is role tests &lt;a href=&quot;#role-tests&quot;&gt;[14]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;structure-cementing-mocks-and-flexible-doubles&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#structure-cementing-mocks-and-flexible-doubles&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#structure-cementing-mocks-and-flexible-doubles&quot;&gt;Structure-cementing mocks and flexible doubles&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our test, we have so far only used one form of &lt;em&gt;Test Doubles&lt;/em&gt; &lt;a href=&quot;#xunit-test-double&quot;&gt;[8]&lt;/a&gt;, the InMemory &lt;em&gt;Fakes&lt;/em&gt; &lt;a href=&quot;#xunit-fake&quot;&gt;[9]&lt;/a&gt;. In addition to the fakes, there are also &lt;em&gt;stubs&lt;/em&gt;, &lt;em&gt;spies&lt;/em&gt; and &lt;em&gt;mocks&lt;/em&gt;. They are defined as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Fakes &lt;a href=&quot;#xunit-fake&quot;&gt;[9]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;are working implementations that can take shortcuts that the production code cannot take. We keep them synchronised with port contract tests. Fakes can be recognised by the fact that their implementation does roughly the same as the production implementation.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Stubs &lt;a href=&quot;#xunit-stub&quot;&gt;[15]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;allow us to put &lt;strong&gt;indirect inputs&lt;/strong&gt; into our test. Indirectly, because these inputs are not passed as parameters to the testee, but the testee pulls the inputs itself. Stubs can be recognised by the fact that we pass them test data, which they return as bluntly as possible when requested by the testee. There is no great logic here.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;Mocks &lt;a href=&quot;#xunit-mock&quot;&gt;[16]&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;allow us to check &lt;strong&gt;indirect outputs&lt;/strong&gt; from our testee. Indirectly, because you don&amp;#8217;t get these outputs as a return value from the testee, but have to retrieve and verify them via detours. This is also known as behaviour verification. Mocks can be recognised by the fact that you ask the mock directly to verify whether it has been called (with certain parameters). The test calls a framework method (&lt;code&gt;verify(mock).didSth(withParam)&lt;/code&gt;) or a self-written method (&lt;code&gt;mock.verifyAddWasCalled()&lt;/code&gt;).&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All three &lt;em&gt;Test Doubles&lt;/em&gt; can be implemented with a mocking framework, but they can also be implemented without one. Fakes and stubs benefit from implementing them by hand. It&amp;#8217;s not much code, you have a single implementation for multiple tests and the code is easier to read because it is just code and no framework syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A mocking framework really only makes sense for mocks because it allows you to specify the expected behavior in the same location as the test. But since you only need mocks very rarely, you only need mocking frameworks very rarely. This is good because the excessive use of the framework also leads &lt;a href=&quot;#fig:structure-cement-mock&quot;&gt;to structure cementation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;fig:structure-cement-mock&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/posts/structure-cementing-tests/part2/Cement-structure-via-mock.png&quot; alt=&quot;Visualizes that reimplementing the behavior of classes via mocks cements the structure of the production code.&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Reimplementation of the same method in n tests leads to structure cementation&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we reimplement the same methods again and again in &lt;em&gt;n&lt;/em&gt; tests, then:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;we cement the design at the type level.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;our reimplementation may deviate from the real code. The deviation can even be so strong that we break the encapsulation of the port &lt;a href=&quot;#stubs-and-mocks-break-encapsulation&quot;&gt;[17]&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The former deprives us of the possibility to change our structure. But the latter is perhaps even worse, because our test can be green with the mock, while they would be red with the actual production code. As a result, we no longer trust our tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In ‚ÄòThe Art of Unit Testing‚Äô &lt;a href=&quot;#art-of-unit-testing&quot;&gt;[18]&lt;/a&gt;, the recommendation is to only use mocks if we want to test the interaction with an external service. Then you only need mocks in 2% to 5% of unit tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the vast majority of tests, we therefore use either no double at all (method that only calculates and we can assert on the return value), an (in-memory) fake or a stub and we then write these quickly by hand: &lt;a href=&quot;#lst:base-inmemory-fake&quot;&gt;fake&lt;/a&gt; or &lt;a href=&quot;#lst:remote-service-stub&quot;&gt;stub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:remote-service-stub&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;A simple stub&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IsbnApiEchoDouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookTitleEcho&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeRemoteApiEchoDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookTitleEcho&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bookTitleEcho&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookTitleEcho&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
                                            &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookTitleEcho&lt;/span&gt;
                                            &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Refactoring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Isbn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isbn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bookTitleEcho&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;There are different types of stubs. This one always returns an echo of the values it received in the constructor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;No special logic here. Just return what you got in the constructor.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Writing it yourself also gives us a single place where we can maintain structural changes to the real port without affecting the test.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;builder-design&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#builder-design&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#builder-design&quot;&gt;Builder Design&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The generic &lt;code&gt;with()&lt;/code&gt; method accelerates the writing of the &lt;a href=&quot;#lst:builder-design&quot;&gt;initial builder&lt;/a&gt; but requires &lt;em&gt;public&lt;/em&gt; fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:builder-design&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Entity-TestBuilder&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookBuilder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BookId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Refactoring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Martin Fowler&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdOn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BookBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ids&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Public fields are a trade-off we can take, at least initially.
Realistically we are going to want to switch to more specific &lt;code&gt;withX()&lt;/code&gt; or &lt;code&gt;isX()&lt;/code&gt; methods sooner rather than later for one of two reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;the new methods make testing more convenient.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the new methods don&amp;#8217;t allow error conditions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suppose for example we make the author name no longer &lt;em&gt;stringly&lt;/em&gt; but &lt;strong&gt;strongly&lt;/strong&gt; typed &lt;a href=&quot;#stringly-typed&quot;&gt;[19]&lt;/a&gt; as &lt;code&gt;AuthorName&lt;/code&gt; (provides more &lt;em&gt;compile-time safety&lt;/em&gt; similar to the Ids). Then the generic &lt;code&gt;with()&lt;/code&gt; method is no longer as convenient to use, because we always have to write:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;with(it &amp;#8594; { author = new AuthorName(‚ÄòAlistair‚Äô); })&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To combat this we can introduce a &lt;code&gt;withAuthor(String name)&lt;/code&gt; and a &lt;code&gt;withAuthor(AuthorName name)&lt;/code&gt; overload to make our builder more convenient to use and keep our tests readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second reason happens when two or more fields depend on each other. For example, when a &lt;code&gt;Book&lt;/code&gt; gets a field &lt;code&gt;rentedOn&lt;/code&gt;. &lt;code&gt;rentedOn&lt;/code&gt; must always be after &lt;code&gt;createdOn&lt;/code&gt;. With our generic &lt;code&gt;with()&lt;/code&gt;, however, we can create an object that is invalid because we have only set &lt;code&gt;rentedOn&lt;/code&gt;. This is not a big problem if we always validate in the constructor of a class or record whether the fields (aka the state) are correct. However, &lt;code&gt;BookBuilder&lt;/code&gt; would then allow something, which &lt;code&gt;Book&lt;/code&gt; then acknowledges in runtime with an &lt;code&gt;IllegalArgumentException&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to have more compile-time safety again, we can make the field &lt;code&gt;rentedOn&lt;/code&gt; private again in the builder and introduce &lt;code&gt;isRentedOn(Duration rentedAfterCreate)&lt;/code&gt; together with the overload &lt;code&gt;isRentedOn(Instant createdOn, Duration rentedAfterCreate)&lt;/code&gt;. The new prefix, &lt;code&gt;is&lt;/code&gt;, shows us that the method conceptually does something different than a &lt;code&gt;with&lt;/code&gt;. &lt;code&gt;is&lt;/code&gt; declares that the method sets several interdependent values. The overload shows us which value the parameter &lt;code&gt;rentedAfterCreate&lt;/code&gt; is dependent on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new prefix is also there so that we can recognise whether our builder is starting to become too complex. If the number of &lt;code&gt;is&lt;/code&gt; methods exceeds the &lt;code&gt;with&lt;/code&gt;, then our builder is in dangerous waters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testdsl-in-combination-with-spring&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#testdsl-in-combination-with-spring&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#testdsl-in-combination-with-spring&quot;&gt;TestDsl in combination with Spring&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JUnit extension written in part 1 can also be made compatible with &lt;code&gt;@SpringBootTest&lt;/code&gt;. The extension only has to check whether an ApplicationContext exists. If so, it pulls the floor &lt;a href=&quot;#lst:testdsl-extension-w-spring&quot;&gt;from the Spring &lt;em&gt;DI-Container&lt;/em&gt;&lt;/a&gt; instead of from the JUnit Store.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:testdsl-extension-w-spring&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;TestDsl with Floor supplied by Spring&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ParameterContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ExtensionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extensionContext&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterResolutionException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springFloor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringExtension&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extensionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBeanProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ifAvailable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the annotation, we can now write the test for &lt;a href=&quot;#lst:spring-boot-controller-test&quot;&gt;a controller&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:spring-boot-controller-test&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;SpringBoot Controller Test with TestDsl&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Integration&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@SpringBootTest&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book_via_api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;TestState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
    &lt;span class=&quot;c1&quot;&gt;// rest of test&lt;/span&gt;
    &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;We combine the SpringBootTest annotation with the TestDsl annotation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;We ask Spring to inject the &lt;code&gt;testee&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;&lt;/td&gt;
&lt;td&gt;We can use the TestDsl here as in any other test. The repositories that Spring recognises and those of the TestDsl are the same.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use &lt;code&gt;@SpringBootTest&lt;/code&gt; you have to be careful how you write your tests and how extensive they are. The Spring Application Context is cached for tests which overrides the test isolation. Modifications that a test makes can cause a test that runs later to fail. Our tests become brittle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unit tests should therefore test (functional domains) logic without Spring. This also corresponds to the recommendation that the Spring Framework has made since version 2 &lt;a href=&quot;#spring-2-unit-tests&quot;&gt;[20]&lt;/a&gt; and has maintained up to the current version 6 &lt;a href=&quot;#spring-6-unit-tests&quot;&gt;[21]&lt;/a&gt;. An &lt;code&gt;@Integration @SpringBootTest&lt;/code&gt; can be added sporadically for important test paths through the application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;low-and-high-level-test-dsls&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#low-and-high-level-test-dsls&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#low-and-high-level-test-dsls&quot;&gt;Low and High Level Test DSLs&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TestDsl for &lt;code&gt;@Unit&lt;/code&gt; and &lt;code&gt;@Integration&lt;/code&gt; shown so far is a &lt;strong&gt;Low-Level&lt;/strong&gt; TestDsl. It counteracts structure cementation and makes tests 'under the hood' easier to write. Thanks to direct access to domain objects, we are very flexible as to which test states we can create. We can use it to check the happy path, the sad paths and also many strange paths, i.e. paths that should never actually occur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, it is not written from the user&amp;#8217;s perspective and cannot be used to verify that the system is behaving correctly from the user&amp;#8217;s perspective. For such tests, we need a running system that we can access from outside via a browser, HttpApi or similar. Google would call these tests ‚ÄòLarge‚Äô &lt;a href=&quot;#google-test-sizes&quot;&gt;[3]&lt;/a&gt; (&lt;a href=&quot;#tbl:google-test-sizes&quot;&gt;Google Test Sizes&lt;/a&gt;). Other common names are system tests or user acceptance tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For these tests, we need a new Dsl with a different structure but a very similar concept behind it. However, this &lt;strong&gt;high-level&lt;/strong&gt; &lt;code&gt;@Acceptance&lt;/code&gt; Dsl no longer has anything to do with structure cementation, but with Ui or Api cementation. The more tests we have that require a certain button or a certain widget, the more this UI component is cemented. In the case of a public api, this cementing is perhaps intentional, as you want to offer others a stable api. But even then, a Dsl is recommended because it makes the tests much more readable and maintainable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The High-Level TestDsl briefly outlined below is the implementation of the 4 Layer Acceptance Test Structure by Dave Farley &lt;a href=&quot;#acceptance-test-dsl&quot;&gt;[22]&lt;/a&gt;. The 4 layers are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;top: our test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DSL per domain: renting, buying, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;protocol drivers: UI, API, external system stub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the system under test&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we follow this structure our tests no longer accesses the api of our system directly. There is no &lt;code&gt;http.get(‚Äò/api/users‚Äô)&lt;/code&gt;. The test also does not click directly in the browser. There is no &lt;code&gt;page.navigate()&lt;/code&gt; or &lt;code&gt;page.click()&lt;/code&gt;. The test only recognises the next layer, the Dsl.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Dsl only offers domain-specific user targets, not how the targets are technically implemented (with the &lt;code&gt;renting&lt;/code&gt;-Dsl we could implement &lt;code&gt;.findBook(‚ÄòRefactoring‚Äô).rent()&lt;/code&gt;, for example). It only recognises the protocol drivers and delegates the implementation to the protocol drivers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only the drivers know the system to be tested. The UI driver knows how to implement the targets with Playwright, for example, while the Api Protocol Driver can implement the targets using RestAssured, for example. Which driver is used is controlled &lt;a href=&quot;#lst:high-level-test-dsl&quot;&gt;by annotation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:high-level-test-dsl&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;High-Level TestDsl&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Acceptance&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@UiProtocol&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@ApiProtocol&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InventoryDsl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentingDsl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inventory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Refactoring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt; &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Refactoring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// when&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isRented&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;We carry out this test via the browser but also via the HttpApi.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;As with the low-level Dsl, each test must create its complete state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;&lt;/td&gt;
&lt;td&gt;Unlike the low-level Dsl, however, this Dsl takes significantly larger steps. Creating a book can consist of many browser actions or api calls. If one of the intermediate steps fails, the Dsl aborts immediately and provides specific feedback as to which of the intermediate steps did not work.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also &lt;strong&gt;parallelise&lt;/strong&gt; these tests in a similar way as we have done with integration tests: we can either provide a namespace per test directly in our system under test or solve this via our Dsl.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The former is possible if you build multi-tenant capability into your system right from the start. Each entity then needs an additional &lt;em&gt;TenantId&lt;/em&gt; and you have to ensure that everyone can only see the data of their own tenant. If you now create a new tenant for each test and the test also creates all preconditions in the form of entities, then the tests are isolated from each other via the &lt;em&gt;TenantId&lt;/em&gt; and can therefore be parallelized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the &lt;em&gt;TenantId&lt;/em&gt; cannot be built directly into the system, the test data aliasing &lt;a href=&quot;#acceptance-test-dsl&quot;&gt;[22]&lt;/a&gt; mentioned by Dave Farley is used. With this pattern, the TestDsl itself ensures that the test data is unique. It then adds a test-unique key to fields. &lt;code&gt;addBook(‚ÄúRefactoring‚Äù)&lt;/code&gt; does not create the book ‚ÄúRefactoring‚Äù, but the book ‚ÄúRefactoring dbac1q23‚Äù. &lt;code&gt;findBook(‚ÄúRefactoring‚Äù)&lt;/code&gt; does not search for ‚ÄúRefactoring‚Äù, but for ‚ÄúRefactoring dbac1q23‚Äù. When writing the test, however, you must be careful not to assert the number of books or similar, as this could change continuously due to tests running in parallel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, the high-level Dsl described here complements the low-level Dsl with the user view. We write the majority of the tests with the low-level Dsl; we test critical application areas in particular with the high-level Dsl from the user&amp;#8217;s perspective.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;outlook&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#outlook&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#outlook&quot;&gt;Outlook&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TestDsl combines existing concepts such as builders, ports &lt;a href=&quot;#ports-and-adapters&quot;&gt;[6]&lt;/a&gt;, port contract tests &lt;a href=&quot;#port-contract-test&quot;&gt;[7]&lt;/a&gt;, stubs &lt;a href=&quot;#mocks-arent-stubs&quot;&gt;[10]&lt;/a&gt; and fakes &lt;a href=&quot;#xunit-fake&quot;&gt;[9]&lt;/a&gt; and provides a standardized api for all our unit and integration tests. With the TestDsl, we were able to solve structure cementation through redundant test setup. We will show how we use the TestDsl to prevent structure cementing through tests at the wrong level in Part 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested in more content about the topic, you can view TestDsl sample code online &lt;a href=&quot;#test-dsl&quot;&gt;[24]&lt;/a&gt; or watch the presentation on ‚ÄúBeehive Architecture‚Äù &lt;a href=&quot;#beehive-architecture&quot;&gt;[25]&lt;/a&gt;, which also revolves around the TestDsl.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;img src=&quot;./images/icons/note.png&quot; alt=&quot;Note&quot;&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This article was originally published in &lt;a href=&quot;https://www.ijug.eu/de/java-aktuell/zeitschrift/java-aktuell-archiv/detailansicht-java-aktuell/java-aktuell-5-24-cloud/&quot;&gt;Java Aktuell 5/24&lt;/a&gt; in üá©üá™. It is translated and republished here with the magazine&amp;#8217;s permission.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;dsl&quot;&gt;&lt;/a&gt;[1] M. Fowler, ‚ÄûDomain Specific Language‚Äú. 2008. Available here: &lt;a href=&quot;https://martinfowler.com/bliki/DomainSpecificLanguage.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/bliki/DomainSpecificLanguage.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;test-shapes&quot;&gt;&lt;/a&gt;[2] M. Fowler, ‚ÄûOn the Diverse And Fantastical Shapes of Testing‚Äú. 2021. Available here: &lt;a href=&quot;https://martinfowler.com/articles/2021-test-shapes.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/articles/2021-test-shapes.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;google-test-sizes&quot;&gt;&lt;/a&gt;[3] S. Stewart, ‚ÄûTest Sizes‚Äú. 2010. Available here: &lt;a href=&quot;https://testing.googleblog.com/2010/12/test-sizes.html&quot; class=&quot;bare&quot;&gt;https://testing.googleblog.com/2010/12/test-sizes.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;fowler-unit-test&quot;&gt;&lt;/a&gt;[4] M. Fowler, ‚ÄûUnit Test‚Äú. 2014. Available here: &lt;a href=&quot;https://martinfowler.com/bliki/UnitTest.html#SolitaryOrSociable&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/bliki/UnitTest.html#SolitaryOrSociable&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;feathers-unit-test&quot;&gt;&lt;/a&gt;[5] M. Feathers, ‚ÄûA Set of Unit Testing Rules‚Äú. 2005. Available here: &lt;a href=&quot;https://www.artima.com/weblogs/viewpost.jsp?thread=126923&quot; class=&quot;bare&quot;&gt;https://www.artima.com/weblogs/viewpost.jsp?thread=126923&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;ports-and-adapters&quot;&gt;&lt;/a&gt;[6] A. Cockburn, ‚ÄûHexagonal architecture‚Äú. 2005. Available here: &lt;a href=&quot;https://alistair.cockburn.us/hexagonal-architecture/&quot; class=&quot;bare&quot;&gt;https://alistair.cockburn.us/hexagonal-architecture/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;port-contract-test&quot;&gt;&lt;/a&gt;[7] R. Gross, ‚ÄûContract Tests in Kotlin‚Äú. 2020. Available here: &lt;a href=&quot;http://richargh.de/posts/Contract-Tests-in-Kotlin&quot; class=&quot;bare&quot;&gt;http://richargh.de/posts/Contract-Tests-in-Kotlin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;xunit-test-double&quot;&gt;&lt;/a&gt;[8] G. Meszaros, ‚ÄûTest Double‚Äú. 2011. Available here: &lt;a href=&quot;http://xunitpatterns.com/Test%20Double.html&quot; class=&quot;bare&quot;&gt;http://xunitpatterns.com/Test%20Double.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;xunit-fake&quot;&gt;&lt;/a&gt;[9] G. Meszaros, ‚ÄûFake Object‚Äú. 2011. Available here: &lt;a href=&quot;http://xunitpatterns.com/Fake%20Object.html&quot; class=&quot;bare&quot;&gt;http://xunitpatterns.com/Fake%20Object.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;mocks-arent-stubs&quot;&gt;&lt;/a&gt;[10] M. Fowler, ‚ÄûMocks Aren‚Äôt Stubs‚Äú. 2007. Available here: &lt;a href=&quot;https://martinfowler.com/articles/mocksArentStubs.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/articles/mocksArentStubs.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;contract-tests&quot;&gt;&lt;/a&gt;[11] J. B. Rainsberger, ‚ÄûGetting Started with Contract Tests‚Äú. 2017. Available here: &lt;a href=&quot;https://blog.thecodewhisperer.com/permalink/getting-started-with-contract-tests&quot; class=&quot;bare&quot;&gt;https://blog.thecodewhisperer.com/permalink/getting-started-with-contract-tests&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;integration-contract-tests&quot;&gt;&lt;/a&gt;[12] M. Fowler, ‚ÄûIntegration Contract Test‚Äú. 2011. Available here: &lt;a href=&quot;https://martinfowler.com/bliki/ContractTest.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/bliki/ContractTest.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;consumer-driven-contracts&quot;&gt;&lt;/a&gt;[13] I. Robinson, ‚ÄûConsumer-Driven Contracts: A Service Evolution Pattern‚Äú. 2006. Available here: &lt;a href=&quot;https://martinfowler.com/articles/consumerDrivenContracts.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/articles/consumerDrivenContracts.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;role-tests&quot;&gt;&lt;/a&gt;[14] M. Rivero, ‚ÄûRole tests for implementation of interfaces discovered through TDD‚Äú. 2022. Available here: &lt;a href=&quot;https://codesai.com/posts/2022/04/role-tests&quot; class=&quot;bare&quot;&gt;https://codesai.com/posts/2022/04/role-tests&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;xunit-stub&quot;&gt;&lt;/a&gt;[15] G. Meszaros, ‚ÄûTest Stub‚Äú. 2011. Available here: &lt;a href=&quot;http://xunitpatterns.com/Test%20Stub.html&quot; class=&quot;bare&quot;&gt;http://xunitpatterns.com/Test%20Stub.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;xunit-mock&quot;&gt;&lt;/a&gt;[16] G. Meszaros, ‚ÄûMock Object‚Äú. 2011. Available here: &lt;a href=&quot;http://xunitpatterns.com/Mock%20Object.html&quot; class=&quot;bare&quot;&gt;http://xunitpatterns.com/Mock%20Object.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;stubs-and-mocks-break-encapsulation&quot;&gt;&lt;/a&gt;[17] M. Seemann, ‚ÄûStubs and mocks break encapsulation‚Äú. 2022. Available here: &lt;a href=&quot;https://blog.ploeh.dk/2022/10/17/stubs-and-mocks-break-encapsulation/&quot; class=&quot;bare&quot;&gt;https://blog.ploeh.dk/2022/10/17/stubs-and-mocks-break-encapsulation/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;art-of-unit-testing&quot;&gt;&lt;/a&gt;[18] R. Osherove, ‚ÄûArt of Unit Testing (3. Edition)‚Äú. 2024. Available here: &lt;a href=&quot;https://www.artofunittesting.com/&quot; class=&quot;bare&quot;&gt;https://www.artofunittesting.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;stringly-typed&quot;&gt;&lt;/a&gt;[19] T. Spring, ‚ÄûStringly Typed vs Strongly Typed‚Äú. 2022. Available here: &lt;a href=&quot;https://www.hanselman.com/blog/stringly-typed-vs-strongly-typed&quot; class=&quot;bare&quot;&gt;https://www.hanselman.com/blog/stringly-typed-vs-strongly-typed&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;spring-2-unit-tests&quot;&gt;&lt;/a&gt;[20] T. Spring, ‚ÄûUnit Testing‚Äú. 2006. Available here: &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/2.0.4/reference/testing.html#unit-testing&quot; class=&quot;bare&quot;&gt;https://docs.spring.io/spring-framework/docs/2.0.4/reference/testing.html#unit-testing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;spring-6-unit-tests&quot;&gt;&lt;/a&gt;[21] T. Spring, ‚ÄûUnit Testing‚Äú. 2022. Available here: &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/6.0.0/reference/html/testing.html#unit-testing&quot; class=&quot;bare&quot;&gt;https://docs.spring.io/spring-framework/docs/6.0.0/reference/html/testing.html#unit-testing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;acceptance-test-dsl&quot;&gt;&lt;/a&gt;[22] D. Farley, ‚ÄûAcceptance Testing for Continuous Delivery [#AgileIndia2019]‚Äú. 2019. Available here: &lt;a href=&quot;https://www.youtube.com/watch?v=Rmz3xobXyV4&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=Rmz3xobXyV4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;richargh-contract-tests&quot;&gt;&lt;/a&gt;[23] R. Gross, ‚ÄûContract Tests in Kotlin‚Äú. 2020. Available here: &lt;a href=&quot;http://richargh.de/posts/Contract-Tests-in-Kotlin&quot; class=&quot;bare&quot;&gt;http://richargh.de/posts/Contract-Tests-in-Kotlin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;test-dsl&quot;&gt;&lt;/a&gt;[24] R. Gross, ‚ÄûTestDsl (Avoid structure-cementing Tests)‚Äú. 2024. Available here: &lt;a href=&quot;https://github.com/Richargh/testdsl&quot; class=&quot;bare&quot;&gt;https://github.com/Richargh/testdsl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;beehive-architecture&quot;&gt;&lt;/a&gt;[25] R. Gross, ‚ÄûBeehive Architecture‚Äú. 2023. Available here: &lt;a href=&quot;http://richargh.de/talks/#beehive-architecture&quot; class=&quot;bare&quot;&gt;http://richargh.de/talks/#beehive-architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="testing" /><category term="architecture" /><category term="cementing" /><summary type="html">Part 2 - Concepts of the TestDsl</summary></entry><entry><title type="html">SPACE - The Meta-Framework to Measure Developer Productivity</title><link href="https://richargh.de/posts/SPACE" rel="alternate" type="text/html" title="SPACE - The Meta-Framework to Measure Developer Productivity" /><published>2025-01-29T00:00:00+00:00</published><updated>2025-01-29T00:00:00+00:00</updated><id>https://richargh.de/posts/SPACE</id><content type="html" xml:base="https://richargh.de/posts/SPACE">&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developer productivity has been studied extensively. Unfortunately, after decades of research and practical development experience, knowing how to measure productivity or even define developer productivity has remained elusive, while myths about the topic are common. Far too often teams or managers attempt to measure developer productivity with simple metrics, attempting to capture it all with &quot;one metric that matters.&quot;&lt;br&gt;
[&amp;#8230;&amp;#8203;]&lt;br&gt;
Productivity cannot be reduced to a single dimension (or metric!)&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Nicole Forsgren et. al.&lt;br&gt;
&lt;cite&gt;https://queue.acm.org/detail.cfm?id=3454124&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So title the authors of the paper &lt;a href=&quot;https://queue.acm.org/detail.cfm?id=3454124&quot;&gt;The SPACE of Developer Productivity&lt;/a&gt; and I&amp;#8217;m inclined to believe they are right.
The most known of the authors, Nicole Forsgren, did after all write the book &lt;a href=&quot;https://itrevolution.com/product/accelerate/&quot;&gt;Accelerate&lt;/a&gt; and create the &lt;a href=&quot;https://dora.dev/&quot;&gt;Accelerate State of DevOps Report&lt;/a&gt; which gave us the &lt;a href=&quot;https://dora.dev/guides/dora-metrics-four-keys/&quot;&gt;DORA 4 keys&lt;/a&gt;, a set of metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Can we then even measure developer productivity?
Should we?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;to-measure-or-not-to-measure&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#to-measure-or-not-to-measure&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#to-measure-or-not-to-measure&quot;&gt;To measure or not to measure&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whether or not you want someone to measure developer productivity is beside the point because someone, somewhere is going to look at your teams velocity and decide things based on it.
Then we have exactly the problem in the opening quote, productivity being reduced to a single number.
The problem with this reduction is that it obscures too much and a single metric is too easy to game.
Velocity for example is too easy to game (inflate story points, no longer work on bugs, ignore quality), which defeats the whole point of measuring it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a measure becomes a target, it ceases to be a good measure&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Goodhart's law&lt;br&gt;
&lt;cite&gt;https://en.wikipedia.org/wiki/Goodhart%27s_law&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To stop this race to the bottom I would like each team to select multiple metrics that are somehow in tension with each other, so you cannot game one without worsening another.
But which metrics have these properties?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-space-dimensions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-space-dimensions&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#the-space-dimensions&quot;&gt;The SPACE Dimensions&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://queue.acm.org/detail.cfm?id=3454124&quot;&gt;SPACE&lt;/a&gt; is a meta-framework that helps us select metrics.
According to the framework all productivity metrics fall into one of the following five dimensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;satisfaction-and-well-being&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#satisfaction-and-well-being&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#satisfaction-and-well-being&quot;&gt;Satisfaction and well-being&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How fulfilled, happy and healthy one is. &lt;em&gt;Satisfaction&lt;/em&gt; is how fulfilled developers feel with their work, team, tools, or culture.
&lt;em&gt;Well-being&lt;/em&gt; is how healthy and happy they are, and how their work impacts it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Employee satisfaction. NPS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developer efficacy. Devs have all the tools to get the work done.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Burnout. The exhaustion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;performance&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#performance&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#performance&quot;&gt;Performance&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Performance is the outcome of a system or process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quality. Reliability, absence of bugs, ongoing service health.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Impact. Customer satisfaction, customer adoption and retention, feature usage, cost reduction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://dora.dev/guides/dora-metrics-four-keys/&quot;&gt;DORA 4 keys&lt;/a&gt;: Change Fail Rate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;activity&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#activity&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#activity&quot;&gt;&lt;em&gt;Activity&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Activity is a count of actions or outputs completed in the course of performing work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design and coding. Volume or count of design documents and specs, work items, pull requests, commits, and code reviews.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continuous integration and deployment. Count of build, test, deployment/release, and infrastructure utilization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operational activity. Count or volume of incidents/issues and distribution based on their severities, on-call participation, and incident mitigation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://dora.dev/guides/dora-metrics-four-keys/&quot;&gt;DORA 4 keys&lt;/a&gt;: Deploy Frequency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commits&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;communication-and-collaboration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#communication-and-collaboration&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#communication-and-collaboration&quot;&gt;Communication and collaboration&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Communication and collaboration capture how people and teams communicate and work together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Discoverability of documentation and expertise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How quickly work is integrated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quality of reviews of work contributed by team members.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Network metrics that show who is connected to whom and how.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Onboarding time for and experience of new members.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1:1s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;efficiency-and-flow&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#efficiency-and-flow&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#efficiency-and-flow&quot;&gt;Efficiency and flow&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Efficiency and flow capture the ability to complete work or make progress on it with minimal interruptions or delays, whether individually or through a system.
Some research associates productivity with the ability to get complex tasks done with minimal distractions or interruptions, aka &lt;strong&gt;&quot;getting in the flow&quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Handoffs: Number of handoffs in a process; number of handoffs across different teams in a process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perceived ability to stay in flow and complete work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interruptions: quantity, timing, how spaced, impact on development work and flow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time measures through a system: total time, value-added time, wait time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://dora.dev/guides/dora-metrics-four-keys/&quot;&gt;DORA 4 keys&lt;/a&gt;: Lead Time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://dora.dev/guides/dora-metrics-four-keys/&quot;&gt;DORA 4 keys&lt;/a&gt;: MTTR&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-to-do-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what-to-do-next&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#what-to-do-next&quot;&gt;What to do next&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When selecting your team metric it&amp;#8217;s best to follow
&lt;a href=&quot;https://www.youtube.com/watch?v=O2rbekHpG4Q&quot;&gt;Nicole&amp;#8217;s suggestions&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;There is no &quot;one&quot; metric that matters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have two-to-three metrics that are in tension with another. They should balance each other out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure the metrics are along different &lt;strong&gt;dimensions&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can measure each metric at individual (one person), team (people that work together) or system (end-to-end work through a system) level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SPACE gives us the dimensions we need to find our metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Productivity" /><category term="Metrics" /><summary type="html">Developer productivity has been studied extensively. Unfortunately, after decades of research and practical development experience, knowing how to measure productivity or even define developer productivity has remained elusive, while myths about the topic are common. Far too often teams or managers attempt to measure developer productivity with simple metrics, attempting to capture it all with &quot;one metric that matters.&quot; [&amp;#8230;&amp;#8203;] Productivity cannot be reduced to a single dimension (or metric!) &amp;#8212; Nicole Forsgren et. al. https://queue.acm.org/detail.cfm?id=3454124</summary></entry><entry><title type="html">GenAI is a waste of our time</title><link href="https://richargh.de/posts/AI-Waste" rel="alternate" type="text/html" title="GenAI is a waste of our time" /><published>2025-01-25T00:00:00+00:00</published><updated>2025-01-25T00:00:00+00:00</updated><id>https://richargh.de/posts/AI-Waste</id><content type="html" xml:base="https://richargh.de/posts/AI-Waste">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generative AI is a waste.
It&amp;#8217;s a waste of our time, our CO2 and our sanity.
Tom Fishburne perfectly summarises why in his web comic:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/posts/ai-waste/tom-fishburne-AI-Written-AI-Read.png&quot; alt=&quot;AI Written&quot; width=&quot;AI Read&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Can&amp;#8217;t we just communicate short and to the point?
All the stuff in the middle is waste.
It was waste before GenAI, it is worse with GenAi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are good use cases for AI.
Optimising the communication of people though, let&amp;#8217;s do that ourselves.
We gain nothing but waste if we keep it as is and &quot;make it easier&quot; with AI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;img src=&quot;./images/icons/tip.png&quot; alt=&quot;Tip&quot;&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;a href=&quot;https://marketoonist.com/2023/03/ai-written-ai-read.html&quot;&gt;AI Written, AI Read&lt;/a&gt; is a comic by Tom Fishburne. &lt;a href=&quot;https://marketoonist.com/faq&quot;&gt;It is free (and appreciated) to share them in personal blogs and social media&lt;/a&gt;. Please spread if you find it as inspiring as I did.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;img src=&quot;./images/icons/tip.png&quot; alt=&quot;Tip&quot;&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Try to keep E-Mails to &lt;a href=&quot;http://three.sentenc.es/&quot; class=&quot;bare&quot;&gt;http://three.sentenc.es/&lt;/a&gt; :)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;</content><author><name></name></author><category term="GenAI" /><category term="AI" /><category term="LLM" /><summary type="html">Generative AI is a waste. It&amp;#8217;s a waste of our time, our CO2 and our sanity. Tom Fishburne perfectly summarises why in his web comic:</summary></entry><entry><title type="html">.NET Version History (up to .NET 9)</title><link href="https://richargh.de/posts/dotnet-version-history/" rel="alternate" type="text/html" title=".NET Version History (up to .NET 9)" /><published>2024-11-12T00:00:00+00:00</published><updated>2024-11-12T00:00:00+00:00</updated><id>https://richargh.de/posts/Dotnet-Version-History-up-to-dotnet-9</id><content type="html" xml:base="https://richargh.de/posts/dotnet-version-history/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following list tracks the stable (not incubating or in preview) feature changes I deemed most noteworthy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The list is ongoing and will be updated with every new .NET release.
A &lt;strong&gt;+&lt;/strong&gt; marks an added feature, a &lt;strong&gt;-&lt;/strong&gt; marks a removed feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Typically C# versions are only supported on the .NET Version they are introduced with or newer.
Microsoft has a list of what is considered &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/configure-language-version#defaults&quot;&gt;C# language version default&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/dotnet/core/blob/main/releases.md&quot;&gt;releases&lt;/a&gt; that Microsoft will provide Long-Term Support (LTS) for are marked as such, based on the plan that &lt;a href=&quot;https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core&quot;&gt;Microsoft publishes&lt;/a&gt;.
A new major release of .NET is published every year in November. Even numbered releases are &lt;strong&gt;LTS&lt;/strong&gt; releases that get free support and patches for three years.
Odd numbered releases are &lt;strong&gt;STS&lt;/strong&gt; releases that get free support and patches for 18 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-9&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-9&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-9&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/tree/main/release-notes/9.0&quot;&gt;9&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;November 2024&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c13&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c13&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c13&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-13&quot;&gt;C#13&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;params&lt;/code&gt; collections&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You can now use params with any recognized collection type, including &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlySpan&amp;lt;T&amp;gt;&lt;/code&gt;, and types that implement &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; and have an &lt;code&gt;Add&lt;/code&gt; method.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï New lock object&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Add a new type for thread synchronization, the &lt;code&gt;System.Threading.Lock&lt;/code&gt; type.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï New escape sequence&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You can use &lt;code&gt;\e&lt;/code&gt; as a character literal escape sequence for the &lt;code&gt;ESCAPE&lt;/code&gt; character, Unicode &lt;code&gt;U+001B&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Method group natural type&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Implicit index access&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The implicit &quot;from the end&quot; index operator, &lt;code&gt;^&lt;/code&gt;, is now allowed in an object initializer expression.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;unsafe&lt;/code&gt; in iterators and async methods&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;allows ref struct&lt;/code&gt;&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;ref struct&lt;/code&gt; interfaces&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï More partial members&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;You can declare partial properties and partial indexers in C# 13.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-8&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-8&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-8&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/8.0/8.0.0/8.0.0.md&quot;&gt;8&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;November 2026&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;November 2023&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c12&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c12&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c12&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12&quot;&gt;C#12&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Primary constructors&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BankAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Collection expressions&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Julia&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Anna&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Thomas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allNames&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moreNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Optional parameters in lambda expressions&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IncrementBy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Experimental attribute&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Experimental&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Interceptors&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Substitute a call to an interceptable method with a call to itself at compile time&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-7&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-7&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-7&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/7.0/7.0.0/7.0.0.md&quot;&gt;7&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;November 2022&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c11&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c11&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c11&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-11&quot;&gt;C#11&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Pattern matching enhancements&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï List patterns&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;Required&lt;/code&gt; members&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Must be initialized by an object initializer. Really important because now you can trust NRTs (nullable reference types) way more.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Raw string literals&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; hello &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Newlines in string interpolation expressions&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;The text inside the &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; characters for a string interpolation can now span multiple lines.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï File-local types&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;file&lt;/code&gt; access modifier is scoped to the source&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-6&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-6&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-6&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/6.0/6.0.0/6.0.0.md&quot;&gt;6&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;November 2024&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;November 2021&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;.NET 6 unifies the SDK, base libraries, and runtime across mobile, desktop, IoT, and cloud apps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;+&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/&quot;&gt;Massive gains in performance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c10&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c10&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c10&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-10&quot;&gt;C#10&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Pattern matching enhancements&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Extended property patterns&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Nested properties:&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prop1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prop2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï File-scoped namespace declaration&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyNamespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// instead of nesting&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Allow both assignment and declaration in the same deconstruction&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Record structs&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Improvements of structure types&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Interpolated string handlers&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Allow &lt;code&gt;const&lt;/code&gt; interpolated strings&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï global using directives&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Improvements on lambda expressions&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Record types can &lt;code&gt;seal ToString()&lt;/code&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Improved definite assignment&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Allow AsyncMethodBuilder attribute on methods&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï CallerArgumentExpression attribute&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Warning wave 6&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Any new keywords added for C# will be all lower-case ASCII characters. This warning ensures that none of your types conflict with future keywords.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-5&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-5&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/5.0/5.0.0/5.0.0.md&quot;&gt;5&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;November 2020&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;skips &quot;Core&quot; and is now the main implementation of .NET going forward&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c9&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c9&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c9&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-9&quot;&gt;C#9&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Pattern matching enhancements&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Relational patterns&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;#8656;&lt;/code&gt;, or &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï logical patterns&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/patterns&quot;&gt;&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://github.com/dotnet/csharplang/blob/main/proposals/csharp-9.0/unconstrained-type-parameter-annotations.md&quot;&gt;Unconstrained type parameter annotations&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Which makes NRTs (nullable-reference types) much nicer to use&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;Init&lt;/code&gt; only setters&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YearOfBirth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Records&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Top-level statements&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Programs without &lt;code&gt;Main&lt;/code&gt; methods&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;[ModuleInitializer]&lt;/code&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Target-typed new expressions&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Write just &lt;code&gt;new();&lt;/code&gt; when the type is known&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Target-typed conditional expressions&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;M(b ? 1 : 2)&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Covariant return types&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Lambda discard parameters&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;f5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#f5&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#f5&quot;&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-f-5/&quot;&gt;F#5&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-core-3-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-core-3-1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-core-3-1&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/3.1/3.1.0/3.1.0.md&quot;&gt;Core 3.1&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;November 2022&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;November 2019&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-core-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-core-3&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-core-3&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/3.0/3.0.0/3.0.0.md&quot;&gt;Core 3.0&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;September 2019&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fits (&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/standard/net-standard?tabs=net-standard-2-1&quot;&gt;.NET Standard 2.1&lt;/a&gt; &amp;#8658; 37,118 of the 37,118 APIs)&lt;/p&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï WinForms, WPF on Windows&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Only on windows.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c8-0-only-part-of-core&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c8-0-only-part-of-core&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c8-0-only-part-of-core&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-80&quot;&gt;C#8.0&lt;/a&gt; (&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/building-c-8-0/&quot;&gt;only part of core&lt;/a&gt;)&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;readonly&lt;/code&gt; members&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Default interface methods&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Methods in interface can have an implementation now&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://learn.microsoft.com/en-us/archive/msdn-magazine/2019/may/csharp-8-0-pattern-matching-in-csharp-8-0&quot;&gt;Pattern matching enhancements&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression&quot;&gt;&lt;code&gt;switch&lt;/code&gt; expression&lt;/a&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Property patterns&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Y is 100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Tuple patterns&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bird&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;It's a Bird&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Positional patterns&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;It's a square&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-reference-types&quot;&gt;Nullable reference types&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Aka non-nullable &lt;code&gt;Person&lt;/code&gt; and nullable &lt;code&gt;Person?&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;using&lt;/code&gt; declarations&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Don&amp;#8217;t require braces, variable is disposed at the end of the scope&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Static local functions&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;await foreach&lt;/code&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Indices and ranges&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;..&lt;/code&gt;, &lt;code&gt;start..&lt;/code&gt;, &lt;code&gt;..end&lt;/code&gt;, &lt;code&gt;^start..&lt;/code&gt; etc.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Null-coalescing assignment&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;??=&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Enhancement of interpolated verbatim strings&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;$@&lt;/code&gt; combination is still allowed but now also the &lt;code&gt;@$&lt;/code&gt; order.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;f-4-7&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#f-4-7&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#f-4-7&quot;&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-f-4-7/&quot;&gt;F# 4.7&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-4-8&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-4-8&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-4-8&quot;&gt;&lt;a href=&quot;https://github.com/microsoft/dotnet/blob/main/releases/net48/README.md&quot;&gt;4.8&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;August 2019&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The final framework (still stuck at &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/standard/net-standard?tabs=net-standard-2-0&quot;&gt;.NET Standard 2.0&lt;/a&gt; &amp;#8658; 32,638 of the 37,118 APIs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C# &amp;#8656; 7.3&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-core-2-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-core-2-2&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-core-2-2&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/2.2/2.2.0/2.2.0.md&quot;&gt;Core 2.2&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;December 2018&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c7-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c7-3&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c7-3&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-73&quot;&gt;C#7.3&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c7-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c7-2&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c7-2&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-72&quot;&gt;C#7.2&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-core-2-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-core-2-1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-core-2-1&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/2.1/2.1.0.md&quot;&gt;Core 2.1&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;August 2021&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;May 2018&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-core-2-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-core-2-0&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-core-2-0&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/2.0/2.0.0.md&quot;&gt;Core 2.0&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;August 2017&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/standard/net-standard?tabs=net-standard-2-0#select-net-standard-version&quot;&gt;.NET Standard 2.0&lt;/a&gt; &amp;#8658; 32,638 of the 37,118 APIs)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c7-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c7-1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c7-1&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-70&quot;&gt;C#7.1&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;async&lt;/code&gt; Main method&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Default literal expressions&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Inferred tuple element names&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Pattern matching on generic type parameters&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-4-7&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-4-7&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-4-7&quot;&gt;&lt;a href=&quot;https://github.com/microsoft/dotnet/tree/main/releases/net47&quot;&gt;4.7&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;June 2017&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/standard/net-standard?tabs=net-standard-2-0&quot;&gt;.NET Standard 2.0&lt;/a&gt; &amp;#8658; 32,638 of the 37,118 APIs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio 2017&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c7&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c7&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c7&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-70&quot;&gt;C#7&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Out variables&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GetEmployeeDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmployeeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Tuples and deconstruction&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post office&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Pattern matching&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Via &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/is&quot;&gt;&lt;code&gt;is&lt;/code&gt; operator&lt;/a&gt; in &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt; statements.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Local functions&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Methods nested in other members&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Expanded expression bodied members&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Ref locals&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Ref returns&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Discards&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Use an underscore when you don&amp;#8217;t need the variable:&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCityInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cityName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Binary Literals and Digit Separators&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binaryLiteral&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b_0010_1010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_456_789&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Throw expressions&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Please supply at least one argument.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-core-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-core-1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-core-1&quot;&gt;&lt;a href=&quot;https://github.com/dotnet/core/blob/main/release-notes/1.0/1.0.0.md&quot;&gt;Core 1&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;June 2016&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/standard/net-standard?tabs=net-standard-1-6&quot;&gt;.NET Standard 1.6&lt;/a&gt; &amp;#8658; 13,501 of the 37,118 APIs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cross-platform: Runs on Windows, macOS and Linux.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-4-6&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-4-6&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-4-6&quot;&gt;&lt;a href=&quot;https://github.com/microsoft/dotnet/tree/main/releases/net46&quot;&gt;4.6&lt;/a&gt; LTS&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LTS until&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;January 2027&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;July 2015&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio 2015&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Roslyn v1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c6&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c6&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c6&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-60&quot;&gt;C#6&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Static imports&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Exception filters&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Auto-property initializers&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Default values for getter-only properties&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Expression bodied members&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DisplayName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Null propagator&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;?.&lt;/code&gt; and &lt;code&gt;?[]&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï String interpolation&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Hello &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï &lt;code&gt;nameof&lt;/code&gt; operator&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Index initializers&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexableClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Await in catch/finally blocks&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// something that throws&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// using await in catch block&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;f-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#f-4&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#f-4&quot;&gt;F# 4&lt;/a&gt;&lt;/h3&gt;

&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;vb-14&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vb-14&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#vb-14&quot;&gt;VB 14&lt;/a&gt;&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-4-5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-4-5&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-4-5&quot;&gt;&lt;a href=&quot;https://github.com/microsoft/dotnet/tree/main/releases/net45&quot;&gt;4.5&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2012&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CLR 4.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio 2012&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;framework&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#framework&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#framework&quot;&gt;Framework&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Background just-in-time (JIT) compilation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c5&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c5&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-50&quot;&gt;C#5&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Asynchronous members aka &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Caller info attributes&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TraceMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerMemberName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceFilePath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallerLineNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLineNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-4-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-4-0&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-4-0&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies#net-framework-4&quot;&gt;4&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2010&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CLR 4.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio 2010&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;framework-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#framework-2&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#framework-2&quot;&gt;Framework&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Background garbage collection&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Code Contracts&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Dynamic Language Runtime&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Windows Presentation Foundation (WPF) 4&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Adding amongst other things DataGrid, DatePicker, and Calendar controls.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c4&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c4&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-40&quot;&gt;C#4&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Dynamic binding&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Named/optional arguments&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;nf&quot;&gt;ExampleMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionalint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// where&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionalint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Generic covariant and contravariant&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Implicit or explicit covariant &lt;code&gt;out&lt;/code&gt; and contravariant &lt;code&gt;in&lt;/code&gt; keyword.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Embedded interop types&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Eases the deployment pain of creating COM interop assemblies&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-3-5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-3-5&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-3-5&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies#net-framework-35&quot;&gt;3.5&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CLR 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;framework-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#framework-3&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#framework-3&quot;&gt;Framework&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï WCF and WF integration&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Windows Communication Foundation.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-3-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-3-0&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-3-0&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies#net-framework-30&quot;&gt;3&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2007&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CLR 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio 2008&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;framework-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#framework-4&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#framework-4&quot;&gt;Framework&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Windows Presentation Foundation&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Windows Communication Foundation&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Windows Workflow Foundation&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Windows CardSpace&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;An identity selector app.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c3&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c3&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-30&quot;&gt;C#3&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Auto-implemented properties&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Implicitly typed local variables&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Anonymous types&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;108&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that v has no type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Query expressions aka LINQ&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Lambda expressions&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Expression trees&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Extension methods&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Partial methods&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnSomethingHappened&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Object and collection initializers&lt;/dt&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-2-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-2-0&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-2-0&quot;&gt;2&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2005&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CLR 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio 2005&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;framework-5&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#framework-5&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#framework-5&quot;&gt;Framework&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Debugger edit and continue&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Improved scalability and performance&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï ClickOnce deployment&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï In ASP.NET 2.0, new controls and support for a broad array of browsers&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï 64-bit support&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;For the first time.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c02&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c02&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c02&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-20&quot;&gt;C#02&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Generics&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Partial types&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Anonymous methods&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Iterators&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Covariance and contravariance&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Implicit reference conversion for array types and method groups.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Nullable value types&lt;/dt&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;‚ûï Null-coalescing operator&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;??&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;net-1-0&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#net-1-0&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#net-1-0&quot;&gt;1&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;released&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-right valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2002&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CLR 1.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c1&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#c1&quot;&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-10-1&quot;&gt;C#1&lt;/a&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term=".net" /><summary type="html">The following list tracks the stable (not incubating or in preview) feature changes I deemed most noteworthy.</summary></entry><entry><title type="html">Structure-cementing tests and how to avoid them 1/3</title><link href="https://richargh.de/posts/Structure-Cementing-Tests-1" rel="alternate" type="text/html" title="Structure-cementing tests and how to avoid them 1/3" /><published>2024-11-09T00:00:00+00:00</published><updated>2024-11-09T00:00:00+00:00</updated><id>https://richargh.de/posts/Structure-Cementing-Tests-1</id><content type="html" xml:base="https://richargh.de/posts/Structure-Cementing-Tests-1">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;part-1-building-a-testdsl&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#part-1-building-a-testdsl&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#part-1-building-a-testdsl&quot;&gt;Part 1 - Building a TestDsl&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tests should react to behavioral changes but be insensitive to structural changes. We call tests that do not fulfill the second condition &lt;strong&gt;structure-cementing&lt;/strong&gt;. They make it difficult or even impossible to change the structure and architecture. Teams to whom this happens test and improve less code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the right approach and a TestDsl, however, we can completely avoid cementation and write tests that turn from integration tests to unit tests after changing &lt;strong&gt;just one line&lt;/strong&gt; of test code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-two-modes-of-development&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-two-modes-of-development&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#the-two-modes-of-development&quot;&gt;The two modes of development&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we change behavior, we should have to change tests. When we restructure code (add, rename or remove methods, classes, parameters or fields) we should not have to change the tests. Both conditions are essential because agile developers are constantly jumping back and forth between the two modes &lt;em&gt;change behavior&lt;/em&gt; and &lt;em&gt;change structure&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A failing test forces us to jump to the change behavior mode to get it green again. When we get the test green we jump back to change structure mode. The green test now provides the safety net we need to change structure safely. Any time we change the structure (aka refactor) the tests tell us if we did it without changing behavior (&lt;a href=&quot;#fig:structure-behavior&quot;&gt;see figure&lt;/a&gt;). The same applies if we write our tests after the implementation, then the transition between the modes is just not quite as pronounced.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;fig:structure-behavior&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/posts/structure-cementing-tests/part1/Structure-Behavior.png&quot; alt=&quot;A picture showing how we go from changing structure to changing behavior with failling and passing tests&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. The two development modes, loosely based on Kent Beck&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Changing behavior&lt;/strong&gt; is of course very risky, because a desired change in behavior can also bring with it an undesirable one. So most of the time we want to spend in &lt;strong&gt;change structure&lt;/strong&gt; mode and use techniques like &lt;em&gt;preparatory refactoring&lt;/em&gt; &lt;a href=&quot;#preparatory-refactoring&quot;&gt;[1]&lt;/a&gt; that make our behavior change as simple and manageable as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, this also requires tests that allow structural changes and do not cement them. Such tests allow us to proceed in very small and manageable steps. A difficult change is first prepared with 10 to 20 ‚Äúr‚Äù (refactor) commits in order to then make a very small ‚ÄúF‚Äù (feature) commit. The commit format is Arlo&amp;#8217;s Commit Notation &lt;a href=&quot;#arlos-commit&quot;&gt;[2]&lt;/a&gt;, because this models the risk of the commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When faced with a hard change, first make it easy (warning, this may be hard), then make the easy change.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Kent Beck [3]
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if the structure is cemented, then not only are structural but also feature-related behavioral changes more difficult. This is because we no longer build features where they make sense, but where they are easier to integrate. As a result, the code becomes increasingly confusing. At the beginning, you can no longer find code, it ends up in the simplest place, not the most sensible one. Later on, there are more and more unexpected dependencies, more and more unknown unknowns. We change one place and this leads to a behavior change in a completely different place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The structure-cementing tests have destroyed maintainability. Or we have deleted them and caught regressions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tests are structure-cementing in two ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;through redundancy: tests use the same structure in several places. The more often the same structure (class, method) is required and the more excessively mocked, the more the design is cemented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by testing at the wrong level: we test unstable elements and not modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In part 1 of this article series, we look at how we can avoid structure-cementation through redundancy with a TestDsl, in &lt;a href=&quot;Structure-Cementing-Tests-2&quot;&gt;part 2&lt;/a&gt; we explain the concepts of the Dsl in more detail and part 3 deals with the correct test levels.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-initial-test&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-initial-test&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#the-initial-test&quot;&gt;The initial test&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can see the cementation through redundancy in &lt;a href=&quot;#lst:initialer-test&quot;&gt;Initial test&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:initialer-test&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Initial test&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bookId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Refactoring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Martin Fowler&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CAN_RENT_BOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;roleId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Renter&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;u&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alex Mack&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryBooksDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryPermissionsDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryRolesDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryUsersDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;
    &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentingService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClockDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/4.png&quot; alt=&quot;4&quot;&gt;
    &lt;span class=&quot;c1&quot;&gt;// when&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rentBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/5.png&quot; alt=&quot;5&quot;&gt;
    &lt;span class=&quot;c1&quot;&gt;// then&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isRented&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;The basis for most of our tests are, in this example, books. Therefore, most of our tests instantiate at least one book and with each redundant instantiation we cement the structure of book more and more, since a change would result in adjustments in hundreds of tests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;The repositories follow the naming convention &lt;code&gt;+{implementation}+{name of managed entity with plural s}Double&lt;/code&gt;. The &lt;em&gt;Double&lt;/em&gt; postfix indicates that this is a test double &lt;a href=&quot;#xunit-test-double&quot;&gt;[4]&lt;/a&gt; located in src/testFixtures (or src/test). The postfix is not necessary, but it makes finding all created doubles very convenient.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;&lt;/td&gt;
&lt;td&gt;Our code to be tested needs to load the books from the repository, so they must also be stored there first. How this is done is actually an irrelevant implementation detail for the test. However, redundancy in several tests cements this. It also makes the test unnecessarily long.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/4.png&quot; alt=&quot;4&quot;&gt;&lt;/td&gt;
&lt;td&gt;The more often we instantiate the &lt;code&gt;RentingService&lt;/code&gt;, the less interest we have in changing its dependencies. The dependencies of our service are cemented.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/5.png&quot; alt=&quot;5&quot;&gt;&lt;/td&gt;
&lt;td&gt;The method whose behavior we actually want to test. Cementing the structure of this method with multiple tests is a tradeoff we want to make because this time we get something back: Feedback. Feedback on whether the method is pleasant and logical to use.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the test smell ‚Äústructure-cementing‚Äù, this test has a few other problems:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;long test: there is a lot to read and therefore many potentially hidden errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;irrelevant details: Does it have to be a specific book or is any book possible? Do the fields have to have the specified values for the test to be successful?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will therefore refactor the test in several steps and work our way towards the final TestDsl [&lt;a href=&quot;#lst:testdsl-complete-test-w-extension&quot;&gt;Complete test with TestDsl Extension&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-refactoring-factory-methods&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1-refactoring-factory-methods&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#1-refactoring-factory-methods&quot;&gt;1. Refactoring - Factory Methods&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can break the redundancy and focus tests by no longer instantiating objects directly, but using factory methods [&lt;a href=&quot;#lst:factory-methods&quot;&gt;Factory Methods&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:factory-methods&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Factory Methods&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makePermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CAN_RENT_BOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryBooksDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// remaining Test&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bookId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Refactoring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Martin Fowler&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this small example this is fine, but we quickly run into many problems with this approach (which is also known as the object-mother &lt;a href=&quot;#object-mother&quot;&gt;[5]&lt;/a&gt; pattern):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;either each new use case gets a new method (&lt;code&gt;makeBook()&lt;/code&gt;, &lt;code&gt;makeExpensiveBook()&lt;/code&gt; etc.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or the method gets dozens of optional parameters without it being clear which parameters are dependent on each other.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This does not mean that factory methods should not be used. Especially when introducing new structures, factory methods are great because we can create them directly in the test class where we need them. However, if we are more sure about our structure, we should first use the &lt;code&gt;Builder&lt;/code&gt; from the next section [&lt;a href=&quot;#lst:entity-test-builder&quot;&gt;Builder Methods&lt;/a&gt;] within the factory method and then inline it with our refactoring tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-refactoring-simple-builder&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-refactoring-simple-builder&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#2-refactoring-simple-builder&quot;&gt;2. Refactoring - Simple Builder&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of the factory method or the object-mother pattern, we prefer to use a builder [&lt;a href=&quot;#lst:entity-test-builder&quot;&gt;Builder Methods&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:entity-test-builder&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Builder Methods&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PermissionBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CAN_RENT_BOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPermissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryBooksDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// remaining Test&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you call the &lt;code&gt;build()&lt;/code&gt; method directly, the entity is assigned default values. With the &lt;code&gt;withX()&lt;/code&gt; methods, we can adapt the default values to our specific test if necessary. We are therefore much more flexible than with the Factories/Object Mother pattern, because not every case needs its own method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the builder, we have also redirected the redundant dependencies to a test-specific abstraction [&lt;a href=&quot;#fig:structure-cement-init&quot;&gt;Cementing structure by init&lt;/a&gt;]. We now only have to make changes to the structure of the entity in the builder, not in n tests. We can maintain the structural changes in the builder because we are protected by the tests that already use the builder. If existing tests become red, we have broken something.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;fig:structure-cement-init&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/posts/structure-cementing-tests/part1/Structure-cementing-via-init.png&quot; alt=&quot;A picture showing&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Cementing structure by init&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to flexible test setup and avoiding the cementing of structure, such a &lt;code&gt;Builder&lt;/code&gt; offers us a few more advantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;the test &lt;strong&gt;no longer mentions irrelevant details&lt;/strong&gt;. The above test shows us that it needs any book and not a specific one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the builder highlights &lt;strong&gt;essential differences&lt;/strong&gt; between the tests. By using the &lt;code&gt;with()&lt;/code&gt; method, we see that the user in the test absolutely needs the &lt;code&gt;CAN_RENT_BOOK&lt;/code&gt; permission.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in the builder we have a unique place to store technically meaningful default values [&lt;a href=&quot;#lst:builder-value-example&quot;&gt;Entity-TestBuilder&lt;/a&gt;]. Practical documentation for developers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:builder-value-example&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Entity-TestBuilder&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookBuilder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BookId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Refactoring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Martin Fowler&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Instant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdOn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BookBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ids&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BookBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalTestClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalTestIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/4.png&quot; alt=&quot;4&quot;&gt;
        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;img src=&quot;./images/icons/callouts/5.png&quot; alt=&quot;5&quot;&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;Useful defaults that are representative for the production are stored here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;We already design the builder so we can enter the two main sources of non-deterministic tests (time and random values) from outside.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;&lt;/td&gt;
&lt;td&gt;With the TestDsl refactoring, this parameterless constructor is omitted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/4.png&quot; alt=&quot;4&quot;&gt;&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;with()&lt;/code&gt; method speeds up the writing of the initial builder. However, you then have to get used to the fact that the builder has &lt;em&gt;public&lt;/em&gt; fields. This is a trade-off that can be made for tests. The specific &lt;code&gt;withX()&lt;/code&gt; are more flexible because they can be overloaded though.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/5.png&quot; alt=&quot;5&quot;&gt;&lt;/td&gt;
&lt;td&gt;As an alternative to the generic &lt;code&gt;with()&lt;/code&gt;, you can introduce field-specific &lt;code&gt;withX()&lt;/code&gt; methods below.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, we are not finished yet, because the combination of permission, role and user can be modeled even more strongly and the test can be further focused.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-refactoring-combo-builder&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#3-refactoring-combo-builder&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#3-refactoring-combo-builder&quot;&gt;3. Refactoring - Combo Builder&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We introduce the concept of the &lt;em&gt;Combo&lt;/em&gt; Builder [&lt;a href=&quot;#lst:combo-test-builder-usage&quot;&gt;Using the ComboBuilder&lt;/a&gt;] so that we can build several separately stored objects in a coordinated manner.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:combo-test-builder-usage&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using the ComboBuilder&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserComboBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasPermissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CAN_RENT_BOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Combo includes:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// var permissions = userCombo.permissions();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   var role = userCombo.role();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   var user = userCombo.user();&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryBooksDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// remaining Test&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To keep the complexity of the combo builder low, it only ever builds standard cases [&lt;a href=&quot;#lst:combo-test-builder-design&quot;&gt;Entity-ComboBuilder&lt;/a&gt;]. For more difficult and atypical situations, e.g. if a user has several roles, the individual builders of permission, role and user are used again. This is important because all the special cases will create a lot of unmaintainable code. The rule of thumb is that a builder should never contain &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:combo-test-builder-design&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Entity-ComboBuilder&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserComboBuilder&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// combination fields&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserCombo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withPermissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserBundleBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasPermissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PermissionCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissionCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;permissionCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the builder has already streamlined the test considerably. However, we still have the implementation detail of the repositories. We still need to store created entities in repositories and the test needs to know how to do this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-refactoring-testdsl&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#4-refactoring-testdsl&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#4-refactoring-testdsl&quot;&gt;4. Refactoring - TestDsl&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we introduce the &lt;a href=&quot;#lst:testdsl-teststate&quot;&gt;TestState&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:testdsl-teststate&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Using the TestState&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CAN_RENT_BOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryBooksDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryPermissionsDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryRolesDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InMemoryUsersDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentingService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClockDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// WHEN + THEN&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;The TestState is a class that knows all builders.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;Build tasks are always delegated to the already written builders.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At first glance, we only gain some compactness: &lt;code&gt;xyzBuilder()&lt;/code&gt; no longer needs to be instantiated and we don&amp;#8217;t need a &lt;code&gt;.build()&lt;/code&gt; method. Behind the scenes, however, we have gained much more. The &lt;code&gt;TestState&lt;/code&gt; is now a central point that recognizes all created entities. We can therefore ask the state to store all created entities in the repositories and streamline our test even further [&lt;a href=&quot;#lst:testdsl-floor&quot;&gt;Saving state to the floor&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:testdsl-floor&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Saving state to the floor&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// contains the floor that the application is build on&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CAN_RENT_BOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentingService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;
    &lt;span class=&quot;c1&quot;&gt;// WHEN + THEN&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;With this call, we save &lt;code&gt;book&lt;/code&gt;, &lt;code&gt;permission&lt;/code&gt;, &lt;code&gt;role&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt; in the respective repositories. Theoretically, the call to &lt;code&gt;a.book();&lt;/code&gt; could already have saved the book in the &lt;code&gt;BookRepository&lt;/code&gt;. However, the &lt;code&gt;saveTo()&lt;/code&gt; makes saving more explicit and also offers the flexibility to create entities that do not automatically end up in repositories.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;We group all &lt;code&gt;Ports&lt;/code&gt; into the outside world in the so-called &lt;code&gt;Floor&lt;/code&gt;, the floor on which our application stands. A repository is such a &lt;code&gt;Port&lt;/code&gt;, just like &lt;code&gt;Clock&lt;/code&gt; or an external &lt;code&gt;Client&lt;/code&gt;. The &lt;em&gt;Floor&lt;/em&gt; allows us to flexibly control how our &lt;em&gt;testee&lt;/em&gt; communicates with the outside world in tests. We can &lt;strong&gt;pull the floor out from under the feet of our application in tests and set up a much more testable floor&lt;/strong&gt;. In the &lt;em&gt;ports &amp;amp; adapters architecture&lt;/em&gt; &lt;a href=&quot;#ports-and-adapters&quot;&gt;[6]&lt;/a&gt;, the &lt;code&gt;floor&lt;/code&gt; is synonymous with the &lt;em&gt;driven&lt;/em&gt; but not the &lt;em&gt;driving&lt;/em&gt; ports. Since it is easy to overlook whether something is &lt;em&gt;driven&lt;/em&gt; or &lt;em&gt;driving&lt;/em&gt;, the terms were out of the question. &lt;code&gt;Floor&lt;/code&gt; was chosen as an identifier because it is short and thus provides an analogy for software &lt;s&gt;architects&lt;/s&gt; gardeners who take care of the &lt;em&gt;Forest&lt;/em&gt; &lt;code&gt;Floor&lt;/code&gt;, the &lt;em&gt;Forest&lt;/em&gt; &lt;code&gt;Canopy&lt;/code&gt; and the forest. Alternative names for &lt;em&gt;driven&lt;/em&gt; (=outcomes) or &lt;em&gt;driving&lt;/em&gt; (=triggers) &lt;code&gt;Port&lt;/code&gt; were not known at the time.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;&lt;/td&gt;
&lt;td&gt;We made the &lt;code&gt;Floor&lt;/code&gt; part of our production code. To instantiate service classes, you only ever need the &lt;code&gt;Floor&lt;/code&gt; [&lt;a href=&quot;#lst:first-class-floor&quot;&gt;RentingServices extracts only required dependencies&lt;/a&gt;] and no longer have to write the concrete dependencies.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simplify the dependency management we pass floor directly to the constructor of our production services [&lt;a href=&quot;#lst:first-class-floor&quot;&gt;RentingServices extracts only required dependencies&lt;/a&gt;]. We don&amp;#8217;t have to do this to utilize the TestDsl. Alternatively, we could have left the constructor of the service as it is and written a &lt;code&gt;configureRentingService(floor)&lt;/code&gt; method for tests that assigns dependencies from the &lt;code&gt;Floor&lt;/code&gt;. Both ways avoid the structure cementation of the &lt;code&gt;RentingService&lt;/code&gt;. If we were to use an &lt;em&gt;DI-Container&lt;/em&gt; like Spring to instantiate the service, we would have the same advantage. However, many of these containers make tests slower due to their startup overhead and make test parallelization more difficult due to context caching, which is why they are not a good choice for unit tests. In general we should write unit tests without such containers. This recommendation is also shared by the Spring Framework &lt;a href=&quot;#spring-2-unit-tests&quot;&gt;[7]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:first-class-floor&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;RentingServices extracts only required dependencies&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentingService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// etc.&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RentingService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// etc.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To ensure that the tests are isolated from each other, we instantiate TestState and Floor for each test [&lt;a href=&quot;#lst:testdsl-init-before-each&quot;&gt;Instantiate TestDsl in BeforeEach&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:testdsl-init-before-each&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Instantiate TestDsl in BeforeEach&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@BeforeEach&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestDsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unitFloor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;testState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The floor itself is simply an interface that recognizes all dependencies [&lt;a href=&quot;#lst:floor&quot;&gt;Floor of the TestDsl&lt;/a&gt;]. The unit test implementation &lt;code&gt;unitFloor()&lt;/code&gt; then returns &lt;em&gt;InMemoryDoubles&lt;/em&gt; when the methods are called.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:floor&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Floor of the TestDsl&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Books&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// etc.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sum of these changes is that our test looks very compact [&lt;a href=&quot;#lst:testdsl-complete-test-with-before-each&quot;&gt;Complete test with TestDsl&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:testdsl-complete-test-with-before-each&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Complete test with TestDsl&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@BeforeEach&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestDsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unitFloor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;testState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CAN_RENT_BOOK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentingService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// WHEN&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rentBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// THEN&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isRented&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have already come a long way with this refactoring:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;we were able to map the setup for our test in just 4 lines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we were able to write the entire setup in the same place as our test. You can see at a glance which preconditions the test requires and you don&amp;#8217;t have to scroll or open another file to understand the context.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we were able to hide irrelevant details (any &lt;code&gt;book&lt;/code&gt; and any &lt;code&gt;user&lt;/code&gt; will do) and highlight relevant ones (the &lt;code&gt;user&lt;/code&gt; needs the &lt;code&gt;CAN_RENT_BOOK&lt;/code&gt; permission).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we have a standardized way to do the test setup for all tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we were able to avoid a structure-cementing test setup.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, we can still make one improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-refactoring-extension&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#5-refactoring-extension&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#5-refactoring-extension&quot;&gt;5. Refactoring - Extension&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far we have to write redundant initialization code for the TestDsl in the &lt;code&gt;@BeforeEach&lt;/code&gt; block in every test. If we are using JUnit5, we can make it reusable for multiple tests with an annotation [&lt;a href=&quot;#lst:testdsl-complete-test-w-extension&quot;&gt;Complete test with TestDsl Extension&lt;/a&gt;].&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:testdsl-complete-test-w-extension&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Complete test with TestDsl Extension&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Unit&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_be_able_to_rent_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
    &lt;span class=&quot;c1&quot;&gt;// given&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CAN_RENT_BOOK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RentingService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// WHEN&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rentBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userCombo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// THEN&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isRented&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;Our &lt;code&gt;@BeforeEach&lt;/code&gt; is completely merged into the annotation &lt;code&gt;@Unit&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;The annotation turns the two parts of our Dsl into parameters of the test.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new annotation registers a JUnit 5 extension &lt;a href=&quot;#junit5-user-guide-extension-model&quot;&gt;[8]&lt;/a&gt;. Such an extension can react to the test LifeCycle by implementing special interfaces. We are only interested in &lt;code&gt;ParameterResolver&lt;/code&gt; because it resolves the parameters &lt;code&gt;TestState&lt;/code&gt; and &lt;code&gt;Floor&lt;/code&gt; [&lt;a href=&quot;#lst:testdsl-extension&quot;&gt;resolveParameter() of the TestDsl extension&lt;/a&gt;] that our test requires.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;lst:testdsl-extension&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;resolveParameter() of the TestDsl extension&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;METHOD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;junit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jupiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ExtendWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UnitTestExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnitTestExtension&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterResolver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ParameterContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ExtensionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extensionContext&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterResolutionException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storeNamespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRequiredTestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extensionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOrComputeIfAbsent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;UNIT_TEST_DSL&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testDslOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unitFloor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/4.png&quot; alt=&quot;4&quot;&gt;
            &lt;span class=&quot;nc&quot;&gt;UnitTestDsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;img src=&quot;./images/icons/callouts/5.png&quot; alt=&quot;5&quot;&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;testState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ParameterResolutionException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;With &lt;code&gt;@ExtendWith&lt;/code&gt; we connect annotation with the extension code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;A normal Java annotation. The name is freely selectable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;&lt;/td&gt;
&lt;td&gt;Extensions must always save state in a store. This is unique per namespace.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/4.png&quot; alt=&quot;4&quot;&gt;&lt;/td&gt;
&lt;td&gt;This creator function is used if no Dsl has yet been created for the test. The &lt;code&gt;resolveParameter()&lt;/code&gt; method is called exactly twice per test. Once for the &lt;code&gt;TestState&lt;/code&gt; and once for the &lt;code&gt;Floor&lt;/code&gt;. We use &lt;code&gt;getOrComputeIfAbsent()&lt;/code&gt; so that the same instance of the Dsl is returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/5.png&quot; alt=&quot;5&quot;&gt;&lt;/td&gt;
&lt;td&gt;We use the parameterType to recognize what is to be returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the UnitTest extension shown here, we can of course write another extension, the &lt;code&gt;IntegrationTestExtension&lt;/code&gt;. This looks the same, but uses &lt;code&gt;(key) &amp;#8594; testDslOf(integrationFloor())&lt;/code&gt; as the creator function. The &lt;code&gt;TestState&lt;/code&gt; remains the same but the implementation of the &lt;code&gt;Floor&lt;/code&gt; is an &lt;code&gt;IntegrationFloor&lt;/code&gt; which does not contain &lt;code&gt;InMemoryDoubles&lt;/code&gt; but &lt;code&gt;Jpa&lt;/code&gt; repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the &lt;code&gt;TestState&lt;/code&gt; only knows the &lt;code&gt;Floor&lt;/code&gt; interface and not the concrete implementation, we can now make any test by changing &lt;strong&gt;a single annotation&lt;/strong&gt; from an &lt;code&gt;@Integration&lt;/code&gt; to an &lt;code&gt;@Unit&lt;/code&gt; test. This property of the TestDsl is particularly helpful for legacy code, because this code often contains a lot of domain logic in the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In legacy code you can start by writing  integration tests to catch regressions. Once you have pulled the domain logic out of the database and into the application code, you can convert the tests you wrote at the start into unit tests by just changing the annotation. Without a TestDsl, you would have to completely rewrite them at unit level, which is &lt;strong&gt;why many teams do not do this, remain stuck with slow integration tests and cannot iterate much faster&lt;/strong&gt; despite increasing test coverage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;alternatives&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#alternatives&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#alternatives&quot;&gt;Alternatives&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Testing without mocks‚Äù &lt;a href=&quot;#testing-without-mocks&quot;&gt;[9]&lt;/a&gt; follows a similar approach to TestDsl. With this approach, however, you have to modify your production code more because we place special test doubles, the so-called ‚Äúnullables‚Äù &lt;a href=&quot;#testing-without-mocks-nullables&quot;&gt;[10]&lt;/a&gt;, directly in the production code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The refactoring tools of our IDE can also prevent certain forms of structure-cementation from our initial test [&lt;a href=&quot;#lst:initialer-test&quot;&gt;Initial test&lt;/a&gt;]. ‚ÄúChange Signature‚Äù is the most helpful refactoring against structure cementing. It works great when you need to remove constructor parameters. Adding them, however, is only useful if the default parameter inserted in tests are very simple and have no dependency on other state in the test. These refactoring tools can also create bugs, when default values are not only set in the test code, but also in the production code, and you forget to change them. It is clear that the Dsl-&lt;code&gt;Builder&lt;/code&gt; are more flexible than the change signature refactoring and are better at preventing entity cementation. The same applies to the &lt;code&gt;TestState&lt;/code&gt; which allows more flexible customization of the &lt;code&gt;Ports&lt;/code&gt;. Refactoring tools are therefore not a replacement, but a supplement for the TestDsl.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The refactoring framework Open Rewrite &lt;a href=&quot;#open-rewrite&quot;&gt;[11]&lt;/a&gt; looks promising, but seems to be designed more for framework migrations. It should therefore also be more of a supplement to TestDsl, which focuses on domain logic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;interim-conclusion&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#interim-conclusion&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#interim-conclusion&quot;&gt;Interim conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the TestDsl we can make our test setup:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;standardized for all tests,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;complete (nothing needs to be outsourced),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;compact (although nothing has been outsourced),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;free of irrelevant details,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;with relevant details highlighted,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;readable,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;low-maintenance,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parallelizable,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fast,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and free of structure cementation&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The TestDsl is of course not free. But it is not expensive either. We have to create a foundation with Extension, TestState, Floor and BaseInMemoryDouble. Experience from several JVM and Node projects shows that the maintenance effort is low once this foundation has been laid.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is rather rare that you have to create new entities. You work much more with existing entities and services and restructure them. The initial investment then pays dividends continuously. Since the entire setup is done via the Dsl [&lt;a href=&quot;#fig:testdsl-struktur&quot;&gt;see figure&lt;/a&gt;], only the Dsl is affected by structural changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;fig:testdsl-struktur&quot; class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/posts/structure-cementing-tests/part1/LL-Test-Dsl-Layer.png&quot; alt=&quot;A picture showing&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. The TestDsl is between tests and the structure of the production code&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;#fig:testdsl-struktur&quot;&gt;The figure&lt;/a&gt; also shows what the actual trade-off is that we make with the Dsl: Loss of feedback on our setup. Without Dsl, you notice whether the setup is ‚Äúannoying‚Äù when writing tests. If you have to write a lot of code for testing, you naturally ask yourself whether there is an easier way to do it. There is a natural pressure to improve the structure. This ‚Äúannoying‚Äù setup can now be hidden in the Dsl. It is therefore all the more important to use the Dsl only for the setup, to leave it as dumb as possible, to define as few combo builders as possible and to keep thinking about whether the structure is on the right track when adapting the Dsl.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;outlook&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#outlook&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#outlook&quot;&gt;Outlook&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this part we have seen how to solve structure cementation through redundancy with the TestDsl.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;Structure-Cementing-Tests-2&quot;&gt;part 2&lt;/a&gt;, we will take a closer look at the concepts on which the TestDsl is based. We will go into the design of the builder, how to combine the DSL with &lt;code&gt;@SpringBootTest&lt;/code&gt;, what the difference between a high- and a low-level TestDsl is, how to keep test doubles synchronized with the production code and why the excessive use of mocking frameworks also leads to structure cementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In part 3, we will see how to prevent the other kind structure cementation: testing unstable elements instead of modules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want even more information on the topic, you can view the TestDsl example code on Github &lt;a href=&quot;#test-dsl&quot;&gt;[12]&lt;/a&gt; or watch the presentation on ‚ÄúBeehive Architecture‚Äù &lt;a href=&quot;#beehive-architecture&quot;&gt;[13]&lt;/a&gt; (in üá©üá™), which is also about the TestDsl.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;img src=&quot;./images/icons/note.png&quot; alt=&quot;Note&quot;&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This article was originally published in &lt;a href=&quot;https://www.ijug.eu/de/java-aktuell/zeitschrift/java-aktuell-archiv/detailansicht-java-aktuell/java-aktuell-4-24-java-22/&quot;&gt;Java Aktuell 4/24&lt;/a&gt; in üá©üá™. It is translated and republished here with the magazine&amp;#8217;s permission.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#references&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#references&quot;&gt;References&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;preparatory-refactoring&quot;&gt;&lt;/a&gt;[1] M. Fowler, ‚ÄúAn example of preparatory refactoring.‚Äù 2015. Available: &lt;a href=&quot;https://martinfowler.com/articles/preparatory-refactoring-example.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/articles/preparatory-refactoring-example.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;arlos-commit&quot;&gt;&lt;/a&gt;[2] A. Belshee, ‚ÄúArlo‚Äôs Commit Notation.‚Äù 2018. Available: &lt;a href=&quot;https://github.com/RefactoringCombos/ArlosCommitNotation&quot; class=&quot;bare&quot;&gt;https://github.com/RefactoringCombos/ArlosCommitNotation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;mastering-programming&quot;&gt;&lt;/a&gt;[3] K. Beck, ‚ÄúMastering Programming.‚Äù Available: &lt;a href=&quot;https://tidyfirst.substack.com/p/mastering-programming&quot; class=&quot;bare&quot;&gt;https://tidyfirst.substack.com/p/mastering-programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;xunit-test-double&quot;&gt;&lt;/a&gt;[4] G. Meszaros, ‚ÄúTest Double.‚Äù 2011. Available: &lt;a href=&quot;http://xunitpatterns.com/Test%20Double.html&quot; class=&quot;bare&quot;&gt;http://xunitpatterns.com/Test%20Double.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;object-mother&quot;&gt;&lt;/a&gt;[5] M. Fowler, ‚ÄúObject Mother.‚Äù 2006. Available: &lt;a href=&quot;https://martinfowler.com/bliki/ObjectMother.html&quot; class=&quot;bare&quot;&gt;https://martinfowler.com/bliki/ObjectMother.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;ports-and-adapters&quot;&gt;&lt;/a&gt;[6] 	A. Cockburn, ‚ÄúHexagonal architecture.‚Äù 2005. Available: &lt;a href=&quot;https://alistair.cockburn.us/hexagonal-architecture/&quot; class=&quot;bare&quot;&gt;https://alistair.cockburn.us/hexagonal-architecture/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;spring-2-unit-tests&quot;&gt;&lt;/a&gt;[7] 	T. Spring, ‚ÄúUnit Testing.‚Äù 2006. Available: &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/2.0.4/reference/testing.html#unit-testing&quot; class=&quot;bare&quot;&gt;https://docs.spring.io/spring-framework/docs/2.0.4/reference/testing.html#unit-testing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;junit5-user-guide-extension-model&quot;&gt;&lt;/a&gt;[8] T. JUnit5, ‚ÄúJUnit 5 User Guide - Extension Model.‚Äù Available: &lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/#extensions&quot; class=&quot;bare&quot;&gt;https://junit.org/junit5/docs/current/user-guide/#extensions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;testing-without-mocks&quot;&gt;&lt;/a&gt;[9] J. Shore, ‚ÄúTesting Without Mocks: A Pattern Language.‚Äù 2023. Available: &lt;a href=&quot;https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks&quot; class=&quot;bare&quot;&gt;https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;testing-without-mocks-nullables&quot;&gt;&lt;/a&gt;[10] 	J. Shore, ‚ÄúNullables.‚Äù 2023. Available: &lt;a href=&quot;https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#nullables&quot; class=&quot;bare&quot;&gt;https://www.jamesshore.com/v2/projects/nullables/testing-without-mocks#nullables&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;open-rewrite&quot;&gt;&lt;/a&gt;[11] 	T. Moderne, ‚ÄúLarge-scale automated source code refactoring.‚Äù 2024. Available: &lt;a href=&quot;https://docs.openrewrite.org/&quot; class=&quot;bare&quot;&gt;https://docs.openrewrite.org/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;test-dsl&quot;&gt;&lt;/a&gt;[12] R. Gross, ‚ÄúTestDsl (Avoid structure-cementing Tests).‚Äù 2024. Available: &lt;a href=&quot;https://github.com/Richargh/testdsl&quot; class=&quot;bare&quot;&gt;https://github.com/Richargh/testdsl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;beehive-architecture&quot;&gt;&lt;/a&gt;[13] R. Gross, ‚ÄúBeehive Architecture üá©üá™‚Äù 2023. Available: &lt;a href=&quot;http://richargh.de/talks/#beehive-architecture&quot; class=&quot;bare&quot;&gt;http://richargh.de/talks/#beehive-architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="testing" /><category term="architecture" /><category term="cementing" /><summary type="html">Part 1 - Building a TestDsl</summary></entry><entry><title type="html">JORM (Json Object-Relational Mapping) is not REST</title><link href="https://richargh.de/posts/JORM-is-not-REST" rel="alternate" type="text/html" title="JORM (Json Object-Relational Mapping) is not REST" /><published>2024-08-20T00:00:00+00:00</published><updated>2024-08-20T00:00:00+00:00</updated><id>https://richargh.de/posts/JORM-is-not-REST</id><content type="html" xml:base="https://richargh.de/posts/JORM-is-not-REST">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://martinfowler.com/articles/richardsonMaturityModel.html&quot;&gt;Richardson Maturity Model&lt;/a&gt; is a great model for explaining the basics of building an http Api.
Unfortunately the indexing of its layers (0, 1, 2, 3) suggests that reaching Level 1 is already REST.
That is a problem because it closes people to the decoupling and integration merits that actual REST has and leaves them with an API that can only be described as &lt;strong&gt;JORM&lt;/strong&gt; (Json Object-Relational Mapping): Their API is not designed to solve a problem but to get data from A to B, so the problem can be solved at B.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Service B to solve the problem it needs to make decisions based on state.
That means we have to transfer a lot of state and the resulting json needs a huge schema that needs to stay in sync.
It also means that Service B has to interpret that data in the same way that Service A would, which means code duplication between different services and often different teams, which leads to coupled releases and coupled teams.
This form of coupling is inherent with RPC (remote procedure call)-style Apis and it is something that &lt;strong&gt;REST was designed to solve&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this in mind I present the updated model, &lt;em&gt;Richard&amp;#8217;s Maturity Model&lt;/em&gt; (sorry for the name, couldn&amp;#8217;t resist):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/posts/jorm-is-not-rest/richards-maturity-model.drawio.svg&quot; alt=&quot;Richards Maturity Model&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you think REST, think Hypermedia.
The inventor of REST, Roy Fielding, described the architectural style quite well in his &lt;a href=&quot;https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&quot;&gt;dissertation in 2000&lt;/a&gt;, and explained the point again in 2008 (&lt;a href=&quot;https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&quot;&gt;REST APIs must be hypertext-driven&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;an-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#an-example&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#an-example&quot;&gt;An example&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make this more transparent, let&amp;#8217;s see how JORM and REST differ when we model a bank Api for viewing your account balance and transferring money.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;jorm-style&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jorm-style&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#jorm-style&quot;&gt;JORM-Style&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;GET &lt;a href=&quot;https://cool-bank.com/api/accounts/1234&quot; class=&quot;bare&quot;&gt;https://cool-bank.com/api/accounts/1234&lt;/a&gt; (JORM-Style)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aa-11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ownerId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b2-d2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;balance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;490.00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;currency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EUR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;transactions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aa-11-11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b2-d2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c3-pd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;currency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EUR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2024-08-20T01:23:45.678Z&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s possible the Api is too simplistic but it&amp;#8217;s a good place to start discussing things because this Api is missing some important things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Where can we find further information? Where can we lookup the source and target of the transaction?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What actions are we allowed to take? Can we transfer more money? Can we close the account?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first question is usually addressed by something like &lt;a href=&quot;https://apiblueprint.org/&quot;&gt;Api Blueprint&lt;/a&gt; or &lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenApi&lt;/a&gt; which provides documentation for a human to sift through, guess and finally try if &lt;code&gt;GET /api/users/b2-d2&lt;/code&gt; or &lt;code&gt;GET /api/owners/b2-d2&lt;/code&gt; provides the right data for the source of the transaction.
It would be more convenient and less error-prone if the Account-Representation would tell us where the data is.
It would also make our Api evolvable.
The JORM approach leads to code where URLs are constructed via string concatenation, which means the URLs cannot change.
&lt;a href=&quot;https://youtu.be/pspy1H6A3FM?t=1471&quot;&gt;The URL is in fact the Api&lt;/a&gt;.
If we instead not hard-code anything but just follow links that the server supplies then the server can change them at any time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second question cannot be addressed by JORM in a satisfying way because it always requires code duplication:
If we can and are allowed to withdraw money or close this account is dependent on multiple business rules.
A transaction is always possible unless the account is closed and unless the balance is below zero, but sometimes below zero is also ok but only up to a certain balance and so on.
A client would have to implement the same rules as the server and always keep them in sync lest it allows something that the server rejects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;rest-style&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rest-style&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#rest-style&quot;&gt;REST-Style&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;REST solves these problems, because REST publishes all the possible actions from the current state.
A client can simply look at the list of actions and decide what to do next.
It does not need to know nor care why an action is allowed and thus less information needs to be shared and no duplication occurs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;GET &lt;a href=&quot;https://cool-bank.com/api/accounts/1234&quot; class=&quot;bare&quot;&gt;https://cool-bank.com/api/accounts/1234&lt;/a&gt; (REST-Style, using &lt;a href=&quot;https://github.com/JornWildt/Mason&quot;&gt;Mason Format&lt;/a&gt;)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ownerId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b2-d2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;balance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;490.00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;transactions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b2-d2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c3-pd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2024-08-20T01:23:45.678Z&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;@controls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;self&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cool-bank.com/api/transactions/aa-11-11&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;coolb:view-source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cool-bank.com/api/transactions/b2-d2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;coolb:view-target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cool-bank.com/api/transactions/c3-pd&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;@controls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;self&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cool-bank.com/api/accounts/aa-11&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;coolb:close-account&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;img src=&quot;./images/icons/callouts/4.png&quot; alt=&quot;4&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Close account&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://cool-bank.com/api/accounts/aa-11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DELETE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/1.png&quot; alt=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td&gt;Additional hypermedia elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/2.png&quot; alt=&quot;2&quot;&gt;&lt;/td&gt;
&lt;td&gt;Link to self&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/3.png&quot; alt=&quot;3&quot;&gt;&lt;/td&gt;
&lt;td&gt;Link to source and target of the transaction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;./images/icons/callouts/4.png&quot; alt=&quot;4&quot;&gt;&lt;/td&gt;
&lt;td&gt;The presence of this control means that we are allowed to close the account&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The response is missing the control for transferring money from a source to a target.
It is missing because the account owner is on vacation right now and does not want any transfers.
Or maybe it is missing because the account is closed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We don&amp;#8217;t actually need to know the business reason.
All our client sees is that the control is missing and therefore it cannot do it.
We don&amp;#8217;t need to duplicate why something is not allowed and that means Service A is free to add or remove rules whenever it wants and the client, Service B, just needs to react to the &lt;strong&gt;presence of a control or its absence&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a supremely powerful concept and why the relatively new &lt;strong&gt;REST-style from the year 2000 is better at decoupling teams&lt;/strong&gt; than the older RPC-Style Apis.
The cost is that the services require more protocol knowledge as Oliver Drotbohm &lt;a href=&quot;https://odrotbohm.github.io/2016/04/benefits-of-hypermedia/&quot;&gt;describes&lt;/a&gt;.
If we adapt his drawing so it mentions JORM and REST we get:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/img/posts/jorm-is-not-rest/benefits-of-rest.drawio.svg&quot; alt=&quot;Benefits of REST&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;smart-server-dumb-client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#smart-server-dumb-client&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#smart-server-dumb-client&quot;&gt;Smart Server, Dumb Client&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The client only having protocol knowledge gives us very clear benefits when we design a SPAs (Single-Page Applications) or need to support multiple devices such as iOS or Android.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A priori the client just needs to know the relevant relations, such as &lt;code&gt;&quot;coolb:close-account&quot;&lt;/code&gt;.
The prefix &lt;code&gt;coolb&lt;/code&gt; just means that it is a relation of the domain cool bank.
There are &lt;a href=&quot;https://www.iana.org/assignments/link-relations/link-relations.xhtml&quot;&gt;multiple standardized relations&lt;/a&gt; that the client can use such as &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;prev&lt;/code&gt; for pagination, &lt;code&gt;self&lt;/code&gt; for the resource itself or &lt;code&gt;up&lt;/code&gt; for the parent of a resource.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once a client connects it just need to look for the existence of the &lt;code&gt;&quot;coolb:close-account&quot;&lt;/code&gt; or the &lt;code&gt;&quot;coolb:transfer-money&quot;&lt;/code&gt; to know it should display the buttons for closing or transferring money.
It ignores controls and optional fields that are unfamiliar or renders generic widgets based on the inputs the server requires.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all a lot less code is required for each client, because the server controls the interaction and you have a lot less errors to deal with because your iOS, Android or Web Apps cannot mismatch state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If that seems far-fetched then please consider that you are viewing this post in your browser that allows you to react to arbitrary content without Mozilla, Google, Apple or Microsoft making adaptions in their client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All your browser has is the protocol knowledge and that is enough.
If we design our Apis the same way the web is designed, then we get the same decoupling and scalability benefits that have powered the last 35 years (the web went public in 1991).
This is not surprising because Roy Fielding&amp;#8217;s &lt;a href=&quot;https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&quot;&gt;dissertation&lt;/a&gt;, which defined the REST architectural style, was &lt;strong&gt;defining the core properties of HTTP&lt;/strong&gt; so he knew which changes would benefit the protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What makes HTTP significantly different from RPC is that the requests are directed to resources using a generic interface with standard semantics that can be interpreted by intermediaries almost as well as by the machines that originate services.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Roy Fielding&lt;br&gt;
&lt;cite&gt;http://mamund.com/blog/archives/1107&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-why-of-jorm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-why-of-jorm&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#the-why-of-jorm&quot;&gt;The Why of JORM&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By now it should be clear why REST has clear benefits and why a small but vocal group (so called RESTafarians) take every opportunity to point out that most street-REST is not REST (&lt;a href=&quot;https://www.youtube.com/watch?v=pspy1H6A3FM&quot;&gt;REST: I don&amp;#8217;t Think it Means What You Think it Does&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It seems that this group has switched to using the name Hypermedia and Hypermedia Apis when talking about actual REST though.
&lt;a href=&quot;https://martinfowler.com/bliki/SemanticDiffusion.html&quot;&gt;Semantic diffusion&lt;/a&gt; has taken its toll but since the REST ideas are so great and there is a dissertation describing them, it is worth bringing back the term REST.
For that to work we need a name for the alternative, and since that alternative is close enough to what many object-relational modelling tools give us, the name for the alternative is simply &lt;strong&gt;JORM&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The name encourages discussions.
As soon as you say, &lt;code&gt;&quot;Should we build a JORM or a REST Api?&quot;&lt;/code&gt;, people get curious.
Curiosity alone might be enough to get people to research and spread great concepts like Hypermedia controls.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;should-everyone-adopt-rest&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#should-everyone-adopt-rest&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#should-everyone-adopt-rest&quot;&gt;Should everyone adopt REST?&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now for the real question: should everyone adopt REST over JORM?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;teams-that-own-their-clients&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#teams-that-own-their-clients&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#teams-that-own-their-clients&quot;&gt;Teams that own their clients&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think the sweet spot is when &lt;strong&gt;teams own their server (backend) as well as one or more clients (frontend: SPA, iOS or Android app)&lt;/strong&gt;.
When they adopt REST, they can make their clients significantly dumber and by that not only save a lot of code but also iterate faster because their client is decoupled from their server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;teams-that-dont-own-their-clients&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#teams-that-dont-own-their-clients&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#teams-that-dont-own-their-clients&quot;&gt;Teams that don&amp;#8217;t own their clients&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is less clear for company-wide or even global Apis if REST is a good choice for two reasons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;REST Apis make it very easy to solve problems because the server exposes all allowed actions in the form of Hypermedia Controls.
That however means you have to somehow figure out the &lt;strong&gt;problems your clients want to solve&lt;/strong&gt;.
And then you have to take the time to implement solutions to your clients problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you just expose a lot of state to their outside world, you don&amp;#8217;t have to invest that time.
You do have to support that exposed state for a long time though, lest you lose your clients again, and that might take more time in the long run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second problem is that most clients are not used to the discoverable nature of REST Apis and demand stable URLs.
Even without documentation teams often try to retro-engineer the URLs and when they inevitably change, their clients break, which is what Hyrum&amp;#8217;s Law describes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Hyrum Wright&lt;br&gt;
&lt;cite&gt;https://www.laws-of-software.com/laws/hyrum/&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That however means the Apis cannot evolve as intended which is why &lt;em&gt;solutions&lt;/em&gt; like &lt;a href=&quot;https://blog.ploeh.dk/2020/10/26/fit-urls/&quot;&gt;FIT URLs&lt;/a&gt; are proposed where all your URLs are signed and if you don&amp;#8217;t have the right signature for the URL, you get a &lt;code&gt;404 Not Found&lt;/code&gt;, even though the URL exists.
It forces people to follow links and it&amp;#8217;s worth looking into, to keep your Api evolvable, but why do I have to force people to use REST?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;irony&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#irony&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#irony&quot;&gt;Irony&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;irony&lt;/strong&gt;, noun&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;the use of words to express something other than and especially the opposite of the literal meaning [&amp;#8230;&amp;#8203;]&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; irony&lt;br&gt;
&lt;cite&gt;https://www.merriam-webster.com/dictionary/irony&lt;/cite&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;REST powers the internet and has allowed it to scale for the last 35 years.
It should be perfectly suitable for company or global Apis.
But after freeing ourselves from RPC-SOAP, we unintentionally conditioned ourselves to like RPC-JORM but call it REST.
Whenever we try to rethink our approach, we still go for RPC (&lt;a href=&quot;https://grpc.io/&quot;&gt;grpc&lt;/a&gt;) and sometimes even drop designing solutions altogether to instead offload the problem solving to the client (&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;).
It&amp;#8217;s not that these tools are bad, depending on the use case they might even be a good choice.
It is however strange to compare &lt;strong&gt;REST, an architectural style&lt;/strong&gt;, with a tool, specifically one that implements the RPC architectural style (some &quot;comparisons&quot; are very good at explaining the difference &lt;a href=&quot;https://www.youtube.com/watch?v=vgm_uGmspMI&quot;&gt;&quot;A no nonsense GraphQL and REST comparison&quot; by Phil Sturgeon&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also ironic is that people &quot;in the know&quot; perceive building a REST Api as too difficult when really it&amp;#8217;s very easy to get started.
I&amp;#8217;d like to change this perception and have prepared a small &lt;a href=&quot;/posts/Getting-Started-with-Hypermedia&quot;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="rest" /><category term="jorm" /><category term="api" /><summary type="html">The Richardson Maturity Model is a great model for explaining the basics of building an http Api. Unfortunately the indexing of its layers (0, 1, 2, 3) suggests that reaching Level 1 is already REST. That is a problem because it closes people to the decoupling and integration merits that actual REST has and leaves them with an API that can only be described as JORM (Json Object-Relational Mapping): Their API is not designed to solve a problem but to get data from A to B, so the problem can be solved at B.</summary></entry><entry><title type="html">Naming Guidelines</title><link href="https://richargh.de/posts/Naming-Guidelines" rel="alternate" type="text/html" title="Naming Guidelines" /><published>2020-10-11T00:00:00+00:00</published><updated>2020-10-11T00:00:00+00:00</updated><id>https://richargh.de/posts/Naming-Guidelines</id><content type="html" xml:base="https://richargh.de/posts/Naming-Guidelines">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Programming is a team sport where we use code to send messages of intent to our future selves.
&lt;strong&gt;The messages&lt;/strong&gt; are &lt;strong&gt;the names&lt;/strong&gt; we have assigned to various &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; and other code elements.
The assigned name can then help our future selves figure out the intent of an element and if a new piece of functionality goes here or over there.
Thus naming is inseparable from design.
A well-chosen name is the difference between one hour of &lt;em&gt;&quot;I know exactly what to do&quot;&lt;/em&gt; and days and weeks of rework because &lt;em&gt;&quot;I thought I needed to do this but actually&amp;#8230;&amp;#8203;&quot;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Leon Bambrick
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;True to the above quote I still find namings things very hard.
Fortunately &lt;a href=&quot;https://journal.stuffwithstuff.com/&quot;&gt;Bob Nystrom&lt;/a&gt; has written two great blog posts on the subject: &lt;a href=&quot;https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/&quot;&gt;Long Names are Long&lt;/a&gt; and &lt;a href=&quot;https://journal.stuffwithstuff.com/2009/06/05/naming-things-in-code/&quot;&gt;Naming Things in Code&lt;/a&gt;.
These two describe guidelines for naming which I want to reiterate, extend and sometimes even change.
Most of the stuff I&amp;#8217;ve added are ideas from the community (f.ex. &lt;a href=&quot;https://printhelloworld.de/&quot;&gt;Johannes Seitz&lt;/a&gt;).
I&amp;#8217;m not making any originality vows here :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a future post I&amp;#8217;d also like to take a look at &lt;a href=&quot;https://arlobelshee.com/&quot;&gt;Arlo Belshee&amp;#8217;s&lt;/a&gt; &quot;Naming is a Process&quot; which describes the process of coming up with a good name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;img src=&quot;./images/icons/note.png&quot; alt=&quot;Note&quot;&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you know about even more great articles, books, etc. please consider contacting me using Twitter and the like.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;good-names&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#good-names&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#good-names&quot;&gt;Good Names&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A name has one goal:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It needs to reveal the authors &lt;strong&gt;intention&lt;/strong&gt; (see &lt;a href=&quot;https://www.martinfowler.com/bliki/BeckDesignRules.html&quot;&gt;Kent Beck&amp;#8217;s Four Rules of Simple Design&lt;/a&gt;). Which means:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It needs to be &lt;strong&gt;clear&lt;/strong&gt;: you need to know what the name refers to (&lt;a href=&quot;https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/&quot;&gt;Long Names are Long&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It needs to be &lt;strong&gt;precise&lt;/strong&gt;: you need to know what it does &lt;strong&gt;not&lt;/strong&gt; refer to (&lt;a href=&quot;https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/&quot;&gt;Long Names are Long&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once a name has accomplished its goal, any additional characters are redundant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following guidelines will help us write terse code that communicates intention.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;use-one-word-per-concept&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#use-one-word-per-concept&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#use-one-word-per-concept&quot;&gt;Use one word per concept&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist checklist&quot;&gt;
&lt;ul class=&quot;checklist&quot;&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Use one word per concept.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad (three variations for the same concept: fetching accounts):&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchActiveAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allActiveAccounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retrieveActiveAccountInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Better&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allActiveAccounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omit-words-that-are-obvious-given-a-variables-or-parameters-type&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#omit-words-that-are-obvious-given-a-variables-or-parameters-type&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#omit-words-that-are-obvious-given-a-variables-or-parameters-type&quot;&gt;Omit words that are obvious given a variable‚Äôs or parameter‚Äôs type&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist checklist&quot;&gt;
&lt;ul class=&quot;checklist&quot;&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Don&amp;#8217;t put the type in the variable‚Äôs name&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;integerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nameString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Better&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Pair Numbers and their unit (5 meter, 20 seconds, 5 ‚Ç¨) so you can never pass seconds to a method that expects milliseconds (length class in the appendix)&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lengthInMillis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Better&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Express concepts with types and avoid &lt;a href=&quot;https://wiki.c2.com/?StringlyTyped&quot;&gt;stringly typed&lt;/a&gt; code.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;zipCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Better:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;zipCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ZipCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Name collections not by their type but what&amp;#8217;s in them using the (forced) plural form.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;personList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;furnitureList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Furniture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dogPersonHashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Better&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;furnitures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Furniture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dogOwners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Don‚Äôt add the argument name to function name. It&amp;#8217;s redundant since our type system and IDE tell us everything we need to know.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeTableCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Better&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This also makes the call easier to read: &lt;code&gt;merge(cells)&lt;/code&gt; vs &lt;code&gt;mergeTableCells(tableCells)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#10003; Only describe the return in the name if there are identical functions that return different types.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;countInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Better:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valueAsInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valueAsFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omit-words-that-dont-disambiguate-the-name&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#omit-words-that-dont-disambiguate-the-name&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#omit-words-that-dont-disambiguate-the-name&quot;&gt;Omit words that don‚Äôt disambiguate the name&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Take a look at &lt;code&gt;recentlyUpdatedAnnualSalesBid&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Are there updated annual sales bids that aren‚Äôt &lt;strong&gt;recent&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Are there recent annual sales bids that were not &lt;strong&gt;updated&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Are there recently updated sales bids that aren‚Äôt &lt;strong&gt;annual&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And so on. We can apply such questioning to all of our names to figure out which words are just fluff, don‚Äôt disambiguate the name and should be removed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omit-words-that-are-known-from-the-surrounding-context&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#omit-words-that-are-known-from-the-surrounding-context&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#omit-words-that-are-known-from-the-surrounding-context&quot;&gt;Omit words that are known from the surrounding context&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Class variables are in the context of their class. Class names are in the context of their component and so on.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;annualSaleRebate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rebate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;promoteHolidaySale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Better:&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnnualHolidaySale&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;rebate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rebate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;promote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;omit-words-that-dont-mean-much-of-anything&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#omit-words-that-dont-mean-much-of-anything&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#omit-words-that-dont-mean-much-of-anything&quot;&gt;Omit words that don‚Äôt mean much of anything&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We&amp;#8217;re looking at you &lt;code&gt;manager&lt;/code&gt;, &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;amount&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Connection&lt;/code&gt; provides exactly the same information as &lt;code&gt;ConnectionManager&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If in doubt ask yourself &lt;em&gt;‚ÄúWould this name mean the same thing if I removed the word?‚Äù&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use &lt;em&gt;set-Methods&lt;/em&gt;. The Merriam-Webster dictionary has more than 25 definitions of the verb set. It is one of the least-precise words you can use. Consider using names that express intent and give you the ability to protect invariants.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setEngineState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EngineState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;On&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setDestination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;London&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Better&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plotCourseTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;London&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Never use &lt;em&gt;get-Methods&lt;/em&gt;. The Merriam-Webster dictionary has more than 15 definitions of the verb get. Name functions that just return a property and don‚Äôt change state using nouns. Using a get as prefix does not provide any meaningful additional information and is just fluff.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Bad&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Better&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dogs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#summary&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use one word per concept&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omit words that are obvious given a variable‚Äôs or parameter‚Äôs type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omit words that don‚Äôt disambiguate the name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omit words that are known from the surrounding context&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Omit words that don‚Äôt mean much of anything&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope these guidelines provide value to you.
Most of them are from &lt;a href=&quot;https://journal.stuffwithstuff.com/2016/06/16/long-names-are-long/&quot;&gt;Long Names are Long&lt;/a&gt; and I&amp;#8217;ve only added little bits here and there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;appendix-length-class&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#appendix-length-class&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot; href=&quot;#appendix-length-class&quot;&gt;Appendix: Length class&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s not hard to write a class that pairs a number and a unit.
I&amp;#8217;ve included an example below with lots of useful methods.
Depending on your domain a money object can be more challenging because you do have to remember your unit and can&amp;#8217;t convert everything to a default unit.
Please also not that I used integer precision for my length.
Depending on your domain you might want to use long or BigDecimal instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// (you can write this much shorter if you use Kotlin data classes or Java records)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// so that Length(4) == Length(4)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// so that you can use Length in a Set or Map&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// for nicer debugging&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$rawValueInMeter m&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// so that Length(4) &amp;lt; Length(5)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// so that Length(4) + Length(5) = Length(9)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValueInMeter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// so that Length(8) - Length(5) = Length(3)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValueInMeter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValueInMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// so that you can write Length.fromMeter(4) and know the unit&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromMeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="naming" /><category term="code" /><summary type="html">Programming is a team sport where we use code to send messages of intent to our future selves. The messages are the names we have assigned to various function, class and other code elements. The assigned name can then help our future selves figure out the intent of an element and if a new piece of functionality goes here or over there. Thus naming is inseparable from design. A well-chosen name is the difference between one hour of &quot;I know exactly what to do&quot; and days and weeks of rework because &quot;I thought I needed to do this but actually&amp;#8230;&amp;#8203;&quot;.</summary></entry></feed>